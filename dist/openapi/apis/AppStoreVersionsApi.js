"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum = exports.AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum = exports.AppStoreVersionsGetInstanceFieldsAlternativeDistributionPackagesEnum = exports.AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum = exports.AppStoreVersionsGetInstanceIncludeEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum = exports.AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum = exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = exports.AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum = exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = exports.AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum = exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum = exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = exports.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedIncludeEnum = exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppPreviewSetsEnum = exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppScreenshotSetsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum = exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum = exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum = exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum = exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum = exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedIncludeEnum = exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedFieldsAlternativeDistributionPackageVersionsEnum = exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = exports.AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum = exports.AppStoreVersionsApi = void 0;
exports.AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum = exports.AppStoreVersionsGetInstanceFieldsBuildsEnum = exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum = exports.AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class AppStoreVersionsApi extends runtime.BaseAPI {
    /**
     */
    appStoreVersionsAgeRatingDeclarationGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAgeRatingDeclarationGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/ageRatingDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AgeRatingDeclarationWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAgeRatingDeclarationGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAgeRatingDeclarationGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAlternativeDistributionPackageGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAlternativeDistributionPackageGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAlternativeDistributionPackages) {
                queryParameters["fields[alternativeDistributionPackages]"] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionPackageVersions) {
                queryParameters["fields[alternativeDistributionPackageVersions]"] = requestParameters.fieldsAlternativeDistributionPackageVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitVersions !== undefined) {
                queryParameters["limit[versions]"] = requestParameters.limitVersions;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/alternativeDistributionPackage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AlternativeDistributionPackageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAlternativeDistributionPackageGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAlternativeDistributionPackageGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppClips) {
                queryParameters["fields[appClips]"] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipAppStoreReviewDetails) {
                queryParameters["fields[appClipAppStoreReviewDetails]"] = requestParameters.fieldsAppClipAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperienceLocalizations) {
                queryParameters["fields[appClipDefaultExperienceLocalizations]"] = requestParameters.fieldsAppClipDefaultExperienceLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppClipDefaultExperienceLocalizations !== undefined) {
                queryParameters["limit[appClipDefaultExperienceLocalizations]"] = requestParameters.limitAppClipDefaultExperienceLocalizations;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppClipDefaultExperienceResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppClipDefaultExperienceGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceGetToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionAppClipDefaultExperienceLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.");
            }
            if (requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === null || requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest === undefined) {
                throw new runtime.RequiredError("appStoreVersionAppClipDefaultExperienceLinkageRequest", "Required parameter requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest was null or undefined when calling appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionAppClipDefaultExperienceLinkageRequestToJSON)(requestParameters.appStoreVersionAppClipDefaultExperienceLinkageRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreReviewDetailGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters["fields[appStoreReviewDetails]"] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewAttachments) {
                queryParameters["fields[appStoreReviewAttachments]"] = requestParameters.fieldsAppStoreReviewAttachments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreReviewAttachments !== undefined) {
                queryParameters["limit[appStoreReviewAttachments]"] = requestParameters.limitAppStoreReviewAttachments;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreReviewDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreReviewDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionExperimentsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterState) {
                queryParameters["filter[state]"] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
                queryParameters["fields[appStoreVersionExperimentTreatments]"] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
                queryParameters["limit[appStoreVersionExperimentTreatments]"] = requestParameters.limitAppStoreVersionExperimentTreatments;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionExperiments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionExperimentsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterState) {
                queryParameters["filter[state]"] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
                queryParameters["fields[appStoreVersionExperimentTreatments]"] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitControlVersions !== undefined) {
                queryParameters["limit[controlVersions]"] = requestParameters.limitControlVersions;
            }
            if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
                queryParameters["limit[appStoreVersionExperimentTreatments]"] = requestParameters.limitAppStoreVersionExperimentTreatments;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionExperimentsV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionExperimentsV2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLocale) {
                queryParameters["filter[locale]"] = requestParameters.filterLocale.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppScreenshotSets) {
                queryParameters["fields[appScreenshotSets]"] = requestParameters.fieldsAppScreenshotSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPreviewSets) {
                queryParameters["fields[appPreviewSets]"] = requestParameters.fieldsAppPreviewSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters["fields[appStoreVersionLocalizations]"] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppScreenshotSets !== undefined) {
                queryParameters["limit[appScreenshotSets]"] = requestParameters.limitAppScreenshotSets;
            }
            if (requestParameters.limitAppPreviewSets !== undefined) {
                queryParameters["limit[appPreviewSets]"] = requestParameters.limitAppPreviewSets;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters["fields[appStoreVersionPhasedReleases]"] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionPhasedReleaseWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsAppStoreVersionSubmissionGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersionSubmissions) {
                queryParameters["fields[appStoreVersionSubmissions]"] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/appStoreVersionSubmission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionSubmissionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsAppStoreVersionSubmissionGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildGetToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionBuildLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsBuildGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsBuildGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.");
            }
            if (requestParameters.appStoreVersionBuildLinkageRequest === null || requestParameters.appStoreVersionBuildLinkageRequest === undefined) {
                throw new runtime.RequiredError("appStoreVersionBuildLinkageRequest", "Required parameter requestParameters.appStoreVersionBuildLinkageRequest was null or undefined when calling appStoreVersionsBuildUpdateToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/relationships/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionBuildLinkageRequestToJSON)(requestParameters.appStoreVersionBuildLinkageRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsBuildUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsBuildUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.appStoreVersionCreateRequest === null || requestParameters.appStoreVersionCreateRequest === undefined) {
                throw new runtime.RequiredError("appStoreVersionCreateRequest", "Required parameter requestParameters.appStoreVersionCreateRequest was null or undefined when calling appStoreVersionsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionCreateRequestToJSON)(requestParameters.appStoreVersionCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsCustomerReviewsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterRating) {
                queryParameters["filter[rating]"] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.existsPublishedResponse !== undefined) {
                queryParameters["exists[publishedResponse]"] = requestParameters.existsPublishedResponse;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters["fields[customerReviews]"] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviewResponses) {
                queryParameters["fields[customerReviewResponses]"] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerReviewsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsCustomerReviewsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appStoreVersionsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appStoreVersionsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appStoreVersionsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionSubmissions) {
                queryParameters["fields[appStoreVersionSubmissions]"] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionPackages) {
                queryParameters["fields[alternativeDistributionPackages]"] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters["fields[customerReviews]"] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters["fields[appStoreReviewDetails]"] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters["fields[routingAppCoverages]"] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters["fields[appStoreVersionPhasedReleases]"] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters["fields[appStoreVersionLocalizations]"] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
                queryParameters["limit[appStoreVersionExperiments]"] = requestParameters.limitAppStoreVersionExperiments;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
                queryParameters["limit[appStoreVersionLocalizations]"] = requestParameters.limitAppStoreVersionLocalizations;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsRoutingAppCoverageGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters["fields[routingAppCoverages]"] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}/routingAppCoverage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoutingAppCoverageWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsRoutingAppCoverageGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsRoutingAppCoverageGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appStoreVersionsUpdateInstance.");
            }
            if (requestParameters.appStoreVersionUpdateRequest === null || requestParameters.appStoreVersionUpdateRequest === undefined) {
                throw new runtime.RequiredError("appStoreVersionUpdateRequest", "Required parameter requestParameters.appStoreVersionUpdateRequest was null or undefined when calling appStoreVersionsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/appStoreVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppStoreVersionUpdateRequestToJSON)(requestParameters.appStoreVersionUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appStoreVersionsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appStoreVersionsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AppStoreVersionsApi = AppStoreVersionsApi;
/**
 * @export
 */
exports.AppStoreVersionsAgeRatingDeclarationGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: "appStoreVersion",
    Versions: "versions"
};
/**
 * @export
 */
exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedFieldsAlternativeDistributionPackageVersionsEnum = {
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    Deltas: "deltas",
    FileChecksum: "fileChecksum",
    State: "state",
    Url: "url",
    UrlExpirationDate: "urlExpirationDate",
    Variants: "variants",
    Version: "version"
};
/**
 * @export
 */
exports.AppStoreVersionsAlternativeDistributionPackageGetToOneRelatedIncludeEnum = {
    Versions: "versions"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipsEnum = {
    App: "app",
    AppClipAdvancedExperiences: "appClipAdvancedExperiences",
    AppClipDefaultExperiences: "appClipDefaultExperiences",
    BundleId: "bundleId"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipAppStoreReviewDetailsEnum = {
    AppClipDefaultExperience: "appClipDefaultExperience",
    InvocationUrls: "invocationUrls"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedFieldsAppClipDefaultExperienceLocalizationsEnum = {
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppClipHeaderImage: "appClipHeaderImage",
    Locale: "locale",
    Subtitle: "subtitle"
};
/**
 * @export
 */
exports.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedIncludeEnum = {
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedFieldsAppStoreReviewAttachmentsEnum = {
    AppStoreReviewDetail: "appStoreReviewDetail",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedIncludeEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFilterStateEnum = {
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    ReadyForReview: "READY_FOR_REVIEW",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Accepted: "ACCEPTED",
    Approved: "APPROVED",
    Rejected: "REJECTED",
    Completed: "COMPLETED",
    Stopped: "STOPPED"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    EndDate: "endDate",
    Name: "name",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: "appIcon",
    AppIconName: "appIconName",
    AppStoreVersionExperiment: "appStoreVersionExperiment",
    AppStoreVersionExperimentTreatmentLocalizations: "appStoreVersionExperimentTreatmentLocalizations",
    AppStoreVersionExperimentV2: "appStoreVersionExperimentV2",
    Name: "name",
    PromotedDate: "promotedDate"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = {
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    ReadyForReview: "READY_FOR_REVIEW",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Accepted: "ACCEPTED",
    Approved: "APPROVED",
    Rejected: "REJECTED",
    Completed: "COMPLETED",
    Stopped: "STOPPED"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: "appIcon",
    AppIconName: "appIconName",
    AppStoreVersionExperiment: "appStoreVersionExperiment",
    AppStoreVersionExperimentTreatmentLocalizations: "appStoreVersionExperimentTreatmentLocalizations",
    AppStoreVersionExperimentV2: "appStoreVersionExperimentV2",
    Name: "name",
    PromotedDate: "promotedDate"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    LatestControlVersion: "latestControlVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppScreenshotSetsEnum = {
    AppCustomProductPageLocalization: "appCustomProductPageLocalization",
    AppScreenshots: "appScreenshots",
    AppStoreVersionExperimentTreatmentLocalization: "appStoreVersionExperimentTreatmentLocalization",
    AppStoreVersionLocalization: "appStoreVersionLocalization",
    ScreenshotDisplayType: "screenshotDisplayType"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppPreviewSetsEnum = {
    AppCustomProductPageLocalization: "appCustomProductPageLocalization",
    AppPreviews: "appPreviews",
    AppStoreVersionExperimentTreatmentLocalization: "appStoreVersionExperimentTreatmentLocalization",
    AppStoreVersionLocalization: "appStoreVersionLocalization",
    PreviewType: "previewType"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion",
    Description: "description",
    Keywords: "keywords",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PromotionalText: "promotionalText",
    SupportUrl: "supportUrl",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedIncludeEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: "appStoreVersion",
    CurrentDayNumber: "currentDayNumber",
    PhasedReleaseState: "phasedReleaseState",
    StartDate: "startDate",
    TotalPauseDuration: "totalPauseDuration"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedIncludeEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsBuildGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = {
    Abw: "ABW",
    Afg: "AFG",
    Ago: "AGO",
    Aia: "AIA",
    Alb: "ALB",
    And: "AND",
    Ant: "ANT",
    Are: "ARE",
    Arg: "ARG",
    Arm: "ARM",
    Asm: "ASM",
    Atg: "ATG",
    Aus: "AUS",
    Aut: "AUT",
    Aze: "AZE",
    Bdi: "BDI",
    Bel: "BEL",
    Ben: "BEN",
    Bes: "BES",
    Bfa: "BFA",
    Bgd: "BGD",
    Bgr: "BGR",
    Bhr: "BHR",
    Bhs: "BHS",
    Bih: "BIH",
    Blr: "BLR",
    Blz: "BLZ",
    Bmu: "BMU",
    Bol: "BOL",
    Bra: "BRA",
    Brb: "BRB",
    Brn: "BRN",
    Btn: "BTN",
    Bwa: "BWA",
    Caf: "CAF",
    Can: "CAN",
    Che: "CHE",
    Chl: "CHL",
    Chn: "CHN",
    Civ: "CIV",
    Cmr: "CMR",
    Cod: "COD",
    Cog: "COG",
    Cok: "COK",
    Col: "COL",
    Com: "COM",
    Cpv: "CPV",
    Cri: "CRI",
    Cub: "CUB",
    Cuw: "CUW",
    Cxr: "CXR",
    Cym: "CYM",
    Cyp: "CYP",
    Cze: "CZE",
    Deu: "DEU",
    Dji: "DJI",
    Dma: "DMA",
    Dnk: "DNK",
    Dom: "DOM",
    Dza: "DZA",
    Ecu: "ECU",
    Egy: "EGY",
    Eri: "ERI",
    Esp: "ESP",
    Est: "EST",
    Eth: "ETH",
    Fin: "FIN",
    Fji: "FJI",
    Flk: "FLK",
    Fra: "FRA",
    Fro: "FRO",
    Fsm: "FSM",
    Gab: "GAB",
    Gbr: "GBR",
    Geo: "GEO",
    Ggy: "GGY",
    Gha: "GHA",
    Gib: "GIB",
    Gin: "GIN",
    Glp: "GLP",
    Gmb: "GMB",
    Gnb: "GNB",
    Gnq: "GNQ",
    Grc: "GRC",
    Grd: "GRD",
    Grl: "GRL",
    Gtm: "GTM",
    Guf: "GUF",
    Gum: "GUM",
    Guy: "GUY",
    Hkg: "HKG",
    Hnd: "HND",
    Hrv: "HRV",
    Hti: "HTI",
    Hun: "HUN",
    Idn: "IDN",
    Imn: "IMN",
    Ind: "IND",
    Irl: "IRL",
    Irq: "IRQ",
    Isl: "ISL",
    Isr: "ISR",
    Ita: "ITA",
    Jam: "JAM",
    Jey: "JEY",
    Jor: "JOR",
    Jpn: "JPN",
    Kaz: "KAZ",
    Ken: "KEN",
    Kgz: "KGZ",
    Khm: "KHM",
    Kir: "KIR",
    Kna: "KNA",
    Kor: "KOR",
    Kwt: "KWT",
    Lao: "LAO",
    Lbn: "LBN",
    Lbr: "LBR",
    Lby: "LBY",
    Lca: "LCA",
    Lie: "LIE",
    Lka: "LKA",
    Lso: "LSO",
    Ltu: "LTU",
    Lux: "LUX",
    Lva: "LVA",
    Mac: "MAC",
    Mar: "MAR",
    Mco: "MCO",
    Mda: "MDA",
    Mdg: "MDG",
    Mdv: "MDV",
    Mex: "MEX",
    Mhl: "MHL",
    Mkd: "MKD",
    Mli: "MLI",
    Mlt: "MLT",
    Mmr: "MMR",
    Mne: "MNE",
    Mng: "MNG",
    Mnp: "MNP",
    Moz: "MOZ",
    Mrt: "MRT",
    Msr: "MSR",
    Mtq: "MTQ",
    Mus: "MUS",
    Mwi: "MWI",
    Mys: "MYS",
    Myt: "MYT",
    Nam: "NAM",
    Ncl: "NCL",
    Ner: "NER",
    Nfk: "NFK",
    Nga: "NGA",
    Nic: "NIC",
    Niu: "NIU",
    Nld: "NLD",
    Nor: "NOR",
    Npl: "NPL",
    Nru: "NRU",
    Nzl: "NZL",
    Omn: "OMN",
    Pak: "PAK",
    Pan: "PAN",
    Per: "PER",
    Phl: "PHL",
    Plw: "PLW",
    Png: "PNG",
    Pol: "POL",
    Pri: "PRI",
    Prt: "PRT",
    Pry: "PRY",
    Pse: "PSE",
    Pyf: "PYF",
    Qat: "QAT",
    Reu: "REU",
    Rou: "ROU",
    Rus: "RUS",
    Rwa: "RWA",
    Sau: "SAU",
    Sen: "SEN",
    Sgp: "SGP",
    Shn: "SHN",
    Slb: "SLB",
    Sle: "SLE",
    Slv: "SLV",
    Smr: "SMR",
    Som: "SOM",
    Spm: "SPM",
    Srb: "SRB",
    Ssd: "SSD",
    Stp: "STP",
    Sur: "SUR",
    Svk: "SVK",
    Svn: "SVN",
    Swe: "SWE",
    Swz: "SWZ",
    Sxm: "SXM",
    Syc: "SYC",
    Tca: "TCA",
    Tcd: "TCD",
    Tgo: "TGO",
    Tha: "THA",
    Tjk: "TJK",
    Tkm: "TKM",
    Tls: "TLS",
    Ton: "TON",
    Tto: "TTO",
    Tun: "TUN",
    Tur: "TUR",
    Tuv: "TUV",
    Twn: "TWN",
    Tza: "TZA",
    Uga: "UGA",
    Ukr: "UKR",
    Umi: "UMI",
    Ury: "URY",
    Usa: "USA",
    Uzb: "UZB",
    Vat: "VAT",
    Vct: "VCT",
    Ven: "VEN",
    Vgb: "VGB",
    Vir: "VIR",
    Vnm: "VNM",
    Vut: "VUT",
    Wlf: "WLF",
    Wsm: "WSM",
    Yem: "YEM",
    Zaf: "ZAF",
    Zmb: "ZMB",
    Zwe: "ZWE"
};
/**
 * @export
 */
exports.AppStoreVersionsCustomerReviewsGetToManyRelatedSortEnum = {
    CreatedDate: "createdDate",
    CreatedDate: "-createdDate",
    Rating: "rating",
    Rating: "-rating"
};
/**
 * @export
 */
exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = {
    Body: "body",
    CreatedDate: "createdDate",
    Rating: "rating",
    Response: "response",
    ReviewerNickname: "reviewerNickname",
    Territory: "territory",
    Title: "title"
};
/**
 * @export
 */
exports.AppStoreVersionsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = {
    LastModifiedDate: "lastModifiedDate",
    ResponseBody: "responseBody",
    Review: "review",
    State: "state"
};
/**
 * @export
 */
exports.AppStoreVersionsCustomerReviewsGetToManyRelatedIncludeEnum = {
    Response: "response"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceIncludeEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    Build: "build",
    RoutingAppCoverage: "routingAppCoverage"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: "appStoreVersion",
    Versions: "versions"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsCustomerReviewsEnum = {
    Body: "body",
    CreatedDate: "createdDate",
    Rating: "rating",
    Response: "response",
    ReviewerNickname: "reviewerNickname",
    Territory: "territory",
    Title: "title"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: "appStoreVersion",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: "appStoreVersion",
    CurrentDayNumber: "currentDayNumber",
    PhasedReleaseState: "phasedReleaseState",
    StartDate: "startDate",
    TotalPauseDuration: "totalPauseDuration"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppStoreVersionsGetInstanceFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion",
    Description: "description",
    Keywords: "keywords",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PromotionalText: "promotionalText",
    SupportUrl: "supportUrl",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.AppStoreVersionsRoutingAppCoverageGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: "appStoreVersion",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
