"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = exports.AppsAppPriceScheduleGetToOneRelatedIncludeEnum = exports.AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum = exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum = exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum = exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum = exports.AppsAppPricePointsGetToManyRelatedIncludeEnum = exports.AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum = exports.AppsAppPricePointsGetToManyRelatedFieldsAppsEnum = exports.AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum = exports.AppsAppInfosGetToManyRelatedIncludeEnum = exports.AppsAppInfosGetToManyRelatedFieldsAppsEnum = exports.AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum = exports.AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum = exports.AppsAppInfosGetToManyRelatedFieldsAppInfosEnum = exports.AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum = exports.AppsAppEventsGetToManyRelatedIncludeEnum = exports.AppsAppEventsGetToManyRelatedFieldsAppEventsEnum = exports.AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum = exports.AppsAppEventsGetToManyRelatedFilterEventStateEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = exports.AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum = exports.AppsAppCustomProductPagesGetToManyRelatedIncludeEnum = exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum = exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum = exports.AppsAppClipsGetToManyRelatedIncludeEnum = exports.AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = exports.AppsAppClipsGetToManyRelatedFieldsAppsEnum = exports.AppsAppClipsGetToManyRelatedFieldsAppClipsEnum = exports.AppsAppAvailabilityGetToOneRelatedIncludeEnum = exports.AppsAppAvailabilityGetToOneRelatedFieldsTerritoriesEnum = exports.AppsAppAvailabilityGetToOneRelatedFieldsAppsEnum = exports.AppsAppAvailabilityGetToOneRelatedFieldsAppAvailabilitiesEnum = exports.AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum = exports.AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum = exports.AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum = exports.AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum = exports.AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum = exports.AppsApi = void 0;
exports.AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum = exports.AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum = exports.AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum = exports.AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = exports.AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum = exports.AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum = exports.AppsGameCenterDetailGetToOneRelatedIncludeEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = exports.AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = exports.AppsCustomerReviewsGetToManyRelatedIncludeEnum = exports.AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = exports.AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = exports.AppsCustomerReviewsGetToManyRelatedSortEnum = exports.AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = exports.AppsCiProductGetToOneRelatedIncludeEnum = exports.AppsCiProductGetToOneRelatedFieldsBundleIdsEnum = exports.AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum = exports.AppsCiProductGetToOneRelatedFieldsAppsEnum = exports.AppsCiProductGetToOneRelatedFieldsCiProductsEnum = exports.AppsBuildsGetToManyRelatedFieldsBuildsEnum = exports.AppsBetaTesterUsagesGetMetricsPeriodEnum = exports.AppsBetaTesterUsagesGetMetricsGroupByEnum = exports.AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum = exports.AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = exports.AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum = exports.AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum = exports.AppsAppStoreVersionsGetToManyRelatedIncludeEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum = exports.AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum = exports.AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum = void 0;
exports.AppsGetInstanceFieldsBuildsEnum = exports.AppsGetInstanceFieldsAppEventsEnum = exports.AppsGetInstanceFieldsCustomerReviewsEnum = exports.AppsGetInstanceFieldsAppAvailabilitiesEnum = exports.AppsGetInstanceFieldsPromotedPurchasesEnum = exports.AppsGetInstanceFieldsBetaGroupsEnum = exports.AppsGetInstanceFieldsReviewSubmissionsEnum = exports.AppsGetInstanceFieldsAlternativeDistributionKeysEnum = exports.AppsGetInstanceFieldsCiProductsEnum = exports.AppsGetInstanceFieldsAppPriceSchedulesEnum = exports.AppsGetInstanceFieldsGameCenterDetailsEnum = exports.AppsGetInstanceFieldsBetaAppReviewDetailsEnum = exports.AppsGetInstanceIncludeEnum = exports.AppsGetInstanceFieldsAppsEnum = exports.AppsGetCollectionFieldsPerfPowerMetricsEnum = exports.AppsGetCollectionFieldsAppEncryptionDeclarationsEnum = exports.AppsGetCollectionFieldsAppCustomProductPagesEnum = exports.AppsGetCollectionFieldsAppStoreVersionsEnum = exports.AppsGetCollectionFieldsEndUserLicenseAgreementsEnum = exports.AppsGetCollectionFieldsSubscriptionGracePeriodsEnum = exports.AppsGetCollectionFieldsGameCenterEnabledVersionsEnum = exports.AppsGetCollectionFieldsAppStoreVersionExperimentsEnum = exports.AppsGetCollectionFieldsAppPreOrdersEnum = exports.AppsGetCollectionFieldsAnalyticsReportRequestsEnum = exports.AppsGetCollectionFieldsSubscriptionGroupsEnum = exports.AppsGetCollectionFieldsPreReleaseVersionsEnum = exports.AppsGetCollectionFieldsInAppPurchasesEnum = exports.AppsGetCollectionFieldsAppPricePointsEnum = exports.AppsGetCollectionFieldsBetaAppLocalizationsEnum = exports.AppsGetCollectionFieldsAppInfosEnum = exports.AppsGetCollectionFieldsAppClipsEnum = exports.AppsGetCollectionFieldsMarketplaceSearchDetailsEnum = exports.AppsGetCollectionFieldsBetaLicenseAgreementsEnum = exports.AppsGetCollectionFieldsBuildsEnum = exports.AppsGetCollectionFieldsAppEventsEnum = exports.AppsGetCollectionFieldsCustomerReviewsEnum = exports.AppsGetCollectionFieldsAppAvailabilitiesEnum = exports.AppsGetCollectionFieldsPromotedPurchasesEnum = exports.AppsGetCollectionFieldsBetaGroupsEnum = exports.AppsGetCollectionFieldsReviewSubmissionsEnum = exports.AppsGetCollectionFieldsAlternativeDistributionKeysEnum = exports.AppsGetCollectionFieldsCiProductsEnum = exports.AppsGetCollectionFieldsAppPriceSchedulesEnum = exports.AppsGetCollectionFieldsGameCenterDetailsEnum = exports.AppsGetCollectionFieldsBetaAppReviewDetailsEnum = exports.AppsGetCollectionIncludeEnum = exports.AppsGetCollectionFieldsAppsEnum = exports.AppsGetCollectionSortEnum = exports.AppsGetCollectionFilterAppStoreVersionsPlatformEnum = exports.AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum = void 0;
exports.AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum = exports.AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum = exports.AppsReviewSubmissionsGetToManyRelatedFilterStateEnum = exports.AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum = exports.AppsPromotedPurchasesGetToManyRelatedIncludeEnum = exports.AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchaseImagesEnum = exports.AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = exports.AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum = exports.AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum = exports.AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum = exports.AppsPreOrderGetToOneRelatedFieldsAppPreOrdersEnum = exports.AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = exports.AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = exports.AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum = exports.AppsInAppPurchasesV2GetToManyRelatedIncludeEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum = exports.AppsInAppPurchasesV2GetToManyRelatedSortEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum = exports.AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum = exports.AppsInAppPurchasesGetToManyRelatedIncludeEnum = exports.AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum = exports.AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = exports.AppsInAppPurchasesGetToManyRelatedSortEnum = exports.AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum = exports.AppsGetInstanceFieldsPerfPowerMetricsEnum = exports.AppsGetInstanceFieldsAppEncryptionDeclarationsEnum = exports.AppsGetInstanceFieldsAppCustomProductPagesEnum = exports.AppsGetInstanceFieldsAppStoreVersionsEnum = exports.AppsGetInstanceFieldsEndUserLicenseAgreementsEnum = exports.AppsGetInstanceFieldsSubscriptionGracePeriodsEnum = exports.AppsGetInstanceFieldsGameCenterEnabledVersionsEnum = exports.AppsGetInstanceFieldsAppStoreVersionExperimentsEnum = exports.AppsGetInstanceFieldsAppPreOrdersEnum = exports.AppsGetInstanceFieldsAnalyticsReportRequestsEnum = exports.AppsGetInstanceFieldsSubscriptionGroupsEnum = exports.AppsGetInstanceFieldsPreReleaseVersionsEnum = exports.AppsGetInstanceFieldsInAppPurchasesEnum = exports.AppsGetInstanceFieldsAppPricePointsEnum = exports.AppsGetInstanceFieldsBetaAppLocalizationsEnum = exports.AppsGetInstanceFieldsAppInfosEnum = exports.AppsGetInstanceFieldsAppClipsEnum = exports.AppsGetInstanceFieldsMarketplaceSearchDetailsEnum = exports.AppsGetInstanceFieldsBetaLicenseAgreementsEnum = void 0;
exports.AppsSubscriptionGroupsGetToManyRelatedIncludeEnum = exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum = exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum = exports.AppsSubscriptionGroupsGetToManyRelatedSortEnum = exports.AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum = exports.AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = exports.AppsReviewSubmissionsGetToManyRelatedIncludeEnum = exports.AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum = exports.AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class AppsApi extends runtime.BaseAPI {
    /**
     */
    appsAlternativeDistributionKeyGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAlternativeDistributionKeyGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAlternativeDistributionKeys) {
                queryParameters["fields[alternativeDistributionKeys]"] = requestParameters.fieldsAlternativeDistributionKeys.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/alternativeDistributionKey`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AlternativeDistributionKeyResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAlternativeDistributionKeyGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAlternativeDistributionKeyGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAnalyticsReportRequestsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAnalyticsReportRequestsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterAccessType) {
                queryParameters["filter[accessType]"] = requestParameters.filterAccessType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAnalyticsReportRequests) {
                queryParameters["fields[analyticsReportRequests]"] = requestParameters.fieldsAnalyticsReportRequests.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAnalyticsReports) {
                queryParameters["fields[analyticsReports]"] = requestParameters.fieldsAnalyticsReports.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitReports !== undefined) {
                queryParameters["limit[reports]"] = requestParameters.limitReports;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/analyticsReportRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AnalyticsReportRequestsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAnalyticsReportRequestsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAnalyticsReportRequestsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppAvailabilityGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppAvailabilities) {
                queryParameters["fields[appAvailabilities]"] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAvailableTerritories !== undefined) {
                queryParameters["limit[availableTerritories]"] = requestParameters.limitAvailableTerritories;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appAvailability`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppAvailabilityResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppAvailabilityGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppClipsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppClipsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterBundleId) {
                queryParameters["filter[bundleId]"] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClips) {
                queryParameters["fields[appClips]"] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppClipDefaultExperiences !== undefined) {
                queryParameters["limit[appClipDefaultExperiences]"] = requestParameters.limitAppClipDefaultExperiences;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appClips`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppClipsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppClipsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppClipsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppCustomProductPagesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterVisible) {
                queryParameters["filter[visible]"] = requestParameters.filterVisible.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCustomProductPages) {
                queryParameters["fields[appCustomProductPages]"] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCustomProductPageVersions) {
                queryParameters["fields[appCustomProductPageVersions]"] = requestParameters.fieldsAppCustomProductPageVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppCustomProductPageVersions !== undefined) {
                queryParameters["limit[appCustomProductPageVersions]"] = requestParameters.limitAppCustomProductPageVersions;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appCustomProductPages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppCustomProductPagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppCustomProductPagesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppCustomProductPagesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppEncryptionDeclarationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppEncryptionDeclarationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBuilds) {
                queryParameters["filter[builds]"] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarationDocuments) {
                queryParameters["fields[appEncryptionDeclarationDocuments]"] = requestParameters.fieldsAppEncryptionDeclarationDocuments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appEncryptionDeclarations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppEncryptionDeclarationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppEncryptionDeclarationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppEncryptionDeclarationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppEventsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppEventsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterEventState) {
                queryParameters["filter[eventState]"] = requestParameters.filterEventState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEventLocalizations) {
                queryParameters["fields[appEventLocalizations]"] = requestParameters.fieldsAppEventLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEvents) {
                queryParameters["fields[appEvents]"] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appEvents`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppEventsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppEventsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppEventsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppInfosGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppInfosGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppInfos) {
                queryParameters["fields[appInfos]"] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppInfoLocalizations) {
                queryParameters["fields[appInfoLocalizations]"] = requestParameters.fieldsAppInfoLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCategories) {
                queryParameters["fields[appCategories]"] = requestParameters.fieldsAppCategories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppInfoLocalizations !== undefined) {
                queryParameters["limit[appInfoLocalizations]"] = requestParameters.limitAppInfoLocalizations;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appInfos`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppInfosResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppInfosGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppInfosGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppPricePointsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppPricePointsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPricePoints) {
                queryParameters["fields[appPricePoints]"] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appPricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppPricePointsV3ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppPricePointsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppPriceScheduleGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppPriceScheduleGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppPrices) {
                queryParameters["fields[appPrices]"] = requestParameters.fieldsAppPrices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPriceSchedules) {
                queryParameters["fields[appPriceSchedules]"] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitManualPrices !== undefined) {
                queryParameters["limit[manualPrices]"] = requestParameters.limitManualPrices;
            }
            if (requestParameters.limitAutomaticPrices !== undefined) {
                queryParameters["limit[automaticPrices]"] = requestParameters.limitAutomaticPrices;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appPriceSchedule`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppPriceScheduleResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppPriceScheduleGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppPriceScheduleGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppStoreVersionExperimentsV2GetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterState) {
                queryParameters["filter[state]"] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperimentTreatments) {
                queryParameters["fields[appStoreVersionExperimentTreatments]"] = requestParameters.fieldsAppStoreVersionExperimentTreatments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitControlVersions !== undefined) {
                queryParameters["limit[controlVersions]"] = requestParameters.limitControlVersions;
            }
            if (requestParameters.limitAppStoreVersionExperimentTreatments !== undefined) {
                queryParameters["limit[appStoreVersionExperimentTreatments]"] = requestParameters.limitAppStoreVersionExperimentTreatments;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appStoreVersionExperimentsV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionExperimentsV2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppStoreVersionExperimentsV2GetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppStoreVersionExperimentsV2GetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsAppStoreVersionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsAppStoreVersionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterAppStoreState) {
                queryParameters["filter[appStoreState]"] = requestParameters.filterAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppVersionState) {
                queryParameters["filter[appVersionState]"] = requestParameters.filterAppVersionState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterVersionString) {
                queryParameters["filter[versionString]"] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters["fields[appStoreReviewDetails]"] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters["fields[appStoreVersionLocalizations]"] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionSubmissions) {
                queryParameters["fields[appStoreVersionSubmissions]"] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionPackages) {
                queryParameters["fields[alternativeDistributionPackages]"] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters["fields[routingAppCoverages]"] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters["fields[appStoreVersionPhasedReleases]"] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
                queryParameters["limit[appStoreVersionLocalizations]"] = requestParameters.limitAppStoreVersionLocalizations;
            }
            if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
                queryParameters["limit[appStoreVersionExperiments]"] = requestParameters.limitAppStoreVersionExperiments;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/appStoreVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsAppStoreVersionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsAppStoreVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaAppLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaAppLocalizations) {
                queryParameters["fields[betaAppLocalizations]"] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/betaAppLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaAppLocalizationsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaAppLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaAppLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaAppReviewDetailGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaAppReviewDetails) {
                queryParameters["fields[betaAppReviewDetails]"] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/betaAppReviewDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaAppReviewDetailWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaAppReviewDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaAppReviewDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaGroupsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaGroupsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaGroupsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaLicenseAgreementGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaLicenseAgreements) {
                queryParameters["fields[betaLicenseAgreements]"] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/betaLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaLicenseAgreementWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaLicenseAgreementGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaTesterUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaTesters !== undefined) {
                queryParameters["filter[betaTesters]"] = requestParameters.filterBetaTesters;
            }
            if (requestParameters.period !== undefined) {
                queryParameters["period"] = requestParameters.period;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppsBetaTesterUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaTesterUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaTestersDeleteToManyRelationship.");
            }
            if (requestParameters.appBetaTestersLinkagesRequest === null || requestParameters.appBetaTestersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("appBetaTestersLinkagesRequest", "Required parameter requestParameters.appBetaTestersLinkagesRequest was null or undefined when calling appsBetaTestersDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppBetaTestersLinkagesRequestToJSON)(requestParameters.appBetaTestersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appsBetaTestersDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appsBuildsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBuildsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBuildsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsCiProductGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsCiProductGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBundleIds) {
                queryParameters["fields[bundleIds]"] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitPrimaryRepositories !== undefined) {
                queryParameters["limit[primaryRepositories]"] = requestParameters.limitPrimaryRepositories;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/ciProduct`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiProductResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsCiProductGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsCiProductGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsCustomerReviewsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterRating) {
                queryParameters["filter[rating]"] = requestParameters.filterRating.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.existsPublishedResponse !== undefined) {
                queryParameters["exists[publishedResponse]"] = requestParameters.existsPublishedResponse;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters["fields[customerReviews]"] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviewResponses) {
                queryParameters["fields[customerReviewResponses]"] = requestParameters.fieldsCustomerReviewResponses.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/customerReviews`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CustomerReviewsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsCustomerReviewsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsCustomerReviewsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsEndUserLicenseAgreementGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsEndUserLicenseAgreements) {
                queryParameters["fields[endUserLicenseAgreements]"] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/endUserLicenseAgreement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.EndUserLicenseAgreementWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsEndUserLicenseAgreementGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsEndUserLicenseAgreementGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsGameCenterDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsGameCenterDetailGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitGameCenterAppVersions !== undefined) {
                queryParameters["limit[gameCenterAppVersions]"] = requestParameters.limitGameCenterAppVersions;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.limitAchievementReleases !== undefined) {
                queryParameters["limit[achievementReleases]"] = requestParameters.limitAchievementReleases;
            }
            if (requestParameters.limitLeaderboardReleases !== undefined) {
                queryParameters["limit[leaderboardReleases]"] = requestParameters.limitLeaderboardReleases;
            }
            if (requestParameters.limitLeaderboardSetReleases !== undefined) {
                queryParameters["limit[leaderboardSetReleases]"] = requestParameters.limitLeaderboardSetReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/gameCenterDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsGameCenterDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsGameCenterDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsGameCenterEnabledVersionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterVersionString) {
                queryParameters["filter[versionString]"] = requestParameters.filterVersionString.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterEnabledVersions) {
                queryParameters["fields[gameCenterEnabledVersions]"] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitCompatibleVersions !== undefined) {
                queryParameters["limit[compatibleVersions]"] = requestParameters.limitCompatibleVersions;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/gameCenterEnabledVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterEnabledVersionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsGameCenterEnabledVersionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsGameCenterEnabledVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterAppStoreVersionsAppStoreState) {
                queryParameters["filter[appStoreVersions.appStoreState]"] = requestParameters.filterAppStoreVersionsAppStoreState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppStoreVersionsAppVersionState) {
                queryParameters["filter[appStoreVersions.appVersionState]"] = requestParameters.filterAppStoreVersionsAppVersionState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppStoreVersionsPlatform) {
                queryParameters["filter[appStoreVersions.platform]"] = requestParameters.filterAppStoreVersionsPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBundleId) {
                queryParameters["filter[bundleId]"] = requestParameters.filterBundleId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterName) {
                queryParameters["filter[name]"] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterSku) {
                queryParameters["filter[sku]"] = requestParameters.filterSku.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppStoreVersions) {
                queryParameters["filter[appStoreVersions]"] = requestParameters.filterAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.existsGameCenterEnabledVersions !== undefined) {
                queryParameters["exists[gameCenterEnabledVersions]"] = requestParameters.existsGameCenterEnabledVersions;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppReviewDetails) {
                queryParameters["fields[betaAppReviewDetails]"] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPriceSchedules) {
                queryParameters["fields[appPriceSchedules]"] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionKeys) {
                queryParameters["fields[alternativeDistributionKeys]"] = requestParameters.fieldsAlternativeDistributionKeys.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsReviewSubmissions) {
                queryParameters["fields[reviewSubmissions]"] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppAvailabilities) {
                queryParameters["fields[appAvailabilities]"] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters["fields[customerReviews]"] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEvents) {
                queryParameters["fields[appEvents]"] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaLicenseAgreements) {
                queryParameters["fields[betaLicenseAgreements]"] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsMarketplaceSearchDetails) {
                queryParameters["fields[marketplaceSearchDetails]"] = requestParameters.fieldsMarketplaceSearchDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClips) {
                queryParameters["fields[appClips]"] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppInfos) {
                queryParameters["fields[appInfos]"] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppLocalizations) {
                queryParameters["fields[betaAppLocalizations]"] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPricePoints) {
                queryParameters["fields[appPricePoints]"] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGroups) {
                queryParameters["fields[subscriptionGroups]"] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAnalyticsReportRequests) {
                queryParameters["fields[analyticsReportRequests]"] = requestParameters.fieldsAnalyticsReportRequests.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPreOrders) {
                queryParameters["fields[appPreOrders]"] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterEnabledVersions) {
                queryParameters["fields[gameCenterEnabledVersions]"] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGracePeriods) {
                queryParameters["fields[subscriptionGracePeriods]"] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsEndUserLicenseAgreements) {
                queryParameters["fields[endUserLicenseAgreements]"] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCustomProductPages) {
                queryParameters["fields[appCustomProductPages]"] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPerfPowerMetrics) {
                queryParameters["fields[perfPowerMetrics]"] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppClips !== undefined) {
                queryParameters["limit[appClips]"] = requestParameters.limitAppClips;
            }
            if (requestParameters.limitAppCustomProductPages !== undefined) {
                queryParameters["limit[appCustomProductPages]"] = requestParameters.limitAppCustomProductPages;
            }
            if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
                queryParameters["limit[appEncryptionDeclarations]"] = requestParameters.limitAppEncryptionDeclarations;
            }
            if (requestParameters.limitAppEvents !== undefined) {
                queryParameters["limit[appEvents]"] = requestParameters.limitAppEvents;
            }
            if (requestParameters.limitAppInfos !== undefined) {
                queryParameters["limit[appInfos]"] = requestParameters.limitAppInfos;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.limitAppStoreVersions !== undefined) {
                queryParameters["limit[appStoreVersions]"] = requestParameters.limitAppStoreVersions;
            }
            if (requestParameters.limitBetaAppLocalizations !== undefined) {
                queryParameters["limit[betaAppLocalizations]"] = requestParameters.limitBetaAppLocalizations;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
                queryParameters["limit[gameCenterEnabledVersions]"] = requestParameters.limitGameCenterEnabledVersions;
            }
            if (requestParameters.limitInAppPurchases !== undefined) {
                queryParameters["limit[inAppPurchases]"] = requestParameters.limitInAppPurchases;
            }
            if (requestParameters.limitInAppPurchasesV2 !== undefined) {
                queryParameters["limit[inAppPurchasesV2]"] = requestParameters.limitInAppPurchasesV2;
            }
            if (requestParameters.limitPreReleaseVersions !== undefined) {
                queryParameters["limit[preReleaseVersions]"] = requestParameters.limitPreReleaseVersions;
            }
            if (requestParameters.limitPromotedPurchases !== undefined) {
                queryParameters["limit[promotedPurchases]"] = requestParameters.limitPromotedPurchases;
            }
            if (requestParameters.limitReviewSubmissions !== undefined) {
                queryParameters["limit[reviewSubmissions]"] = requestParameters.limitReviewSubmissions;
            }
            if (requestParameters.limitSubscriptionGroups !== undefined) {
                queryParameters["limit[subscriptionGroups]"] = requestParameters.limitSubscriptionGroups;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.appsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppReviewDetails) {
                queryParameters["fields[betaAppReviewDetails]"] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPriceSchedules) {
                queryParameters["fields[appPriceSchedules]"] = requestParameters.fieldsAppPriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionKeys) {
                queryParameters["fields[alternativeDistributionKeys]"] = requestParameters.fieldsAlternativeDistributionKeys.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsReviewSubmissions) {
                queryParameters["fields[reviewSubmissions]"] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppAvailabilities) {
                queryParameters["fields[appAvailabilities]"] = requestParameters.fieldsAppAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCustomerReviews) {
                queryParameters["fields[customerReviews]"] = requestParameters.fieldsCustomerReviews.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEvents) {
                queryParameters["fields[appEvents]"] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaLicenseAgreements) {
                queryParameters["fields[betaLicenseAgreements]"] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsMarketplaceSearchDetails) {
                queryParameters["fields[marketplaceSearchDetails]"] = requestParameters.fieldsMarketplaceSearchDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClips) {
                queryParameters["fields[appClips]"] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppInfos) {
                queryParameters["fields[appInfos]"] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppLocalizations) {
                queryParameters["fields[betaAppLocalizations]"] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPricePoints) {
                queryParameters["fields[appPricePoints]"] = requestParameters.fieldsAppPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGroups) {
                queryParameters["fields[subscriptionGroups]"] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAnalyticsReportRequests) {
                queryParameters["fields[analyticsReportRequests]"] = requestParameters.fieldsAnalyticsReportRequests.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPreOrders) {
                queryParameters["fields[appPreOrders]"] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterEnabledVersions) {
                queryParameters["fields[gameCenterEnabledVersions]"] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGracePeriods) {
                queryParameters["fields[subscriptionGracePeriods]"] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsEndUserLicenseAgreements) {
                queryParameters["fields[endUserLicenseAgreements]"] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCustomProductPages) {
                queryParameters["fields[appCustomProductPages]"] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPerfPowerMetrics) {
                queryParameters["fields[perfPowerMetrics]"] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppClips !== undefined) {
                queryParameters["limit[appClips]"] = requestParameters.limitAppClips;
            }
            if (requestParameters.limitAppCustomProductPages !== undefined) {
                queryParameters["limit[appCustomProductPages]"] = requestParameters.limitAppCustomProductPages;
            }
            if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
                queryParameters["limit[appEncryptionDeclarations]"] = requestParameters.limitAppEncryptionDeclarations;
            }
            if (requestParameters.limitAppEvents !== undefined) {
                queryParameters["limit[appEvents]"] = requestParameters.limitAppEvents;
            }
            if (requestParameters.limitAppInfos !== undefined) {
                queryParameters["limit[appInfos]"] = requestParameters.limitAppInfos;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.limitAppStoreVersions !== undefined) {
                queryParameters["limit[appStoreVersions]"] = requestParameters.limitAppStoreVersions;
            }
            if (requestParameters.limitBetaAppLocalizations !== undefined) {
                queryParameters["limit[betaAppLocalizations]"] = requestParameters.limitBetaAppLocalizations;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
                queryParameters["limit[gameCenterEnabledVersions]"] = requestParameters.limitGameCenterEnabledVersions;
            }
            if (requestParameters.limitInAppPurchases !== undefined) {
                queryParameters["limit[inAppPurchases]"] = requestParameters.limitInAppPurchases;
            }
            if (requestParameters.limitInAppPurchasesV2 !== undefined) {
                queryParameters["limit[inAppPurchasesV2]"] = requestParameters.limitInAppPurchasesV2;
            }
            if (requestParameters.limitPreReleaseVersions !== undefined) {
                queryParameters["limit[preReleaseVersions]"] = requestParameters.limitPreReleaseVersions;
            }
            if (requestParameters.limitPromotedPurchases !== undefined) {
                queryParameters["limit[promotedPurchases]"] = requestParameters.limitPromotedPurchases;
            }
            if (requestParameters.limitReviewSubmissions !== undefined) {
                queryParameters["limit[reviewSubmissions]"] = requestParameters.limitReviewSubmissions;
            }
            if (requestParameters.limitSubscriptionGroups !== undefined) {
                queryParameters["limit[subscriptionGroups]"] = requestParameters.limitSubscriptionGroups;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsInAppPurchasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsInAppPurchasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterInAppPurchaseType) {
                queryParameters["filter[inAppPurchaseType]"] = requestParameters.filterInAppPurchaseType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterCanBeSubmitted) {
                queryParameters["filter[canBeSubmitted]"] = requestParameters.filterCanBeSubmitted.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitApps !== undefined) {
                queryParameters["limit[apps]"] = requestParameters.limitApps;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/inAppPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.InAppPurchasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsInAppPurchasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsInAppPurchasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsInAppPurchasesV2GetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterInAppPurchaseType) {
                queryParameters["filter[inAppPurchaseType]"] = requestParameters.filterInAppPurchaseType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterName) {
                queryParameters["filter[name]"] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterProductId) {
                queryParameters["filter[productId]"] = requestParameters.filterProductId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterState) {
                queryParameters["filter[state]"] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots) {
                queryParameters["fields[inAppPurchaseAppStoreReviewScreenshots]"] = requestParameters.fieldsInAppPurchaseAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchaseAvailabilities) {
                queryParameters["fields[inAppPurchaseAvailabilities]"] = requestParameters.fieldsInAppPurchaseAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchaseLocalizations) {
                queryParameters["fields[inAppPurchaseLocalizations]"] = requestParameters.fieldsInAppPurchaseLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchasePriceSchedules) {
                queryParameters["fields[inAppPurchasePriceSchedules]"] = requestParameters.fieldsInAppPurchasePriceSchedules.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchaseContents) {
                queryParameters["fields[inAppPurchaseContents]"] = requestParameters.fieldsInAppPurchaseContents.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitInAppPurchaseLocalizations !== undefined) {
                queryParameters["limit[inAppPurchaseLocalizations]"] = requestParameters.limitInAppPurchaseLocalizations;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/inAppPurchasesV2`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.InAppPurchasesV2ResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsInAppPurchasesV2GetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsInAppPurchasesV2GetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsMarketplaceSearchDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsMarketplaceSearchDetailGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsMarketplaceSearchDetails) {
                queryParameters["fields[marketplaceSearchDetails]"] = requestParameters.fieldsMarketplaceSearchDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/marketplaceSearchDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MarketplaceSearchDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsMarketplaceSearchDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsMarketplaceSearchDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPerfPowerMetricsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterDeviceType) {
                queryParameters["filter[deviceType]"] = requestParameters.filterDeviceType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterMetricType) {
                queryParameters["filter[metricType]"] = requestParameters.filterMetricType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/perfPowerMetrics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.XcodeMetricsFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsPerfPowerMetricsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPreOrderGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPreOrderGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppPreOrders) {
                queryParameters["fields[appPreOrders]"] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/preOrder`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppPreOrderWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsPreOrderGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsPreOrderGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPreReleaseVersionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/preReleaseVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PreReleaseVersionsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsPreReleaseVersionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsPreReleaseVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPromotedPurchasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchaseImages) {
                queryParameters["fields[promotedPurchaseImages]"] = requestParameters.fieldsPromotedPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitPromotionImages !== undefined) {
                queryParameters["limit[promotionImages]"] = requestParameters.limitPromotionImages;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PromotedPurchasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsPromotedPurchasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsPromotedPurchasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppPromotedPurchasesLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsPromotedPurchasesGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsPromotedPurchasesGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.");
            }
            if (requestParameters.appPromotedPurchasesLinkagesRequest === null || requestParameters.appPromotedPurchasesLinkagesRequest === undefined) {
                throw new runtime.RequiredError("appPromotedPurchasesLinkagesRequest", "Required parameter requestParameters.appPromotedPurchasesLinkagesRequest was null or undefined when calling appsPromotedPurchasesReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/relationships/promotedPurchases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppPromotedPurchasesLinkagesRequestToJSON)(requestParameters.appPromotedPurchasesLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    appsPromotedPurchasesReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.appsPromotedPurchasesReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    appsReviewSubmissionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsReviewSubmissionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterState) {
                queryParameters["filter[state]"] = requestParameters.filterState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsReviewSubmissionItems) {
                queryParameters["fields[reviewSubmissionItems]"] = requestParameters.fieldsReviewSubmissionItems.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsActors) {
                queryParameters["fields[actors]"] = requestParameters.fieldsActors.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsReviewSubmissions) {
                queryParameters["fields[reviewSubmissions]"] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitItems !== undefined) {
                queryParameters["limit[items]"] = requestParameters.limitItems;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/reviewSubmissions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ReviewSubmissionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsReviewSubmissionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsReviewSubmissionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGracePeriodGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsSubscriptionGracePeriods) {
                queryParameters["fields[subscriptionGracePeriods]"] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/subscriptionGracePeriod`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionGracePeriodResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsSubscriptionGracePeriodGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsSubscriptionGracePeriodGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsSubscriptionGroupsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterSubscriptionsState) {
                queryParameters["filter[subscriptions.state]"] = requestParameters.filterSubscriptionsState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGroups) {
                queryParameters["fields[subscriptionGroups]"] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGroupLocalizations) {
                queryParameters["fields[subscriptionGroupLocalizations]"] = requestParameters.fieldsSubscriptionGroupLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitSubscriptions !== undefined) {
                queryParameters["limit[subscriptions]"] = requestParameters.limitSubscriptions;
            }
            if (requestParameters.limitSubscriptionGroupLocalizations !== undefined) {
                queryParameters["limit[subscriptionGroupLocalizations]"] = requestParameters.limitSubscriptionGroupLocalizations;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/subscriptionGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionGroupsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsSubscriptionGroupsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsSubscriptionGroupsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    appsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsUpdateInstance.");
            }
            if (requestParameters.appUpdateRequest === null || requestParameters.appUpdateRequest === undefined) {
                throw new runtime.RequiredError("appUpdateRequest", "Required parameter requestParameters.appUpdateRequest was null or undefined when calling appsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.AppUpdateRequestToJSON)(requestParameters.appUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.AppsApi = AppsApi;
/**
 * @export
 */
exports.AppsAlternativeDistributionKeyGetToOneRelatedFieldsAlternativeDistributionKeysEnum = {
    App: "app",
    PublicKey: "publicKey"
};
/**
 * @export
 */
exports.AppsAnalyticsReportRequestsGetToManyRelatedFilterAccessTypeEnum = {
    OneTimeSnapshot: "ONE_TIME_SNAPSHOT",
    Ongoing: "ONGOING"
};
/**
 * @export
 */
exports.AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportRequestsEnum = {
    AccessType: "accessType",
    App: "app",
    Reports: "reports",
    StoppedDueToInactivity: "stoppedDueToInactivity"
};
/**
 * @export
 */
exports.AppsAnalyticsReportRequestsGetToManyRelatedFieldsAnalyticsReportsEnum = {
    Category: "category",
    Instances: "instances",
    Name: "name"
};
/**
 * @export
 */
exports.AppsAnalyticsReportRequestsGetToManyRelatedIncludeEnum = {
    Reports: "reports"
};
/**
 * @export
 */
exports.AppsAppAvailabilityGetToOneRelatedFieldsAppAvailabilitiesEnum = {
    App: "app",
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories"
};
/**
 * @export
 */
exports.AppsAppAvailabilityGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppAvailabilityGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.AppsAppAvailabilityGetToOneRelatedIncludeEnum = {
    App: "app",
    AvailableTerritories: "availableTerritories"
};
/**
 * @export
 */
exports.AppsAppClipsGetToManyRelatedFieldsAppClipsEnum = {
    App: "app",
    AppClipAdvancedExperiences: "appClipAdvancedExperiences",
    AppClipDefaultExperiences: "appClipDefaultExperiences",
    BundleId: "bundleId"
};
/**
 * @export
 */
exports.AppsAppClipsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppClipsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.AppsAppClipsGetToManyRelatedIncludeEnum = {
    App: "app",
    AppClipDefaultExperiences: "appClipDefaultExperiences"
};
/**
 * @export
 */
exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPagesEnum = {
    App: "app",
    AppCustomProductPageVersions: "appCustomProductPageVersions",
    AppStoreVersionTemplate: "appStoreVersionTemplate",
    CustomProductPageTemplate: "customProductPageTemplate",
    Name: "name",
    Url: "url",
    Visible: "visible"
};
/**
 * @export
 */
exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppCustomProductPageVersionsEnum = {
    AppCustomProductPage: "appCustomProductPage",
    AppCustomProductPageLocalizations: "appCustomProductPageLocalizations",
    DeepLink: "deepLink",
    State: "state",
    Version: "version"
};
/**
 * @export
 */
exports.AppsAppCustomProductPagesGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppCustomProductPagesGetToManyRelatedIncludeEnum = {
    App: "app",
    AppCustomProductPageVersions: "appCustomProductPageVersions"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsAppEncryptionDeclarationDocumentsEnum = {
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AssetDeliveryState: "assetDeliveryState",
    AssetToken: "assetToken",
    DownloadUrl: "downloadUrl",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppsAppEncryptionDeclarationsGetToManyRelatedIncludeEnum = {
    App: "app",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    Builds: "builds"
};
/**
 * @export
 */
exports.AppsAppEventsGetToManyRelatedFilterEventStateEnum = {
    Draft: "DRAFT",
    ReadyForReview: "READY_FOR_REVIEW",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Rejected: "REJECTED",
    Accepted: "ACCEPTED",
    Approved: "APPROVED",
    Published: "PUBLISHED",
    Past: "PAST",
    Archived: "ARCHIVED"
};
/**
 * @export
 */
exports.AppsAppEventsGetToManyRelatedFieldsAppEventLocalizationsEnum = {
    AppEvent: "appEvent",
    AppEventScreenshots: "appEventScreenshots",
    AppEventVideoClips: "appEventVideoClips",
    Locale: "locale",
    LongDescription: "longDescription",
    Name: "name",
    ShortDescription: "shortDescription"
};
/**
 * @export
 */
exports.AppsAppEventsGetToManyRelatedFieldsAppEventsEnum = {
    App: "app",
    ArchivedTerritorySchedules: "archivedTerritorySchedules",
    Badge: "badge",
    DeepLink: "deepLink",
    EventState: "eventState",
    Localizations: "localizations",
    PrimaryLocale: "primaryLocale",
    Priority: "priority",
    PurchaseRequirement: "purchaseRequirement",
    Purpose: "purpose",
    ReferenceName: "referenceName",
    TerritorySchedules: "territorySchedules"
};
/**
 * @export
 */
exports.AppsAppEventsGetToManyRelatedIncludeEnum = {
    Localizations: "localizations"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedFieldsAppInfosEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    App: "app",
    AppInfoLocalizations: "appInfoLocalizations",
    AppStoreAgeRating: "appStoreAgeRating",
    AppStoreState: "appStoreState",
    BrazilAgeRating: "brazilAgeRating",
    BrazilAgeRatingV2: "brazilAgeRatingV2",
    KidsAgeBand: "kidsAgeBand",
    PrimaryCategory: "primaryCategory",
    PrimarySubcategoryOne: "primarySubcategoryOne",
    PrimarySubcategoryTwo: "primarySubcategoryTwo",
    SecondaryCategory: "secondaryCategory",
    SecondarySubcategoryOne: "secondarySubcategoryOne",
    SecondarySubcategoryTwo: "secondarySubcategoryTwo",
    State: "state"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedFieldsAppInfoLocalizationsEnum = {
    AppInfo: "appInfo",
    Locale: "locale",
    Name: "name",
    PrivacyChoicesUrl: "privacyChoicesUrl",
    PrivacyPolicyText: "privacyPolicyText",
    PrivacyPolicyUrl: "privacyPolicyUrl",
    Subtitle: "subtitle"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedFieldsAppCategoriesEnum = {
    Parent: "parent",
    Platforms: "platforms",
    Subcategories: "subcategories"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppInfosGetToManyRelatedIncludeEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    App: "app",
    AppInfoLocalizations: "appInfoLocalizations",
    PrimaryCategory: "primaryCategory",
    PrimarySubcategoryOne: "primarySubcategoryOne",
    PrimarySubcategoryTwo: "primarySubcategoryTwo",
    SecondaryCategory: "secondaryCategory",
    SecondarySubcategoryOne: "secondarySubcategoryOne",
    SecondarySubcategoryTwo: "secondarySubcategoryTwo"
};
/**
 * @export
 */
exports.AppsAppPricePointsGetToManyRelatedFieldsAppPricePointsEnum = {
    App: "app",
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    Territory: "territory"
};
/**
 * @export
 */
exports.AppsAppPricePointsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppPricePointsGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.AppsAppPricePointsGetToManyRelatedIncludeEnum = {
    App: "app",
    Territory: "territory"
};
/**
 * @export
 */
exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppPricesEnum = {
    AppPricePoint: "appPricePoint",
    EndDate: "endDate",
    Manual: "manual",
    StartDate: "startDate",
    Territory: "territory"
};
/**
 * @export
 */
exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppPriceSchedulesEnum = {
    App: "app",
    AutomaticPrices: "automaticPrices",
    BaseTerritory: "baseTerritory",
    ManualPrices: "manualPrices"
};
/**
 * @export
 */
exports.AppsAppPriceScheduleGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppPriceScheduleGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.AppsAppPriceScheduleGetToOneRelatedIncludeEnum = {
    App: "app",
    AutomaticPrices: "automaticPrices",
    BaseTerritory: "baseTerritory",
    ManualPrices: "manualPrices"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFilterStateEnum = {
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    ReadyForReview: "READY_FOR_REVIEW",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Accepted: "ACCEPTED",
    Approved: "APPROVED",
    Rejected: "REJECTED",
    Completed: "COMPLETED",
    Stopped: "STOPPED"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionExperimentTreatmentsEnum = {
    AppIcon: "appIcon",
    AppIconName: "appIconName",
    AppStoreVersionExperiment: "appStoreVersionExperiment",
    AppStoreVersionExperimentTreatmentLocalizations: "appStoreVersionExperimentTreatmentLocalizations",
    AppStoreVersionExperimentV2: "appStoreVersionExperimentV2",
    Name: "name",
    PromotedDate: "promotedDate"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppStoreVersionExperimentsV2GetToManyRelatedIncludeEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    LatestControlVersion: "latestControlVersion"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFilterAppStoreStateEnum = {
    Accepted: "ACCEPTED",
    DeveloperRemovedFromSale: "DEVELOPER_REMOVED_FROM_SALE",
    DeveloperRejected: "DEVELOPER_REJECTED",
    InReview: "IN_REVIEW",
    InvalidBinary: "INVALID_BINARY",
    MetadataRejected: "METADATA_REJECTED",
    PendingAppleRelease: "PENDING_APPLE_RELEASE",
    PendingContract: "PENDING_CONTRACT",
    PendingDeveloperRelease: "PENDING_DEVELOPER_RELEASE",
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    PreorderReadyForSale: "PREORDER_READY_FOR_SALE",
    ProcessingForAppStore: "PROCESSING_FOR_APP_STORE",
    ReadyForReview: "READY_FOR_REVIEW",
    ReadyForSale: "READY_FOR_SALE",
    Rejected: "REJECTED",
    RemovedFromSale: "REMOVED_FROM_SALE",
    WaitingForExportCompliance: "WAITING_FOR_EXPORT_COMPLIANCE",
    WaitingForReview: "WAITING_FOR_REVIEW",
    ReplacedWithNewVersion: "REPLACED_WITH_NEW_VERSION",
    NotApplicable: "NOT_APPLICABLE"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFilterAppVersionStateEnum = {
    Accepted: "ACCEPTED",
    DeveloperRejected: "DEVELOPER_REJECTED",
    InReview: "IN_REVIEW",
    InvalidBinary: "INVALID_BINARY",
    MetadataRejected: "METADATA_REJECTED",
    PendingAppleRelease: "PENDING_APPLE_RELEASE",
    PendingDeveloperRelease: "PENDING_DEVELOPER_RELEASE",
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    ProcessingForDistribution: "PROCESSING_FOR_DISTRIBUTION",
    ReadyForDistribution: "READY_FOR_DISTRIBUTION",
    ReadyForReview: "READY_FOR_REVIEW",
    Rejected: "REJECTED",
    ReplacedWithNewVersion: "REPLACED_WITH_NEW_VERSION",
    WaitingForExportCompliance: "WAITING_FOR_EXPORT_COMPLIANCE",
    WaitingForReview: "WAITING_FOR_REVIEW"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion",
    Description: "description",
    Keywords: "keywords",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PromotionalText: "promotionalText",
    SupportUrl: "supportUrl",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: "appStoreVersion",
    Versions: "versions"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: "appStoreVersion",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: "appStoreVersion",
    CurrentDayNumber: "currentDayNumber",
    PhasedReleaseState: "phasedReleaseState",
    StartDate: "startDate",
    TotalPauseDuration: "totalPauseDuration"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppsAppStoreVersionsGetToManyRelatedIncludeEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    Build: "build",
    RoutingAppCoverage: "routingAppCoverage"
};
/**
 * @export
 */
exports.AppsBetaAppLocalizationsGetToManyRelatedFieldsBetaAppLocalizationsEnum = {
    App: "app",
    Description: "description",
    FeedbackEmail: "feedbackEmail",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PrivacyPolicyUrl: "privacyPolicyUrl",
    TvOsPrivacyPolicy: "tvOsPrivacyPolicy"
};
/**
 * @export
 */
exports.AppsBetaAppReviewDetailGetToOneRelatedFieldsBetaAppReviewDetailsEnum = {
    App: "app",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppsBetaGroupsGetToManyRelatedFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.AppsBetaLicenseAgreementGetToOneRelatedFieldsBetaLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app"
};
/**
 * @export
 */
exports.AppsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: "betaTesters"
};
/**
 * @export
 */
exports.AppsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: "P7D",
    P30D: "P30D",
    P90D: "P90D",
    P365D: "P365D"
};
/**
 * @export
 */
exports.AppsBuildsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppsCiProductGetToOneRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.AppsCiProductGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsCiProductGetToOneRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.AppsCiProductGetToOneRelatedFieldsBundleIdsEnum = {
    App: "app",
    BundleIdCapabilities: "bundleIdCapabilities",
    Identifier: "identifier",
    Name: "name",
    Platform: "platform",
    Profiles: "profiles",
    SeedId: "seedId"
};
/**
 * @export
 */
exports.AppsCiProductGetToOneRelatedIncludeEnum = {
    App: "app",
    BundleId: "bundleId",
    PrimaryRepositories: "primaryRepositories"
};
/**
 * @export
 */
exports.AppsCustomerReviewsGetToManyRelatedFilterTerritoryEnum = {
    Abw: "ABW",
    Afg: "AFG",
    Ago: "AGO",
    Aia: "AIA",
    Alb: "ALB",
    And: "AND",
    Ant: "ANT",
    Are: "ARE",
    Arg: "ARG",
    Arm: "ARM",
    Asm: "ASM",
    Atg: "ATG",
    Aus: "AUS",
    Aut: "AUT",
    Aze: "AZE",
    Bdi: "BDI",
    Bel: "BEL",
    Ben: "BEN",
    Bes: "BES",
    Bfa: "BFA",
    Bgd: "BGD",
    Bgr: "BGR",
    Bhr: "BHR",
    Bhs: "BHS",
    Bih: "BIH",
    Blr: "BLR",
    Blz: "BLZ",
    Bmu: "BMU",
    Bol: "BOL",
    Bra: "BRA",
    Brb: "BRB",
    Brn: "BRN",
    Btn: "BTN",
    Bwa: "BWA",
    Caf: "CAF",
    Can: "CAN",
    Che: "CHE",
    Chl: "CHL",
    Chn: "CHN",
    Civ: "CIV",
    Cmr: "CMR",
    Cod: "COD",
    Cog: "COG",
    Cok: "COK",
    Col: "COL",
    Com: "COM",
    Cpv: "CPV",
    Cri: "CRI",
    Cub: "CUB",
    Cuw: "CUW",
    Cxr: "CXR",
    Cym: "CYM",
    Cyp: "CYP",
    Cze: "CZE",
    Deu: "DEU",
    Dji: "DJI",
    Dma: "DMA",
    Dnk: "DNK",
    Dom: "DOM",
    Dza: "DZA",
    Ecu: "ECU",
    Egy: "EGY",
    Eri: "ERI",
    Esp: "ESP",
    Est: "EST",
    Eth: "ETH",
    Fin: "FIN",
    Fji: "FJI",
    Flk: "FLK",
    Fra: "FRA",
    Fro: "FRO",
    Fsm: "FSM",
    Gab: "GAB",
    Gbr: "GBR",
    Geo: "GEO",
    Ggy: "GGY",
    Gha: "GHA",
    Gib: "GIB",
    Gin: "GIN",
    Glp: "GLP",
    Gmb: "GMB",
    Gnb: "GNB",
    Gnq: "GNQ",
    Grc: "GRC",
    Grd: "GRD",
    Grl: "GRL",
    Gtm: "GTM",
    Guf: "GUF",
    Gum: "GUM",
    Guy: "GUY",
    Hkg: "HKG",
    Hnd: "HND",
    Hrv: "HRV",
    Hti: "HTI",
    Hun: "HUN",
    Idn: "IDN",
    Imn: "IMN",
    Ind: "IND",
    Irl: "IRL",
    Irq: "IRQ",
    Isl: "ISL",
    Isr: "ISR",
    Ita: "ITA",
    Jam: "JAM",
    Jey: "JEY",
    Jor: "JOR",
    Jpn: "JPN",
    Kaz: "KAZ",
    Ken: "KEN",
    Kgz: "KGZ",
    Khm: "KHM",
    Kir: "KIR",
    Kna: "KNA",
    Kor: "KOR",
    Kwt: "KWT",
    Lao: "LAO",
    Lbn: "LBN",
    Lbr: "LBR",
    Lby: "LBY",
    Lca: "LCA",
    Lie: "LIE",
    Lka: "LKA",
    Lso: "LSO",
    Ltu: "LTU",
    Lux: "LUX",
    Lva: "LVA",
    Mac: "MAC",
    Mar: "MAR",
    Mco: "MCO",
    Mda: "MDA",
    Mdg: "MDG",
    Mdv: "MDV",
    Mex: "MEX",
    Mhl: "MHL",
    Mkd: "MKD",
    Mli: "MLI",
    Mlt: "MLT",
    Mmr: "MMR",
    Mne: "MNE",
    Mng: "MNG",
    Mnp: "MNP",
    Moz: "MOZ",
    Mrt: "MRT",
    Msr: "MSR",
    Mtq: "MTQ",
    Mus: "MUS",
    Mwi: "MWI",
    Mys: "MYS",
    Myt: "MYT",
    Nam: "NAM",
    Ncl: "NCL",
    Ner: "NER",
    Nfk: "NFK",
    Nga: "NGA",
    Nic: "NIC",
    Niu: "NIU",
    Nld: "NLD",
    Nor: "NOR",
    Npl: "NPL",
    Nru: "NRU",
    Nzl: "NZL",
    Omn: "OMN",
    Pak: "PAK",
    Pan: "PAN",
    Per: "PER",
    Phl: "PHL",
    Plw: "PLW",
    Png: "PNG",
    Pol: "POL",
    Pri: "PRI",
    Prt: "PRT",
    Pry: "PRY",
    Pse: "PSE",
    Pyf: "PYF",
    Qat: "QAT",
    Reu: "REU",
    Rou: "ROU",
    Rus: "RUS",
    Rwa: "RWA",
    Sau: "SAU",
    Sen: "SEN",
    Sgp: "SGP",
    Shn: "SHN",
    Slb: "SLB",
    Sle: "SLE",
    Slv: "SLV",
    Smr: "SMR",
    Som: "SOM",
    Spm: "SPM",
    Srb: "SRB",
    Ssd: "SSD",
    Stp: "STP",
    Sur: "SUR",
    Svk: "SVK",
    Svn: "SVN",
    Swe: "SWE",
    Swz: "SWZ",
    Sxm: "SXM",
    Syc: "SYC",
    Tca: "TCA",
    Tcd: "TCD",
    Tgo: "TGO",
    Tha: "THA",
    Tjk: "TJK",
    Tkm: "TKM",
    Tls: "TLS",
    Ton: "TON",
    Tto: "TTO",
    Tun: "TUN",
    Tur: "TUR",
    Tuv: "TUV",
    Twn: "TWN",
    Tza: "TZA",
    Uga: "UGA",
    Ukr: "UKR",
    Umi: "UMI",
    Ury: "URY",
    Usa: "USA",
    Uzb: "UZB",
    Vat: "VAT",
    Vct: "VCT",
    Ven: "VEN",
    Vgb: "VGB",
    Vir: "VIR",
    Vnm: "VNM",
    Vut: "VUT",
    Wlf: "WLF",
    Wsm: "WSM",
    Yem: "YEM",
    Zaf: "ZAF",
    Zmb: "ZMB",
    Zwe: "ZWE"
};
/**
 * @export
 */
exports.AppsCustomerReviewsGetToManyRelatedSortEnum = {
    CreatedDate: "createdDate",
    CreatedDate: "-createdDate",
    Rating: "rating",
    Rating: "-rating"
};
/**
 * @export
 */
exports.AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewsEnum = {
    Body: "body",
    CreatedDate: "createdDate",
    Rating: "rating",
    Response: "response",
    ReviewerNickname: "reviewerNickname",
    Territory: "territory",
    Title: "title"
};
/**
 * @export
 */
exports.AppsCustomerReviewsGetToManyRelatedFieldsCustomerReviewResponsesEnum = {
    LastModifiedDate: "lastModifiedDate",
    ResponseBody: "responseBody",
    Review: "review",
    State: "state"
};
/**
 * @export
 */
exports.AppsCustomerReviewsGetToManyRelatedIncludeEnum = {
    Response: "response"
};
/**
 * @export
 */
exports.AppsEndUserLicenseAgreementGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app",
    Territories: "territories"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.AppsGameCenterDetailGetToOneRelatedIncludeEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.AppsGameCenterEnabledVersionsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.AppsGameCenterEnabledVersionsGetToManyRelatedSortEnum = {
    VersionString: "versionString",
    VersionString: "-versionString"
};
/**
 * @export
 */
exports.AppsGameCenterEnabledVersionsGetToManyRelatedFieldsGameCenterEnabledVersionsEnum = {
    App: "app",
    CompatibleVersions: "compatibleVersions",
    IconAsset: "iconAsset",
    Platform: "platform",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsGameCenterEnabledVersionsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsGameCenterEnabledVersionsGetToManyRelatedIncludeEnum = {
    App: "app",
    CompatibleVersions: "compatibleVersions"
};
/**
 * @export
 */
exports.AppsGetCollectionFilterAppStoreVersionsAppStoreStateEnum = {
    Accepted: "ACCEPTED",
    DeveloperRemovedFromSale: "DEVELOPER_REMOVED_FROM_SALE",
    DeveloperRejected: "DEVELOPER_REJECTED",
    InReview: "IN_REVIEW",
    InvalidBinary: "INVALID_BINARY",
    MetadataRejected: "METADATA_REJECTED",
    PendingAppleRelease: "PENDING_APPLE_RELEASE",
    PendingContract: "PENDING_CONTRACT",
    PendingDeveloperRelease: "PENDING_DEVELOPER_RELEASE",
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    PreorderReadyForSale: "PREORDER_READY_FOR_SALE",
    ProcessingForAppStore: "PROCESSING_FOR_APP_STORE",
    ReadyForReview: "READY_FOR_REVIEW",
    ReadyForSale: "READY_FOR_SALE",
    Rejected: "REJECTED",
    RemovedFromSale: "REMOVED_FROM_SALE",
    WaitingForExportCompliance: "WAITING_FOR_EXPORT_COMPLIANCE",
    WaitingForReview: "WAITING_FOR_REVIEW",
    ReplacedWithNewVersion: "REPLACED_WITH_NEW_VERSION",
    NotApplicable: "NOT_APPLICABLE"
};
/**
 * @export
 */
exports.AppsGetCollectionFilterAppStoreVersionsAppVersionStateEnum = {
    Accepted: "ACCEPTED",
    DeveloperRejected: "DEVELOPER_REJECTED",
    InReview: "IN_REVIEW",
    InvalidBinary: "INVALID_BINARY",
    MetadataRejected: "METADATA_REJECTED",
    PendingAppleRelease: "PENDING_APPLE_RELEASE",
    PendingDeveloperRelease: "PENDING_DEVELOPER_RELEASE",
    PrepareForSubmission: "PREPARE_FOR_SUBMISSION",
    ProcessingForDistribution: "PROCESSING_FOR_DISTRIBUTION",
    ReadyForDistribution: "READY_FOR_DISTRIBUTION",
    ReadyForReview: "READY_FOR_REVIEW",
    Rejected: "REJECTED",
    ReplacedWithNewVersion: "REPLACED_WITH_NEW_VERSION",
    WaitingForExportCompliance: "WAITING_FOR_EXPORT_COMPLIANCE",
    WaitingForReview: "WAITING_FOR_REVIEW"
};
/**
 * @export
 */
exports.AppsGetCollectionFilterAppStoreVersionsPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.AppsGetCollectionSortEnum = {
    BundleId: "bundleId",
    BundleId: "-bundleId",
    Name: "name",
    Name: "-name",
    Sku: "sku",
    Sku: "-sku"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsGetCollectionIncludeEnum = {
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    Builds: "builds",
    CiProduct: "ciProduct",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsBetaAppReviewDetailsEnum = {
    App: "app",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppPriceSchedulesEnum = {
    App: "app",
    AutomaticPrices: "automaticPrices",
    BaseTerritory: "baseTerritory",
    ManualPrices: "manualPrices"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAlternativeDistributionKeysEnum = {
    App: "app",
    PublicKey: "publicKey"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsReviewSubmissionsEnum = {
    App: "app",
    AppStoreVersionForReview: "appStoreVersionForReview",
    Canceled: "canceled",
    Items: "items",
    LastUpdatedByActor: "lastUpdatedByActor",
    Platform: "platform",
    State: "state",
    Submitted: "submitted",
    SubmittedByActor: "submittedByActor",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppAvailabilitiesEnum = {
    App: "app",
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsCustomerReviewsEnum = {
    Body: "body",
    CreatedDate: "createdDate",
    Rating: "rating",
    Response: "response",
    ReviewerNickname: "reviewerNickname",
    Territory: "territory",
    Title: "title"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppEventsEnum = {
    App: "app",
    ArchivedTerritorySchedules: "archivedTerritorySchedules",
    Badge: "badge",
    DeepLink: "deepLink",
    EventState: "eventState",
    Localizations: "localizations",
    PrimaryLocale: "primaryLocale",
    Priority: "priority",
    PurchaseRequirement: "purchaseRequirement",
    Purpose: "purpose",
    ReferenceName: "referenceName",
    TerritorySchedules: "territorySchedules"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsBetaLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsMarketplaceSearchDetailsEnum = {
    App: "app",
    CatalogUrl: "catalogUrl"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppClipsEnum = {
    App: "app",
    AppClipAdvancedExperiences: "appClipAdvancedExperiences",
    AppClipDefaultExperiences: "appClipDefaultExperiences",
    BundleId: "bundleId"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppInfosEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    App: "app",
    AppInfoLocalizations: "appInfoLocalizations",
    AppStoreAgeRating: "appStoreAgeRating",
    AppStoreState: "appStoreState",
    BrazilAgeRating: "brazilAgeRating",
    BrazilAgeRatingV2: "brazilAgeRatingV2",
    KidsAgeBand: "kidsAgeBand",
    PrimaryCategory: "primaryCategory",
    PrimarySubcategoryOne: "primarySubcategoryOne",
    PrimarySubcategoryTwo: "primarySubcategoryTwo",
    SecondaryCategory: "secondaryCategory",
    SecondarySubcategoryOne: "secondarySubcategoryOne",
    SecondarySubcategoryTwo: "secondarySubcategoryTwo",
    State: "state"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsBetaAppLocalizationsEnum = {
    App: "app",
    Description: "description",
    FeedbackEmail: "feedbackEmail",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PrivacyPolicyUrl: "privacyPolicyUrl",
    TvOsPrivacyPolicy: "tvOsPrivacyPolicy"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppPricePointsEnum = {
    App: "app",
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    Territory: "territory"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Apps: "apps",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    PricePoints: "pricePoints",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReferenceName: "referenceName",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsSubscriptionGroupsEnum = {
    App: "app",
    ReferenceName: "referenceName",
    SubscriptionGroupLocalizations: "subscriptionGroupLocalizations",
    Subscriptions: "subscriptions"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAnalyticsReportRequestsEnum = {
    AccessType: "accessType",
    App: "app",
    Reports: "reports",
    StoppedDueToInactivity: "stoppedDueToInactivity"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppPreOrdersEnum = {
    App: "app",
    AppReleaseDate: "appReleaseDate",
    PreOrderAvailableDate: "preOrderAvailableDate"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsGameCenterEnabledVersionsEnum = {
    App: "app",
    CompatibleVersions: "compatibleVersions",
    IconAsset: "iconAsset",
    Platform: "platform",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsSubscriptionGracePeriodsEnum = {
    Duration: "duration",
    OptIn: "optIn",
    RenewalType: "renewalType",
    SandboxOptIn: "sandboxOptIn"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app",
    Territories: "territories"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppCustomProductPagesEnum = {
    App: "app",
    AppCustomProductPageVersions: "appCustomProductPageVersions",
    AppStoreVersionTemplate: "appStoreVersionTemplate",
    CustomProductPageTemplate: "customProductPageTemplate",
    Name: "name",
    Url: "url",
    Visible: "visible"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.AppsGetCollectionFieldsPerfPowerMetricsEnum = {
    DeviceType: "deviceType",
    MetricType: "metricType",
    Platform: "platform"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsGetInstanceIncludeEnum = {
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    Builds: "builds",
    CiProduct: "ciProduct",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsBetaAppReviewDetailsEnum = {
    App: "app",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppPriceSchedulesEnum = {
    App: "app",
    AutomaticPrices: "automaticPrices",
    BaseTerritory: "baseTerritory",
    ManualPrices: "manualPrices"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAlternativeDistributionKeysEnum = {
    App: "app",
    PublicKey: "publicKey"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsReviewSubmissionsEnum = {
    App: "app",
    AppStoreVersionForReview: "appStoreVersionForReview",
    Canceled: "canceled",
    Items: "items",
    LastUpdatedByActor: "lastUpdatedByActor",
    Platform: "platform",
    State: "state",
    Submitted: "submitted",
    SubmittedByActor: "submittedByActor",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppAvailabilitiesEnum = {
    App: "app",
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsCustomerReviewsEnum = {
    Body: "body",
    CreatedDate: "createdDate",
    Rating: "rating",
    Response: "response",
    ReviewerNickname: "reviewerNickname",
    Territory: "territory",
    Title: "title"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppEventsEnum = {
    App: "app",
    ArchivedTerritorySchedules: "archivedTerritorySchedules",
    Badge: "badge",
    DeepLink: "deepLink",
    EventState: "eventState",
    Localizations: "localizations",
    PrimaryLocale: "primaryLocale",
    Priority: "priority",
    PurchaseRequirement: "purchaseRequirement",
    Purpose: "purpose",
    ReferenceName: "referenceName",
    TerritorySchedules: "territorySchedules"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsBetaLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsMarketplaceSearchDetailsEnum = {
    App: "app",
    CatalogUrl: "catalogUrl"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppClipsEnum = {
    App: "app",
    AppClipAdvancedExperiences: "appClipAdvancedExperiences",
    AppClipDefaultExperiences: "appClipDefaultExperiences",
    BundleId: "bundleId"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppInfosEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    App: "app",
    AppInfoLocalizations: "appInfoLocalizations",
    AppStoreAgeRating: "appStoreAgeRating",
    AppStoreState: "appStoreState",
    BrazilAgeRating: "brazilAgeRating",
    BrazilAgeRatingV2: "brazilAgeRatingV2",
    KidsAgeBand: "kidsAgeBand",
    PrimaryCategory: "primaryCategory",
    PrimarySubcategoryOne: "primarySubcategoryOne",
    PrimarySubcategoryTwo: "primarySubcategoryTwo",
    SecondaryCategory: "secondaryCategory",
    SecondarySubcategoryOne: "secondarySubcategoryOne",
    SecondarySubcategoryTwo: "secondarySubcategoryTwo",
    State: "state"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsBetaAppLocalizationsEnum = {
    App: "app",
    Description: "description",
    FeedbackEmail: "feedbackEmail",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PrivacyPolicyUrl: "privacyPolicyUrl",
    TvOsPrivacyPolicy: "tvOsPrivacyPolicy"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppPricePointsEnum = {
    App: "app",
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    Territory: "territory"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Apps: "apps",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    PricePoints: "pricePoints",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReferenceName: "referenceName",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsSubscriptionGroupsEnum = {
    App: "app",
    ReferenceName: "referenceName",
    SubscriptionGroupLocalizations: "subscriptionGroupLocalizations",
    Subscriptions: "subscriptions"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAnalyticsReportRequestsEnum = {
    AccessType: "accessType",
    App: "app",
    Reports: "reports",
    StoppedDueToInactivity: "stoppedDueToInactivity"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppPreOrdersEnum = {
    App: "app",
    AppReleaseDate: "appReleaseDate",
    PreOrderAvailableDate: "preOrderAvailableDate"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsGameCenterEnabledVersionsEnum = {
    App: "app",
    CompatibleVersions: "compatibleVersions",
    IconAsset: "iconAsset",
    Platform: "platform",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsSubscriptionGracePeriodsEnum = {
    Duration: "duration",
    OptIn: "optIn",
    RenewalType: "renewalType",
    SandboxOptIn: "sandboxOptIn"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app",
    Territories: "territories"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppCustomProductPagesEnum = {
    App: "app",
    AppCustomProductPageVersions: "appCustomProductPageVersions",
    AppStoreVersionTemplate: "appStoreVersionTemplate",
    CustomProductPageTemplate: "customProductPageTemplate",
    Name: "name",
    Url: "url",
    Visible: "visible"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.AppsGetInstanceFieldsPerfPowerMetricsEnum = {
    DeviceType: "deviceType",
    MetricType: "metricType",
    Platform: "platform"
};
/**
 * @export
 */
exports.AppsInAppPurchasesGetToManyRelatedFilterInAppPurchaseTypeEnum = {
    AutomaticallyRenewableSubscription: "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION",
    NonConsumable: "NON_CONSUMABLE",
    Consumable: "CONSUMABLE",
    NonRenewingSubscription: "NON_RENEWING_SUBSCRIPTION",
    FreeSubscription: "FREE_SUBSCRIPTION"
};
/**
 * @export
 */
exports.AppsInAppPurchasesGetToManyRelatedSortEnum = {
    InAppPurchaseType: "inAppPurchaseType",
    InAppPurchaseType: "-inAppPurchaseType",
    ProductId: "productId",
    ProductId: "-productId",
    ReferenceName: "referenceName",
    ReferenceName: "-referenceName"
};
/**
 * @export
 */
exports.AppsInAppPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = {
    Apps: "apps",
    InAppPurchaseType: "inAppPurchaseType",
    ProductId: "productId",
    ReferenceName: "referenceName",
    State: "state"
};
/**
 * @export
 */
exports.AppsInAppPurchasesGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsInAppPurchasesGetToManyRelatedIncludeEnum = {
    Apps: "apps"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFilterInAppPurchaseTypeEnum = {
    Consumable: "CONSUMABLE",
    NonConsumable: "NON_CONSUMABLE",
    NonRenewingSubscription: "NON_RENEWING_SUBSCRIPTION"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFilterStateEnum = {
    MissingMetadata: "MISSING_METADATA",
    WaitingForUpload: "WAITING_FOR_UPLOAD",
    ProcessingContent: "PROCESSING_CONTENT",
    ReadyToSubmit: "READY_TO_SUBMIT",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    DeveloperActionNeeded: "DEVELOPER_ACTION_NEEDED",
    PendingBinaryApproval: "PENDING_BINARY_APPROVAL",
    Approved: "APPROVED",
    DeveloperRemovedFromSale: "DEVELOPER_REMOVED_FROM_SALE",
    RemovedFromSale: "REMOVED_FROM_SALE",
    Rejected: "REJECTED"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedSortEnum = {
    InAppPurchaseType: "inAppPurchaseType",
    InAppPurchaseType: "-inAppPurchaseType",
    Name: "name",
    Name: "-name"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAppStoreReviewScreenshotsEnum = {
    AssetDeliveryState: "assetDeliveryState",
    AssetToken: "assetToken",
    AssetType: "assetType",
    FileName: "fileName",
    FileSize: "fileSize",
    ImageAsset: "imageAsset",
    InAppPurchaseV2: "inAppPurchaseV2",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseAvailabilitiesEnum = {
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories",
    InAppPurchase: "inAppPurchase"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseLocalizationsEnum = {
    Description: "description",
    InAppPurchaseV2: "inAppPurchaseV2",
    Locale: "locale",
    Name: "name",
    State: "state"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchasePriceSchedulesEnum = {
    AutomaticPrices: "automaticPrices",
    BaseTerritory: "baseTerritory",
    InAppPurchase: "inAppPurchase",
    ManualPrices: "manualPrices"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedFieldsInAppPurchaseContentsEnum = {
    FileName: "fileName",
    FileSize: "fileSize",
    InAppPurchaseV2: "inAppPurchaseV2",
    LastModifiedDate: "lastModifiedDate",
    Url: "url"
};
/**
 * @export
 */
exports.AppsInAppPurchasesV2GetToManyRelatedIncludeEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Content: "content",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    PromotedPurchase: "promotedPurchase"
};
/**
 * @export
 */
exports.AppsMarketplaceSearchDetailGetToOneRelatedFieldsMarketplaceSearchDetailsEnum = {
    App: "app",
    CatalogUrl: "catalogUrl"
};
/**
 * @export
 */
exports.AppsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = {
    Disk: "DISK",
    Hang: "HANG",
    Battery: "BATTERY",
    Launch: "LAUNCH",
    Memory: "MEMORY",
    Animation: "ANIMATION",
    Termination: "TERMINATION"
};
/**
 * @export
 */
exports.AppsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS"
};
/**
 * @export
 */
exports.AppsPreOrderGetToOneRelatedFieldsAppPreOrdersEnum = {
    App: "app",
    AppReleaseDate: "appReleaseDate",
    PreOrderAvailableDate: "preOrderAvailableDate"
};
/**
 * @export
 */
exports.AppsPreReleaseVersionsGetToManyRelatedFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.AppsPromotedPurchasesGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.AppsPromotedPurchasesGetToManyRelatedFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    PricePoints: "pricePoints",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.AppsPromotedPurchasesGetToManyRelatedFieldsPromotedPurchaseImagesEnum = {
    AssetToken: "assetToken",
    AssetType: "assetType",
    FileName: "fileName",
    FileSize: "fileSize",
    ImageAsset: "imageAsset",
    PromotedPurchase: "promotedPurchase",
    SourceFileChecksum: "sourceFileChecksum",
    State: "state",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.AppsPromotedPurchasesGetToManyRelatedIncludeEnum = {
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFilterStateEnum = {
    ReadyForReview: "READY_FOR_REVIEW",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    UnresolvedIssues: "UNRESOLVED_ISSUES",
    Canceling: "CANCELING",
    Completing: "COMPLETING",
    Complete: "COMPLETE"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionItemsEnum = {
    AppCustomProductPageVersion: "appCustomProductPageVersion",
    AppEvent: "appEvent",
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperiment: "appStoreVersionExperiment",
    AppStoreVersionExperimentV2: "appStoreVersionExperimentV2",
    Removed: "removed",
    Resolved: "resolved",
    ReviewSubmission: "reviewSubmission",
    State: "state"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFieldsActorsEnum = {
    ActorType: "actorType",
    ApiKeyId: "apiKeyId",
    UserEmail: "userEmail",
    UserFirstName: "userFirstName",
    UserLastName: "userLastName"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedFieldsReviewSubmissionsEnum = {
    App: "app",
    AppStoreVersionForReview: "appStoreVersionForReview",
    Canceled: "canceled",
    Items: "items",
    LastUpdatedByActor: "lastUpdatedByActor",
    Platform: "platform",
    State: "state",
    Submitted: "submitted",
    SubmittedByActor: "submittedByActor",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.AppsReviewSubmissionsGetToManyRelatedIncludeEnum = {
    App: "app",
    AppStoreVersionForReview: "appStoreVersionForReview",
    Items: "items",
    LastUpdatedByActor: "lastUpdatedByActor",
    SubmittedByActor: "submittedByActor"
};
/**
 * @export
 */
exports.AppsSubscriptionGracePeriodGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = {
    Duration: "duration",
    OptIn: "optIn",
    RenewalType: "renewalType",
    SandboxOptIn: "sandboxOptIn"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedFilterSubscriptionsStateEnum = {
    MissingMetadata: "MISSING_METADATA",
    ReadyToSubmit: "READY_TO_SUBMIT",
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    DeveloperActionNeeded: "DEVELOPER_ACTION_NEEDED",
    PendingBinaryApproval: "PENDING_BINARY_APPROVAL",
    Approved: "APPROVED",
    DeveloperRemovedFromSale: "DEVELOPER_REMOVED_FROM_SALE",
    RemovedFromSale: "REMOVED_FROM_SALE",
    Rejected: "REJECTED"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedSortEnum = {
    ReferenceName: "referenceName",
    ReferenceName: "-referenceName"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupsEnum = {
    App: "app",
    ReferenceName: "referenceName",
    SubscriptionGroupLocalizations: "subscriptionGroupLocalizations",
    Subscriptions: "subscriptions"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedFieldsSubscriptionGroupLocalizationsEnum = {
    CustomAppName: "customAppName",
    Locale: "locale",
    Name: "name",
    State: "state",
    SubscriptionGroup: "subscriptionGroup"
};
/**
 * @export
 */
exports.AppsSubscriptionGroupsGetToManyRelatedIncludeEnum = {
    SubscriptionGroupLocalizations: "subscriptionGroupLocalizations",
    Subscriptions: "subscriptions"
};
