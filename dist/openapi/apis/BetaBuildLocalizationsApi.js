"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetaBuildLocalizationsGetInstanceFieldsBuildsEnum = exports.BetaBuildLocalizationsGetInstanceIncludeEnum = exports.BetaBuildLocalizationsGetInstanceFieldsBetaBuildLocalizationsEnum = exports.BetaBuildLocalizationsGetCollectionFieldsBuildsEnum = exports.BetaBuildLocalizationsGetCollectionIncludeEnum = exports.BetaBuildLocalizationsGetCollectionFieldsBetaBuildLocalizationsEnum = exports.BetaBuildLocalizationsBuildGetToOneRelatedFieldsBuildsEnum = exports.BetaBuildLocalizationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class BetaBuildLocalizationsApi extends runtime.BaseAPI {
    /**
     */
    betaBuildLocalizationsBuildGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaBuildLocalizationsBuildGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations/{id}/build`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaBuildLocalizationsBuildGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaBuildLocalizationsBuildGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaBuildLocalizationsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.betaBuildLocalizationCreateRequest === null || requestParameters.betaBuildLocalizationCreateRequest === undefined) {
                throw new runtime.RequiredError("betaBuildLocalizationCreateRequest", "Required parameter requestParameters.betaBuildLocalizationCreateRequest was null or undefined when calling betaBuildLocalizationsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaBuildLocalizationCreateRequestToJSON)(requestParameters.betaBuildLocalizationCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaBuildLocalizationsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaBuildLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaBuildLocalizationsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaBuildLocalizationsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaBuildLocalizationsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaBuildLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaBuildLocalizationsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterLocale) {
                queryParameters["filter[locale]"] = requestParameters.filterLocale.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBuild) {
                queryParameters["filter[build]"] = requestParameters.filterBuild.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaBuildLocalizationsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.betaBuildLocalizationsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaBuildLocalizationsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaBuildLocalizationsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaBuildLocalizationsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaBuildLocalizationsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaBuildLocalizationsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaBuildLocalizationsUpdateInstance.");
            }
            if (requestParameters.betaBuildLocalizationUpdateRequest === null || requestParameters.betaBuildLocalizationUpdateRequest === undefined) {
                throw new runtime.RequiredError("betaBuildLocalizationUpdateRequest", "Required parameter requestParameters.betaBuildLocalizationUpdateRequest was null or undefined when calling betaBuildLocalizationsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaBuildLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaBuildLocalizationUpdateRequestToJSON)(requestParameters.betaBuildLocalizationUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaBuildLocalizationsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaBuildLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BetaBuildLocalizationsApi = BetaBuildLocalizationsApi;
/**
 * @export
 */
exports.BetaBuildLocalizationsBuildGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetCollectionFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetCollectionIncludeEnum = {
    Build: "build"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetCollectionFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetInstanceFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetInstanceIncludeEnum = {
    Build: "build"
};
/**
 * @export
 */
exports.BetaBuildLocalizationsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
