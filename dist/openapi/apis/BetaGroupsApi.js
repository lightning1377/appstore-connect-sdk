"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BetaGroupsGetInstanceFieldsBuildsEnum = exports.BetaGroupsGetInstanceFieldsAppsEnum = exports.BetaGroupsGetInstanceFieldsBetaTestersEnum = exports.BetaGroupsGetInstanceIncludeEnum = exports.BetaGroupsGetInstanceFieldsBetaGroupsEnum = exports.BetaGroupsGetCollectionFieldsBuildsEnum = exports.BetaGroupsGetCollectionFieldsAppsEnum = exports.BetaGroupsGetCollectionFieldsBetaTestersEnum = exports.BetaGroupsGetCollectionIncludeEnum = exports.BetaGroupsGetCollectionFieldsBetaGroupsEnum = exports.BetaGroupsGetCollectionSortEnum = exports.BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum = exports.BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum = exports.BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = exports.BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = exports.BetaGroupsAppGetToOneRelatedFieldsAppsEnum = exports.BetaGroupsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class BetaGroupsApi extends runtime.BaseAPI {
    /**
     */
    betaGroupsAppGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsAppGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsAppGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsAppGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTesterUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaTesters !== undefined) {
                queryParameters["filter[betaTesters]"] = requestParameters.filterBetaTesters;
            }
            if (requestParameters.period !== undefined) {
                queryParameters["period"] = requestParameters.period;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppsBetaTesterUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBetaTesterUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.");
            }
            if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("betaGroupBetaTestersLinkagesRequest", "Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupBetaTestersLinkagesRequestToJSON)(requestParameters.betaGroupBetaTestersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaGroupsBetaTestersCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaGroupsBetaTestersCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.");
            }
            if (requestParameters.betaGroupBetaTestersLinkagesRequest === null || requestParameters.betaGroupBetaTestersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("betaGroupBetaTestersLinkagesRequest", "Required parameter requestParameters.betaGroupBetaTestersLinkagesRequest was null or undefined when calling betaGroupsBetaTestersDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupBetaTestersLinkagesRequestToJSON)(requestParameters.betaGroupBetaTestersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaGroupsBetaTestersDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaGroupsBetaTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaTestersWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBetaTestersGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBetaTestersGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTestersGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/betaTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupBetaTestersLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBetaTestersGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBetaTestersGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.");
            }
            if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("betaGroupBuildsLinkagesRequest", "Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupBuildsLinkagesRequestToJSON)(requestParameters.betaGroupBuildsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaGroupsBuildsCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaGroupsBuildsCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.");
            }
            if (requestParameters.betaGroupBuildsLinkagesRequest === null || requestParameters.betaGroupBuildsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("betaGroupBuildsLinkagesRequest", "Required parameter requestParameters.betaGroupBuildsLinkagesRequest was null or undefined when calling betaGroupsBuildsDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupBuildsLinkagesRequestToJSON)(requestParameters.betaGroupBuildsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaGroupsBuildsDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaGroupsBuildsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaGroupsBuildsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBuildsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBuildsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBuildsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/relationships/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupBuildsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBuildsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBuildsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.betaGroupCreateRequest === null || requestParameters.betaGroupCreateRequest === undefined) {
                throw new runtime.RequiredError("betaGroupCreateRequest", "Required parameter requestParameters.betaGroupCreateRequest was null or undefined when calling betaGroupsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupCreateRequestToJSON)(requestParameters.betaGroupCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    betaGroupsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.betaGroupsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    betaGroupsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterIsInternalGroup) {
                queryParameters["filter[isInternalGroup]"] = requestParameters.filterIsInternalGroup.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterName) {
                queryParameters["filter[name]"] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPublicLink) {
                queryParameters["filter[publicLink]"] = requestParameters.filterPublicLink.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPublicLinkEnabled) {
                queryParameters["filter[publicLinkEnabled]"] = requestParameters.filterPublicLinkEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPublicLinkLimitEnabled) {
                queryParameters["filter[publicLinkLimitEnabled]"] = requestParameters.filterPublicLinkLimitEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterApp) {
                queryParameters["filter[app]"] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBuilds) {
                queryParameters["filter[builds]"] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitBetaTesters !== undefined) {
                queryParameters["limit[betaTesters]"] = requestParameters.limitBetaTesters;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.betaGroupsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitBetaTesters !== undefined) {
                queryParameters["limit[betaTesters]"] = requestParameters.limitBetaTesters;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsUpdateInstance.");
            }
            if (requestParameters.betaGroupUpdateRequest === null || requestParameters.betaGroupUpdateRequest === undefined) {
                throw new runtime.RequiredError("betaGroupUpdateRequest", "Required parameter requestParameters.betaGroupUpdateRequest was null or undefined when calling betaGroupsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BetaGroupUpdateRequestToJSON)(requestParameters.betaGroupUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BetaGroupsApi = BetaGroupsApi;
/**
 * @export
 */
exports.BetaGroupsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: "betaTesters"
};
/**
 * @export
 */
exports.BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: "P7D",
    P30D: "P30D",
    P90D: "P90D",
    P365D: "P365D"
};
/**
 * @export
 */
exports.BetaGroupsBetaTestersGetToManyRelatedFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BetaGroupsBuildsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionSortEnum = {
    CreatedDate: "createdDate",
    CreatedDate: "-createdDate",
    Name: "name",
    Name: "-name",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkEnabled: "-publicLinkEnabled",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimit: "-publicLinkLimit"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionIncludeEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BetaGroupsGetCollectionFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BetaGroupsGetInstanceFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.BetaGroupsGetInstanceIncludeEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds"
};
/**
 * @export
 */
exports.BetaGroupsGetInstanceFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BetaGroupsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BetaGroupsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
