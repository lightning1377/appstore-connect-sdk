"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildsGetInstanceFieldsBetaBuildLocalizationsEnum = exports.BuildsGetInstanceFieldsAppStoreVersionsEnum = exports.BuildsGetInstanceFieldsBetaTestersEnum = exports.BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum = exports.BuildsGetInstanceFieldsBuildBetaDetailsEnum = exports.BuildsGetInstanceFieldsBuildIconsEnum = exports.BuildsGetInstanceFieldsDiagnosticSignaturesEnum = exports.BuildsGetInstanceIncludeEnum = exports.BuildsGetInstanceFieldsBuildsEnum = exports.BuildsGetCollectionFieldsPerfPowerMetricsEnum = exports.BuildsGetCollectionFieldsAppsEnum = exports.BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum = exports.BuildsGetCollectionFieldsPreReleaseVersionsEnum = exports.BuildsGetCollectionFieldsBetaBuildLocalizationsEnum = exports.BuildsGetCollectionFieldsAppStoreVersionsEnum = exports.BuildsGetCollectionFieldsBetaTestersEnum = exports.BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum = exports.BuildsGetCollectionFieldsBuildBetaDetailsEnum = exports.BuildsGetCollectionFieldsBuildIconsEnum = exports.BuildsGetCollectionFieldsDiagnosticSignaturesEnum = exports.BuildsGetCollectionIncludeEnum = exports.BuildsGetCollectionFieldsBuildsEnum = exports.BuildsGetCollectionSortEnum = exports.BuildsGetCollectionFilterProcessingStateEnum = exports.BuildsGetCollectionFilterPreReleaseVersionPlatformEnum = exports.BuildsGetCollectionFilterBuildAudienceTypeEnum = exports.BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum = exports.BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum = exports.BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum = exports.BuildsBuildBetaDetailGetToOneRelatedIncludeEnum = exports.BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum = exports.BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum = exports.BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = exports.BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = exports.BuildsAppStoreVersionGetToOneRelatedIncludeEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = exports.BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = exports.BuildsAppGetToOneRelatedFieldsAppsEnum = exports.BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = exports.BuildsApi = void 0;
exports.BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum = exports.BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = exports.BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = exports.BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum = exports.BuildsIconsGetToManyRelatedFieldsBuildIconsEnum = exports.BuildsGetInstanceFieldsPerfPowerMetricsEnum = exports.BuildsGetInstanceFieldsAppsEnum = exports.BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum = exports.BuildsGetInstanceFieldsPreReleaseVersionsEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class BuildsApi extends runtime.BaseAPI {
    /**
     */
    buildsAppEncryptionDeclarationGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppEncryptionDeclarationWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsAppEncryptionDeclarationGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsAppEncryptionDeclarationGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsAppEncryptionDeclarationGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationGetToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildAppEncryptionDeclarationLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsAppEncryptionDeclarationGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsAppEncryptionDeclarationGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsAppEncryptionDeclarationUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsAppEncryptionDeclarationUpdateToOneRelationship.");
            }
            if (requestParameters.buildAppEncryptionDeclarationLinkageRequest === null || requestParameters.buildAppEncryptionDeclarationLinkageRequest === undefined) {
                throw new runtime.RequiredError("buildAppEncryptionDeclarationLinkageRequest", "Required parameter requestParameters.buildAppEncryptionDeclarationLinkageRequest was null or undefined when calling buildsAppEncryptionDeclarationUpdateToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/appEncryptionDeclaration`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildAppEncryptionDeclarationLinkageRequestToJSON)(requestParameters.buildAppEncryptionDeclarationLinkageRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    buildsAppEncryptionDeclarationUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildsAppEncryptionDeclarationUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    buildsAppGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsAppGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsAppGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsAppGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsAppStoreVersionGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters["fields[appStoreReviewDetails]"] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters["fields[appStoreVersionLocalizations]"] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionSubmissions) {
                queryParameters["fields[appStoreVersionSubmissions]"] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionPackages) {
                queryParameters["fields[alternativeDistributionPackages]"] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters["fields[routingAppCoverages]"] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters["fields[appStoreVersionPhasedReleases]"] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
                queryParameters["limit[appStoreVersionLocalizations]"] = requestParameters.limitAppStoreVersionLocalizations;
            }
            if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
                queryParameters["limit[appStoreVersionExperiments]"] = requestParameters.limitAppStoreVersionExperiments;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/appStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsAppStoreVersionGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsBetaAppReviewSubmissionGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaAppReviewSubmissionGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaAppReviewSubmissions) {
                queryParameters["fields[betaAppReviewSubmissions]"] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/betaAppReviewSubmission`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaAppReviewSubmissionWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsBetaAppReviewSubmissionGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsBetaAppReviewSubmissionGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsBetaBuildLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/betaBuildLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildLocalizationsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsBetaBuildLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsBetaBuildLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/metrics/betaBuildUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsBetaBuildUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsBetaGroupsCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaGroupsCreateToManyRelationship.");
            }
            if (requestParameters.buildBetaGroupsLinkagesRequest === null || requestParameters.buildBetaGroupsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("buildBetaGroupsLinkagesRequest", "Required parameter requestParameters.buildBetaGroupsLinkagesRequest was null or undefined when calling buildsBetaGroupsCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildBetaGroupsLinkagesRequestToJSON)(requestParameters.buildBetaGroupsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    buildsBetaGroupsCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildsBetaGroupsCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    buildsBetaGroupsDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaGroupsDeleteToManyRelationship.");
            }
            if (requestParameters.buildBetaGroupsLinkagesRequest === null || requestParameters.buildBetaGroupsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("buildBetaGroupsLinkagesRequest", "Required parameter requestParameters.buildBetaGroupsLinkagesRequest was null or undefined when calling buildsBetaGroupsDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/betaGroups`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildBetaGroupsLinkagesRequestToJSON)(requestParameters.buildBetaGroupsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    buildsBetaGroupsDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildsBetaGroupsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    buildsBuildBetaDetailGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBuildBetaDetailGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuildBetaDetails) {
                queryParameters["fields[buildBetaDetails]"] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/buildBetaDetail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildBetaDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsBuildBetaDetailGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsBuildBetaDetailGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsDiagnosticSignaturesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsDiagnosticSignaturesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterDiagnosticType) {
                queryParameters["filter[diagnosticType]"] = requestParameters.filterDiagnosticType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsDiagnosticSignatures) {
                queryParameters["fields[diagnosticSignatures]"] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/diagnosticSignatures`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DiagnosticSignaturesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsDiagnosticSignaturesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsDiagnosticSignaturesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterBetaAppReviewSubmissionBetaReviewState) {
                queryParameters["filter[betaAppReviewSubmission.betaReviewState]"] = requestParameters.filterBetaAppReviewSubmissionBetaReviewState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBuildAudienceType) {
                queryParameters["filter[buildAudienceType]"] = requestParameters.filterBuildAudienceType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterExpired) {
                queryParameters["filter[expired]"] = requestParameters.filterExpired.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersionPlatform) {
                queryParameters["filter[preReleaseVersion.platform]"] = requestParameters.filterPreReleaseVersionPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersionVersion) {
                queryParameters["filter[preReleaseVersion.version]"] = requestParameters.filterPreReleaseVersionVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterProcessingState) {
                queryParameters["filter[processingState]"] = requestParameters.filterProcessingState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterUsesNonExemptEncryption) {
                queryParameters["filter[usesNonExemptEncryption]"] = requestParameters.filterUsesNonExemptEncryption.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterVersion) {
                queryParameters["filter[version]"] = requestParameters.filterVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterApp) {
                queryParameters["filter[app]"] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppStoreVersion) {
                queryParameters["filter[appStoreVersion]"] = requestParameters.filterAppStoreVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaGroups) {
                queryParameters["filter[betaGroups]"] = requestParameters.filterBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersion) {
                queryParameters["filter[preReleaseVersion]"] = requestParameters.filterPreReleaseVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsDiagnosticSignatures) {
                queryParameters["fields[diagnosticSignatures]"] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildIcons) {
                queryParameters["fields[buildIcons]"] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildBetaDetails) {
                queryParameters["fields[buildBetaDetails]"] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppReviewSubmissions) {
                queryParameters["fields[betaAppReviewSubmissions]"] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPerfPowerMetrics) {
                queryParameters["fields[perfPowerMetrics]"] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitBetaBuildLocalizations !== undefined) {
                queryParameters["limit[betaBuildLocalizations]"] = requestParameters.limitBetaBuildLocalizations;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitBuildBundles !== undefined) {
                queryParameters["limit[buildBundles]"] = requestParameters.limitBuildBundles;
            }
            if (requestParameters.limitIcons !== undefined) {
                queryParameters["limit[icons]"] = requestParameters.limitIcons;
            }
            if (requestParameters.limitIndividualTesters !== undefined) {
                queryParameters["limit[individualTesters]"] = requestParameters.limitIndividualTesters;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.buildsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsDiagnosticSignatures) {
                queryParameters["fields[diagnosticSignatures]"] = requestParameters.fieldsDiagnosticSignatures.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildIcons) {
                queryParameters["fields[buildIcons]"] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildBetaDetails) {
                queryParameters["fields[buildBetaDetails]"] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppReviewSubmissions) {
                queryParameters["fields[betaAppReviewSubmissions]"] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPerfPowerMetrics) {
                queryParameters["fields[perfPowerMetrics]"] = requestParameters.fieldsPerfPowerMetrics.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitBetaBuildLocalizations !== undefined) {
                queryParameters["limit[betaBuildLocalizations]"] = requestParameters.limitBetaBuildLocalizations;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitBuildBundles !== undefined) {
                queryParameters["limit[buildBundles]"] = requestParameters.limitBuildBundles;
            }
            if (requestParameters.limitIcons !== undefined) {
                queryParameters["limit[icons]"] = requestParameters.limitIcons;
            }
            if (requestParameters.limitIndividualTesters !== undefined) {
                queryParameters["limit[individualTesters]"] = requestParameters.limitIndividualTesters;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsIconsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsIconsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBuildIcons) {
                queryParameters["fields[buildIcons]"] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/icons`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildIconsWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsIconsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsIconsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsIndividualTestersCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersCreateToManyRelationship.");
            }
            if (requestParameters.buildIndividualTestersLinkagesRequest === null || requestParameters.buildIndividualTestersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("buildIndividualTestersLinkagesRequest", "Required parameter requestParameters.buildIndividualTestersLinkagesRequest was null or undefined when calling buildsIndividualTestersCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildIndividualTestersLinkagesRequestToJSON)(requestParameters.buildIndividualTestersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    buildsIndividualTestersCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildsIndividualTestersCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    buildsIndividualTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersDeleteToManyRelationship.");
            }
            if (requestParameters.buildIndividualTestersLinkagesRequest === null || requestParameters.buildIndividualTestersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("buildIndividualTestersLinkagesRequest", "Required parameter requestParameters.buildIndividualTestersLinkagesRequest was null or undefined when calling buildsIndividualTestersDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildIndividualTestersLinkagesRequestToJSON)(requestParameters.buildIndividualTestersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    buildsIndividualTestersDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.buildsIndividualTestersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    buildsIndividualTestersGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaTestersWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsIndividualTestersGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsIndividualTestersGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsIndividualTestersGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsIndividualTestersGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/relationships/individualTesters`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildIndividualTestersLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsIndividualTestersGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsIndividualTestersGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsPerfPowerMetricsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterDeviceType) {
                queryParameters["filter[deviceType]"] = requestParameters.filterDeviceType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterMetricType) {
                queryParameters["filter[metricType]"] = requestParameters.filterMetricType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPlatform) {
                queryParameters["filter[platform]"] = requestParameters.filterPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/perfPowerMetrics`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.XcodeMetricsFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsPerfPowerMetricsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsPerfPowerMetricsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsPreReleaseVersionGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsPreReleaseVersionGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/preReleaseVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PrereleaseVersionWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsPreReleaseVersionGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsPreReleaseVersionGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsUpdateInstance.");
            }
            if (requestParameters.buildUpdateRequest === null || requestParameters.buildUpdateRequest === undefined) {
                throw new runtime.RequiredError("buildUpdateRequest", "Required parameter requestParameters.buildUpdateRequest was null or undefined when calling buildsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.BuildUpdateRequestToJSON)(requestParameters.buildUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BuildsApi = BuildsApi;
/**
 * @export
 */
exports.BuildsAppEncryptionDeclarationGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.BuildsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion",
    Description: "description",
    Keywords: "keywords",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PromotionalText: "promotionalText",
    SupportUrl: "supportUrl",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: "appStoreVersion",
    Versions: "versions"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: "appStoreVersion",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: "appStoreVersion",
    CurrentDayNumber: "currentDayNumber",
    PhasedReleaseState: "phasedReleaseState",
    StartDate: "startDate",
    TotalPauseDuration: "totalPauseDuration"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsAppStoreVersionGetToOneRelatedIncludeEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    Build: "build",
    RoutingAppCoverage: "routingAppCoverage"
};
/**
 * @export
 */
exports.BuildsBetaAppReviewSubmissionGetToOneRelatedFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: "betaReviewState",
    Build: "build",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.BuildsBetaBuildLocalizationsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BuildsBuildBetaDetailGetToOneRelatedFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: "autoNotifyEnabled",
    Build: "build",
    ExternalBuildState: "externalBuildState",
    InternalBuildState: "internalBuildState"
};
/**
 * @export
 */
exports.BuildsBuildBetaDetailGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsBuildBetaDetailGetToOneRelatedIncludeEnum = {
    Build: "build"
};
/**
 * @export
 */
exports.BuildsDiagnosticSignaturesGetToManyRelatedFilterDiagnosticTypeEnum = {
    DiskWrites: "DISK_WRITES",
    Hangs: "HANGS",
    Launches: "LAUNCHES"
};
/**
 * @export
 */
exports.BuildsDiagnosticSignaturesGetToManyRelatedFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: "diagnosticType",
    Insight: "insight",
    Logs: "logs",
    Signature: "signature",
    Weight: "weight"
};
/**
 * @export
 */
exports.BuildsGetCollectionFilterBetaAppReviewSubmissionBetaReviewStateEnum = {
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Rejected: "REJECTED",
    Approved: "APPROVED"
};
/**
 * @export
 */
exports.BuildsGetCollectionFilterBuildAudienceTypeEnum = {
    InternalOnly: "INTERNAL_ONLY",
    AppStoreEligible: "APP_STORE_ELIGIBLE"
};
/**
 * @export
 */
exports.BuildsGetCollectionFilterPreReleaseVersionPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.BuildsGetCollectionFilterProcessingStateEnum = {
    Processing: "PROCESSING",
    Failed: "FAILED",
    Invalid: "INVALID",
    Valid: "VALID"
};
/**
 * @export
 */
exports.BuildsGetCollectionSortEnum = {
    PreReleaseVersion: "preReleaseVersion",
    PreReleaseVersion: "-preReleaseVersion",
    UploadedDate: "uploadedDate",
    UploadedDate: "-uploadedDate",
    Version: "version",
    Version: "-version"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsGetCollectionIncludeEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    PreReleaseVersion: "preReleaseVersion"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: "diagnosticType",
    Insight: "insight",
    Logs: "logs",
    Signature: "signature",
    Weight: "weight"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBuildIconsEnum = {
    IconAsset: "iconAsset",
    IconType: "iconType",
    Name: "name"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: "autoNotifyEnabled",
    Build: "build",
    ExternalBuildState: "externalBuildState",
    InternalBuildState: "internalBuildState"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: "betaReviewState",
    Build: "build",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BuildsGetCollectionFieldsPerfPowerMetricsEnum = {
    DeviceType: "deviceType",
    MetricType: "metricType",
    Platform: "platform"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsGetInstanceIncludeEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    PreReleaseVersion: "preReleaseVersion"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsDiagnosticSignaturesEnum = {
    DiagnosticType: "diagnosticType",
    Insight: "insight",
    Logs: "logs",
    Signature: "signature",
    Weight: "weight"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBuildIconsEnum = {
    IconAsset: "iconAsset",
    IconType: "iconType",
    Name: "name"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: "autoNotifyEnabled",
    Build: "build",
    ExternalBuildState: "externalBuildState",
    InternalBuildState: "internalBuildState"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: "betaReviewState",
    Build: "build",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.BuildsGetInstanceFieldsPerfPowerMetricsEnum = {
    DeviceType: "deviceType",
    MetricType: "metricType",
    Platform: "platform"
};
/**
 * @export
 */
exports.BuildsIconsGetToManyRelatedFieldsBuildIconsEnum = {
    IconAsset: "iconAsset",
    IconType: "iconType",
    Name: "name"
};
/**
 * @export
 */
exports.BuildsIndividualTestersGetToManyRelatedFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.BuildsPerfPowerMetricsGetToManyRelatedFilterMetricTypeEnum = {
    Disk: "DISK",
    Hang: "HANG",
    Battery: "BATTERY",
    Launch: "LAUNCH",
    Memory: "MEMORY",
    Animation: "ANIMATION",
    Termination: "TERMINATION"
};
/**
 * @export
 */
exports.BuildsPerfPowerMetricsGetToManyRelatedFilterPlatformEnum = {
    Ios: "IOS"
};
/**
 * @export
 */
exports.BuildsPreReleaseVersionGetToOneRelatedFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
