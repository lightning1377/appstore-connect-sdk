"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiBuildRunsGetInstanceFieldsBuildsEnum = exports.CiBuildRunsGetInstanceFieldsCiBuildActionsEnum = exports.CiBuildRunsGetInstanceIncludeEnum = exports.CiBuildRunsGetInstanceFieldsCiBuildRunsEnum = exports.CiBuildRunsBuildsGetToManyRelatedIncludeEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaGroupsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsPreReleaseVersionsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaTestersEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildBetaDetailsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaAppReviewSubmissionsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildIconsEnum = exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildBundlesEnum = exports.CiBuildRunsBuildsGetToManyRelatedSortEnum = exports.CiBuildRunsBuildsGetToManyRelatedFilterProcessingStateEnum = exports.CiBuildRunsBuildsGetToManyRelatedFilterPreReleaseVersionPlatformEnum = exports.CiBuildRunsBuildsGetToManyRelatedFilterBuildAudienceTypeEnum = exports.CiBuildRunsBuildsGetToManyRelatedFilterBetaAppReviewSubmissionBetaReviewStateEnum = exports.CiBuildRunsActionsGetToManyRelatedIncludeEnum = exports.CiBuildRunsActionsGetToManyRelatedFieldsCiBuildActionsEnum = exports.CiBuildRunsActionsGetToManyRelatedFieldsCiBuildRunsEnum = exports.CiBuildRunsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class CiBuildRunsApi extends runtime.BaseAPI {
    /**
     */
    ciBuildRunsActionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciBuildRunsActionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildActions) {
                queryParameters["fields[ciBuildActions]"] = requestParameters.fieldsCiBuildActions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciBuildRuns/{id}/actions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiBuildActionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciBuildRunsActionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciBuildRunsActionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciBuildRunsBuildsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciBuildRunsBuildsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterBetaAppReviewSubmissionBetaReviewState) {
                queryParameters["filter[betaAppReviewSubmission.betaReviewState]"] = requestParameters.filterBetaAppReviewSubmissionBetaReviewState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBuildAudienceType) {
                queryParameters["filter[buildAudienceType]"] = requestParameters.filterBuildAudienceType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterExpired) {
                queryParameters["filter[expired]"] = requestParameters.filterExpired.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersionPlatform) {
                queryParameters["filter[preReleaseVersion.platform]"] = requestParameters.filterPreReleaseVersionPlatform.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersionVersion) {
                queryParameters["filter[preReleaseVersion.version]"] = requestParameters.filterPreReleaseVersionVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterProcessingState) {
                queryParameters["filter[processingState]"] = requestParameters.filterProcessingState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterUsesNonExemptEncryption) {
                queryParameters["filter[usesNonExemptEncryption]"] = requestParameters.filterUsesNonExemptEncryption.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterVersion) {
                queryParameters["filter[version]"] = requestParameters.filterVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterApp) {
                queryParameters["filter[app]"] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterAppStoreVersion) {
                queryParameters["filter[appStoreVersion]"] = requestParameters.filterAppStoreVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaGroups) {
                queryParameters["filter[betaGroups]"] = requestParameters.filterBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterPreReleaseVersion) {
                queryParameters["filter[preReleaseVersion]"] = requestParameters.filterPreReleaseVersion.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildBundles) {
                queryParameters["fields[buildBundles]"] = requestParameters.fieldsBuildBundles.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildIcons) {
                queryParameters["fields[buildIcons]"] = requestParameters.fieldsBuildIcons.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppReviewSubmissions) {
                queryParameters["fields[betaAppReviewSubmissions]"] = requestParameters.fieldsBetaAppReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuildBetaDetails) {
                queryParameters["fields[buildBetaDetails]"] = requestParameters.fieldsBuildBetaDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaTesters) {
                queryParameters["fields[betaTesters]"] = requestParameters.fieldsBetaTesters.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaBuildLocalizations) {
                queryParameters["fields[betaBuildLocalizations]"] = requestParameters.fieldsBetaBuildLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitIndividualTesters !== undefined) {
                queryParameters["limit[individualTesters]"] = requestParameters.limitIndividualTesters;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitBetaBuildLocalizations !== undefined) {
                queryParameters["limit[betaBuildLocalizations]"] = requestParameters.limitBetaBuildLocalizations;
            }
            if (requestParameters.limitIcons !== undefined) {
                queryParameters["limit[icons]"] = requestParameters.limitIcons;
            }
            if (requestParameters.limitBuildBundles !== undefined) {
                queryParameters["limit[buildBundles]"] = requestParameters.limitBuildBundles;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciBuildRuns/{id}/builds`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BuildsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciBuildRunsBuildsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciBuildRunsBuildsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciBuildRunsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ciBuildRunCreateRequest === null || requestParameters.ciBuildRunCreateRequest === undefined) {
                throw new runtime.RequiredError("ciBuildRunCreateRequest", "Required parameter requestParameters.ciBuildRunCreateRequest was null or undefined when calling ciBuildRunsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciBuildRuns`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CiBuildRunCreateRequestToJSON)(requestParameters.ciBuildRunCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiBuildRunResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciBuildRunsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciBuildRunsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciBuildRunsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciBuildRunsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildActions) {
                queryParameters["fields[ciBuildActions]"] = requestParameters.fieldsCiBuildActions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciBuildRuns/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiBuildRunResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciBuildRunsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciBuildRunsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CiBuildRunsApi = CiBuildRunsApi;
/**
 * @export
 */
exports.CiBuildRunsActionsGetToManyRelatedFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiBuildRunsActionsGetToManyRelatedFieldsCiBuildActionsEnum = {
    ActionType: "actionType",
    Artifacts: "artifacts",
    BuildRun: "buildRun",
    CompletionStatus: "completionStatus",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsRequiredToPass: "isRequiredToPass",
    IssueCounts: "issueCounts",
    Issues: "issues",
    Name: "name",
    StartedDate: "startedDate",
    TestResults: "testResults"
};
/**
 * @export
 */
exports.CiBuildRunsActionsGetToManyRelatedIncludeEnum = {
    BuildRun: "buildRun"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFilterBetaAppReviewSubmissionBetaReviewStateEnum = {
    WaitingForReview: "WAITING_FOR_REVIEW",
    InReview: "IN_REVIEW",
    Rejected: "REJECTED",
    Approved: "APPROVED"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFilterBuildAudienceTypeEnum = {
    InternalOnly: "INTERNAL_ONLY",
    AppStoreEligible: "APP_STORE_ELIGIBLE"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFilterPreReleaseVersionPlatformEnum = {
    Ios: "IOS",
    MacOs: "MAC_OS",
    TvOs: "TV_OS",
    VisionOs: "VISION_OS"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFilterProcessingStateEnum = {
    Processing: "PROCESSING",
    Failed: "FAILED",
    Invalid: "INVALID",
    Valid: "VALID"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedSortEnum = {
    PreReleaseVersion: "preReleaseVersion",
    PreReleaseVersion: "-preReleaseVersion",
    UploadedDate: "uploadedDate",
    UploadedDate: "-uploadedDate",
    Version: "version",
    Version: "-version"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildBundlesEnum = {
    AppClipDomainCacheStatus: "appClipDomainCacheStatus",
    AppClipDomainDebugStatus: "appClipDomainDebugStatus",
    BetaAppClipInvocations: "betaAppClipInvocations",
    BuildBundleFileSizes: "buildBundleFileSizes",
    BundleId: "bundleId",
    BundleType: "bundleType",
    DSymUrl: "dSYMUrl",
    DeviceProtocols: "deviceProtocols",
    Entitlements: "entitlements",
    FileName: "fileName",
    HasOnDemandResources: "hasOnDemandResources",
    HasPrerenderedIcon: "hasPrerenderedIcon",
    HasSirikit: "hasSirikit",
    IncludesSymbols: "includesSymbols",
    IsIosBuildMacAppStoreCompatible: "isIosBuildMacAppStoreCompatible",
    Locales: "locales",
    PlatformBuild: "platformBuild",
    RequiredCapabilities: "requiredCapabilities",
    SdkBuild: "sdkBuild",
    SupportedArchitectures: "supportedArchitectures",
    UsesLocationServices: "usesLocationServices"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildIconsEnum = {
    IconAsset: "iconAsset",
    IconType: "iconType",
    Name: "name"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaAppReviewSubmissionsEnum = {
    BetaReviewState: "betaReviewState",
    Build: "build",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildBetaDetailsEnum = {
    AutoNotifyEnabled: "autoNotifyEnabled",
    Build: "build",
    ExternalBuildState: "externalBuildState",
    InternalBuildState: "internalBuildState"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaTestersEnum = {
    Apps: "apps",
    BetaGroups: "betaGroups",
    Builds: "builds",
    Email: "email",
    FirstName: "firstName",
    InviteType: "inviteType",
    LastName: "lastName",
    State: "state"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaBuildLocalizationsEnum = {
    Build: "build",
    Locale: "locale",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.CiBuildRunsBuildsGetToManyRelatedIncludeEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    PreReleaseVersion: "preReleaseVersion"
};
/**
 * @export
 */
exports.CiBuildRunsGetInstanceFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiBuildRunsGetInstanceIncludeEnum = {
    Builds: "builds",
    DestinationBranch: "destinationBranch",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiBuildRunsGetInstanceFieldsCiBuildActionsEnum = {
    ActionType: "actionType",
    Artifacts: "artifacts",
    BuildRun: "buildRun",
    CompletionStatus: "completionStatus",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsRequiredToPass: "isRequiredToPass",
    IssueCounts: "issueCounts",
    Issues: "issues",
    Name: "name",
    StartedDate: "startedDate",
    TestResults: "testResults"
};
/**
 * @export
 */
exports.CiBuildRunsGetInstanceFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
