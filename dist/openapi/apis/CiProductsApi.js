"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiProductsGetInstanceFieldsAppsEnum = exports.CiProductsGetInstanceFieldsCiWorkflowsEnum = exports.CiProductsGetInstanceFieldsCiBuildRunsEnum = exports.CiProductsGetInstanceIncludeEnum = exports.CiProductsGetInstanceFieldsCiProductsEnum = exports.CiProductsGetCollectionFieldsScmRepositoriesEnum = exports.CiProductsGetCollectionFieldsAppsEnum = exports.CiProductsGetCollectionFieldsCiWorkflowsEnum = exports.CiProductsGetCollectionFieldsCiBuildRunsEnum = exports.CiProductsGetCollectionIncludeEnum = exports.CiProductsGetCollectionFieldsCiProductsEnum = exports.CiProductsGetCollectionFilterProductTypeEnum = exports.CiProductsBuildRunsGetToManyRelatedIncludeEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = exports.CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = exports.CiProductsBuildRunsGetToManyRelatedSortEnum = exports.CiProductsAppGetToOneRelatedIncludeEnum = exports.CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum = exports.CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum = exports.CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = exports.CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = exports.CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum = exports.CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum = exports.CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum = exports.CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppInfosEnum = exports.CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppClipsEnum = exports.CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum = exports.CiProductsAppGetToOneRelatedFieldsBuildsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppEventsEnum = exports.CiProductsAppGetToOneRelatedFieldsAppsEnum = exports.CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum = exports.CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum = exports.CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum = exports.CiProductsAppGetToOneRelatedFieldsCiProductsEnum = exports.CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum = exports.CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum = exports.CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum = exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum = exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = exports.CiProductsApi = void 0;
exports.CiProductsWorkflowsGetToManyRelatedIncludeEnum = exports.CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum = exports.CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum = exports.CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum = exports.CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum = exports.CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum = exports.CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum = exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum = exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = exports.CiProductsGetInstanceFieldsScmRepositoriesEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class CiProductsApi extends runtime.BaseAPI {
    /**
     */
    ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsAdditionalRepositoriesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmGitReferences) {
                queryParameters["fields[scmGitReferences]"] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmProviders) {
                queryParameters["fields[scmProviders]"] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}/additionalRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ScmRepositoriesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsAdditionalRepositoriesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsAdditionalRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsAppGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsAppGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBetaAppReviewDetails) {
                queryParameters["fields[betaAppReviewDetails]"] = requestParameters.fieldsBetaAppReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsReviewSubmissions) {
                queryParameters["fields[reviewSubmissions]"] = requestParameters.fieldsReviewSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaGroups) {
                queryParameters["fields[betaGroups]"] = requestParameters.fieldsBetaGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEvents) {
                queryParameters["fields[appEvents]"] = requestParameters.fieldsAppEvents.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaLicenseAgreements) {
                queryParameters["fields[betaLicenseAgreements]"] = requestParameters.fieldsBetaLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClips) {
                queryParameters["fields[appClips]"] = requestParameters.fieldsAppClips.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBetaAppLocalizations) {
                queryParameters["fields[betaAppLocalizations]"] = requestParameters.fieldsBetaAppLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppInfos) {
                queryParameters["fields[appInfos]"] = requestParameters.fieldsAppInfos.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPreReleaseVersions) {
                queryParameters["fields[preReleaseVersions]"] = requestParameters.fieldsPreReleaseVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGroups) {
                queryParameters["fields[subscriptionGroups]"] = requestParameters.fieldsSubscriptionGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppPreOrders) {
                queryParameters["fields[appPreOrders]"] = requestParameters.fieldsAppPreOrders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterEnabledVersions) {
                queryParameters["fields[gameCenterEnabledVersions]"] = requestParameters.fieldsGameCenterEnabledVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionGracePeriods) {
                queryParameters["fields[subscriptionGracePeriods]"] = requestParameters.fieldsSubscriptionGracePeriods.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsEndUserLicenseAgreements) {
                queryParameters["fields[endUserLicenseAgreements]"] = requestParameters.fieldsEndUserLicenseAgreements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppEncryptionDeclarations) {
                queryParameters["fields[appEncryptionDeclarations]"] = requestParameters.fieldsAppEncryptionDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppCustomProductPages) {
                queryParameters["fields[appCustomProductPages]"] = requestParameters.fieldsAppCustomProductPages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppEncryptionDeclarations !== undefined) {
                queryParameters["limit[appEncryptionDeclarations]"] = requestParameters.limitAppEncryptionDeclarations;
            }
            if (requestParameters.limitBetaGroups !== undefined) {
                queryParameters["limit[betaGroups]"] = requestParameters.limitBetaGroups;
            }
            if (requestParameters.limitAppStoreVersions !== undefined) {
                queryParameters["limit[appStoreVersions]"] = requestParameters.limitAppStoreVersions;
            }
            if (requestParameters.limitPreReleaseVersions !== undefined) {
                queryParameters["limit[preReleaseVersions]"] = requestParameters.limitPreReleaseVersions;
            }
            if (requestParameters.limitBetaAppLocalizations !== undefined) {
                queryParameters["limit[betaAppLocalizations]"] = requestParameters.limitBetaAppLocalizations;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.limitAppInfos !== undefined) {
                queryParameters["limit[appInfos]"] = requestParameters.limitAppInfos;
            }
            if (requestParameters.limitAppClips !== undefined) {
                queryParameters["limit[appClips]"] = requestParameters.limitAppClips;
            }
            if (requestParameters.limitInAppPurchases !== undefined) {
                queryParameters["limit[inAppPurchases]"] = requestParameters.limitInAppPurchases;
            }
            if (requestParameters.limitSubscriptionGroups !== undefined) {
                queryParameters["limit[subscriptionGroups]"] = requestParameters.limitSubscriptionGroups;
            }
            if (requestParameters.limitGameCenterEnabledVersions !== undefined) {
                queryParameters["limit[gameCenterEnabledVersions]"] = requestParameters.limitGameCenterEnabledVersions;
            }
            if (requestParameters.limitAppCustomProductPages !== undefined) {
                queryParameters["limit[appCustomProductPages]"] = requestParameters.limitAppCustomProductPages;
            }
            if (requestParameters.limitInAppPurchasesV2 !== undefined) {
                queryParameters["limit[inAppPurchasesV2]"] = requestParameters.limitInAppPurchasesV2;
            }
            if (requestParameters.limitPromotedPurchases !== undefined) {
                queryParameters["limit[promotedPurchases]"] = requestParameters.limitPromotedPurchases;
            }
            if (requestParameters.limitAppEvents !== undefined) {
                queryParameters["limit[appEvents]"] = requestParameters.limitAppEvents;
            }
            if (requestParameters.limitReviewSubmissions !== undefined) {
                queryParameters["limit[reviewSubmissions]"] = requestParameters.limitReviewSubmissions;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}/app`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsAppGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsAppGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsBuildRunsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterBuilds) {
                queryParameters["filter[builds]"] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmGitReferences) {
                queryParameters["fields[scmGitReferences]"] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmPullRequests) {
                queryParameters["fields[scmPullRequests]"] = requestParameters.fieldsScmPullRequests.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}/buildRuns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiBuildRunsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsBuildRunsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ciProductsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ciProductsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    ciProductsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterProductType) {
                queryParameters["filter[productType]"] = requestParameters.filterProductType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterApp) {
                queryParameters["filter[app]"] = requestParameters.filterApp.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitPrimaryRepositories !== undefined) {
                queryParameters["limit[primaryRepositories]"] = requestParameters.limitPrimaryRepositories;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiProductsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.ciProductsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitPrimaryRepositories !== undefined) {
                queryParameters["limit[primaryRepositories]"] = requestParameters.limitPrimaryRepositories;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiProductResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsPrimaryRepositoriesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmGitReferences) {
                queryParameters["fields[scmGitReferences]"] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmProviders) {
                queryParameters["fields[scmProviders]"] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}/primaryRepositories`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ScmRepositoriesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsPrimaryRepositoriesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsPrimaryRepositoriesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciProductsWorkflowsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciProductsWorkflowsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiXcodeVersions) {
                queryParameters["fields[ciXcodeVersions]"] = requestParameters.fieldsCiXcodeVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiMacOsVersions) {
                queryParameters["fields[ciMacOsVersions]"] = requestParameters.fieldsCiMacOsVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciProducts/{id}/workflows`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiWorkflowsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciProductsWorkflowsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciProductsWorkflowsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CiProductsApi = CiProductsApi;
/**
 * @export
 */
exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: "canonicalName",
    IsDeleted: "isDeleted",
    Kind: "kind",
    Name: "name",
    Repository: "repository"
};
/**
 * @export
 */
exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmProvidersEnum = {
    Repositories: "repositories",
    ScmProviderType: "scmProviderType",
    Url: "url"
};
/**
 * @export
 */
exports.CiProductsAdditionalRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiProductsAdditionalRepositoriesGetToManyRelatedIncludeEnum = {
    DefaultBranch: "defaultBranch",
    ScmProvider: "scmProvider"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsBetaAppReviewDetailsEnum = {
    App: "app",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsReviewSubmissionsEnum = {
    App: "app",
    AppStoreVersionForReview: "appStoreVersionForReview",
    Canceled: "canceled",
    Items: "items",
    LastUpdatedByActor: "lastUpdatedByActor",
    Platform: "platform",
    State: "state",
    Submitted: "submitted",
    SubmittedByActor: "submittedByActor",
    SubmittedDate: "submittedDate"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsBetaGroupsEnum = {
    App: "app",
    BetaTesters: "betaTesters",
    Builds: "builds",
    CreatedDate: "createdDate",
    FeedbackEnabled: "feedbackEnabled",
    HasAccessToAllBuilds: "hasAccessToAllBuilds",
    IosBuildsAvailableForAppleSiliconMac: "iosBuildsAvailableForAppleSiliconMac",
    IsInternalGroup: "isInternalGroup",
    Name: "name",
    PublicLink: "publicLink",
    PublicLinkEnabled: "publicLinkEnabled",
    PublicLinkId: "publicLinkId",
    PublicLinkLimit: "publicLinkLimit",
    PublicLinkLimitEnabled: "publicLinkLimitEnabled"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppEventsEnum = {
    App: "app",
    ArchivedTerritorySchedules: "archivedTerritorySchedules",
    Badge: "badge",
    DeepLink: "deepLink",
    EventState: "eventState",
    Localizations: "localizations",
    PrimaryLocale: "primaryLocale",
    Priority: "priority",
    PurchaseRequirement: "purchaseRequirement",
    Purpose: "purpose",
    ReferenceName: "referenceName",
    TerritorySchedules: "territorySchedules"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsBetaLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppClipsEnum = {
    App: "app",
    AppClipAdvancedExperiences: "appClipAdvancedExperiences",
    AppClipDefaultExperiences: "appClipDefaultExperiences",
    BundleId: "bundleId"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsBetaAppLocalizationsEnum = {
    App: "app",
    Description: "description",
    FeedbackEmail: "feedbackEmail",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PrivacyPolicyUrl: "privacyPolicyUrl",
    TvOsPrivacyPolicy: "tvOsPrivacyPolicy"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppInfosEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    App: "app",
    AppInfoLocalizations: "appInfoLocalizations",
    AppStoreAgeRating: "appStoreAgeRating",
    AppStoreState: "appStoreState",
    BrazilAgeRating: "brazilAgeRating",
    BrazilAgeRatingV2: "brazilAgeRatingV2",
    KidsAgeBand: "kidsAgeBand",
    PrimaryCategory: "primaryCategory",
    PrimarySubcategoryOne: "primarySubcategoryOne",
    PrimarySubcategoryTwo: "primarySubcategoryTwo",
    SecondaryCategory: "secondaryCategory",
    SecondarySubcategoryOne: "secondarySubcategoryOne",
    SecondarySubcategoryTwo: "secondarySubcategoryTwo",
    State: "state"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsPreReleaseVersionsEnum = {
    App: "app",
    Builds: "builds",
    Platform: "platform",
    Version: "version"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Apps: "apps",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    PricePoints: "pricePoints",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReferenceName: "referenceName",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsSubscriptionGroupsEnum = {
    App: "app",
    ReferenceName: "referenceName",
    SubscriptionGroupLocalizations: "subscriptionGroupLocalizations",
    Subscriptions: "subscriptions"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppPreOrdersEnum = {
    App: "app",
    AppReleaseDate: "appReleaseDate",
    PreOrderAvailableDate: "preOrderAvailableDate"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsGameCenterEnabledVersionsEnum = {
    App: "app",
    CompatibleVersions: "compatibleVersions",
    IconAsset: "iconAsset",
    Platform: "platform",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsSubscriptionGracePeriodsEnum = {
    Duration: "duration",
    OptIn: "optIn",
    RenewalType: "renewalType",
    SandboxOptIn: "sandboxOptIn"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsEndUserLicenseAgreementsEnum = {
    AgreementText: "agreementText",
    App: "app",
    Territories: "territories"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppEncryptionDeclarationsEnum = {
    App: "app",
    AppDescription: "appDescription",
    AppEncryptionDeclarationDocument: "appEncryptionDeclarationDocument",
    AppEncryptionDeclarationState: "appEncryptionDeclarationState",
    AvailableOnFrenchStore: "availableOnFrenchStore",
    Builds: "builds",
    CodeValue: "codeValue",
    ContainsProprietaryCryptography: "containsProprietaryCryptography",
    ContainsThirdPartyCryptography: "containsThirdPartyCryptography",
    CreatedDate: "createdDate",
    DocumentName: "documentName",
    DocumentType: "documentType",
    DocumentUrl: "documentUrl",
    Exempt: "exempt",
    Platform: "platform",
    UploadedDate: "uploadedDate",
    UsesEncryption: "usesEncryption"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedFieldsAppCustomProductPagesEnum = {
    App: "app",
    AppCustomProductPageVersions: "appCustomProductPageVersions",
    AppStoreVersionTemplate: "appStoreVersionTemplate",
    CustomProductPageTemplate: "customProductPageTemplate",
    Name: "name",
    Url: "url",
    Visible: "visible"
};
/**
 * @export
 */
exports.CiProductsAppGetToOneRelatedIncludeEnum = {
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    Builds: "builds",
    CiProduct: "ciProduct",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedSortEnum = {
    Number: "number",
    Number: "-number"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: "canonicalName",
    IsDeleted: "isDeleted",
    Kind: "kind",
    Name: "name",
    Repository: "repository"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = {
    DestinationBranchName: "destinationBranchName",
    DestinationRepositoryName: "destinationRepositoryName",
    DestinationRepositoryOwner: "destinationRepositoryOwner",
    IsClosed: "isClosed",
    IsCrossRepository: "isCrossRepository",
    Number: "number",
    Repository: "repository",
    SourceBranchName: "sourceBranchName",
    SourceRepositoryName: "sourceRepositoryName",
    SourceRepositoryOwner: "sourceRepositoryOwner",
    Title: "title",
    WebUrl: "webUrl"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.CiProductsBuildRunsGetToManyRelatedIncludeEnum = {
    Builds: "builds",
    DestinationBranch: "destinationBranch",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFilterProductTypeEnum = {
    App: "APP",
    Framework: "FRAMEWORK"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiProductsGetCollectionIncludeEnum = {
    App: "app",
    BundleId: "bundleId",
    PrimaryRepositories: "primaryRepositories"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.CiProductsGetCollectionFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiProductsGetInstanceFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiProductsGetInstanceIncludeEnum = {
    App: "app",
    BundleId: "bundleId",
    PrimaryRepositories: "primaryRepositories"
};
/**
 * @export
 */
exports.CiProductsGetInstanceFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiProductsGetInstanceFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiProductsGetInstanceFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.CiProductsGetInstanceFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: "canonicalName",
    IsDeleted: "isDeleted",
    Kind: "kind",
    Name: "name",
    Repository: "repository"
};
/**
 * @export
 */
exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmProvidersEnum = {
    Repositories: "repositories",
    ScmProviderType: "scmProviderType",
    Url: "url"
};
/**
 * @export
 */
exports.CiProductsPrimaryRepositoriesGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiProductsPrimaryRepositoriesGetToManyRelatedIncludeEnum = {
    DefaultBranch: "defaultBranch",
    ScmProvider: "scmProvider"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedFieldsCiXcodeVersionsEnum = {
    MacOsVersions: "macOsVersions",
    Name: "name",
    TestDestinations: "testDestinations",
    Version: "version"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedFieldsCiMacOsVersionsEnum = {
    Name: "name",
    Version: "version",
    XcodeVersions: "xcodeVersions"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiProductsWorkflowsGetToManyRelatedIncludeEnum = {
    MacOsVersion: "macOsVersion",
    Product: "product",
    Repository: "repository",
    XcodeVersion: "xcodeVersion"
};
