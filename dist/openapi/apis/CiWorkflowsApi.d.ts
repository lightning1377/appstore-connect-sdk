/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { CiBuildRunsResponse, CiWorkflowCreateRequest, CiWorkflowResponse, CiWorkflowUpdateRequest, ScmRepositoryResponse } from "../models";
export interface CiWorkflowsBuildRunsGetToManyRelatedRequest {
    id: string;
    filterBuilds?: Array<string>;
    sort?: Array<CiWorkflowsBuildRunsGetToManyRelatedSortEnum>;
    fieldsScmGitReferences?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsCiBuildRuns?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum>;
    fieldsCiWorkflows?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum>;
    fieldsScmPullRequests?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum>;
    fieldsCiProducts?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum>;
    fieldsBuilds?: Array<CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum>;
    limit?: number;
    limitBuilds?: number;
    include?: Array<CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum>;
}
export interface CiWorkflowsCreateInstanceRequest {
    ciWorkflowCreateRequest: CiWorkflowCreateRequest;
}
export interface CiWorkflowsDeleteInstanceRequest {
    id: string;
}
export interface CiWorkflowsGetInstanceRequest {
    id: string;
    fieldsCiWorkflows?: Array<CiWorkflowsGetInstanceFieldsCiWorkflowsEnum>;
    include?: Array<CiWorkflowsGetInstanceIncludeEnum>;
    fieldsCiBuildRuns?: Array<CiWorkflowsGetInstanceFieldsCiBuildRunsEnum>;
    fieldsScmRepositories?: Array<CiWorkflowsGetInstanceFieldsScmRepositoriesEnum>;
}
export interface CiWorkflowsRepositoryGetToOneRelatedRequest {
    id: string;
    fieldsScmGitReferences?: Array<CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum>;
    fieldsScmProviders?: Array<CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum>;
    fieldsScmRepositories?: Array<CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum>;
    include?: Array<CiWorkflowsRepositoryGetToOneRelatedIncludeEnum>;
}
export interface CiWorkflowsUpdateInstanceRequest {
    id: string;
    ciWorkflowUpdateRequest: CiWorkflowUpdateRequest;
}
/**
 *
 */
export declare class CiWorkflowsApi extends runtime.BaseAPI {
    /**
     */
    ciWorkflowsBuildRunsGetToManyRelatedRaw(requestParameters: CiWorkflowsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiBuildRunsResponse>>;
    /**
     */
    ciWorkflowsBuildRunsGetToManyRelated(requestParameters: CiWorkflowsBuildRunsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiBuildRunsResponse>;
    /**
     */
    ciWorkflowsCreateInstanceRaw(requestParameters: CiWorkflowsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiWorkflowResponse>>;
    /**
     */
    ciWorkflowsCreateInstance(requestParameters: CiWorkflowsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiWorkflowResponse>;
    /**
     */
    ciWorkflowsDeleteInstanceRaw(requestParameters: CiWorkflowsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    ciWorkflowsDeleteInstance(requestParameters: CiWorkflowsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    ciWorkflowsGetInstanceRaw(requestParameters: CiWorkflowsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiWorkflowResponse>>;
    /**
     */
    ciWorkflowsGetInstance(requestParameters: CiWorkflowsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiWorkflowResponse>;
    /**
     */
    ciWorkflowsRepositoryGetToOneRelatedRaw(requestParameters: CiWorkflowsRepositoryGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoryResponse>>;
    /**
     */
    ciWorkflowsRepositoryGetToOneRelated(requestParameters: CiWorkflowsRepositoryGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoryResponse>;
    /**
     */
    ciWorkflowsUpdateInstanceRaw(requestParameters: CiWorkflowsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CiWorkflowResponse>>;
    /**
     */
    ciWorkflowsUpdateInstance(requestParameters: CiWorkflowsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CiWorkflowResponse>;
}
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedSortEnum: {
    readonly Number: "-number";
};
export type CiWorkflowsBuildRunsGetToManyRelatedSortEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedSortEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedSortEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum: {
    readonly CanonicalName: "canonicalName";
    readonly IsDeleted: "isDeleted";
    readonly Kind: "kind";
    readonly Name: "name";
    readonly Repository: "repository";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum: {
    readonly Actions: "actions";
    readonly BuildRun: "buildRun";
    readonly Builds: "builds";
    readonly CancelReason: "cancelReason";
    readonly Clean: "clean";
    readonly CompletionStatus: "completionStatus";
    readonly CreatedDate: "createdDate";
    readonly DestinationBranch: "destinationBranch";
    readonly DestinationCommit: "destinationCommit";
    readonly ExecutionProgress: "executionProgress";
    readonly FinishedDate: "finishedDate";
    readonly IsPullRequestBuild: "isPullRequestBuild";
    readonly IssueCounts: "issueCounts";
    readonly Number: "number";
    readonly Product: "product";
    readonly PullRequest: "pullRequest";
    readonly SourceBranchOrTag: "sourceBranchOrTag";
    readonly SourceCommit: "sourceCommit";
    readonly StartReason: "startReason";
    readonly StartedDate: "startedDate";
    readonly Workflow: "workflow";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum: {
    readonly Actions: "actions";
    readonly BranchStartCondition: "branchStartCondition";
    readonly BuildRuns: "buildRuns";
    readonly Clean: "clean";
    readonly ContainerFilePath: "containerFilePath";
    readonly Description: "description";
    readonly IsEnabled: "isEnabled";
    readonly IsLockedForEditing: "isLockedForEditing";
    readonly LastModifiedDate: "lastModifiedDate";
    readonly MacOsVersion: "macOsVersion";
    readonly ManualBranchStartCondition: "manualBranchStartCondition";
    readonly ManualPullRequestStartCondition: "manualPullRequestStartCondition";
    readonly ManualTagStartCondition: "manualTagStartCondition";
    readonly Name: "name";
    readonly Product: "product";
    readonly PullRequestStartCondition: "pullRequestStartCondition";
    readonly Repository: "repository";
    readonly ScheduledStartCondition: "scheduledStartCondition";
    readonly TagStartCondition: "tagStartCondition";
    readonly XcodeVersion: "xcodeVersion";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum: {
    readonly DestinationBranchName: "destinationBranchName";
    readonly DestinationRepositoryName: "destinationRepositoryName";
    readonly DestinationRepositoryOwner: "destinationRepositoryOwner";
    readonly IsClosed: "isClosed";
    readonly IsCrossRepository: "isCrossRepository";
    readonly Number: "number";
    readonly Repository: "repository";
    readonly SourceBranchName: "sourceBranchName";
    readonly SourceRepositoryName: "sourceRepositoryName";
    readonly SourceRepositoryOwner: "sourceRepositoryOwner";
    readonly Title: "title";
    readonly WebUrl: "webUrl";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum: {
    readonly AdditionalRepositories: "additionalRepositories";
    readonly App: "app";
    readonly BuildRuns: "buildRuns";
    readonly BundleId: "bundleId";
    readonly CreatedDate: "createdDate";
    readonly Name: "name";
    readonly PrimaryRepositories: "primaryRepositories";
    readonly ProductType: "productType";
    readonly Workflows: "workflows";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum: {
    readonly App: "app";
    readonly AppEncryptionDeclaration: "appEncryptionDeclaration";
    readonly AppStoreVersion: "appStoreVersion";
    readonly BetaAppReviewSubmission: "betaAppReviewSubmission";
    readonly BetaBuildLocalizations: "betaBuildLocalizations";
    readonly BetaGroups: "betaGroups";
    readonly BuildAudienceType: "buildAudienceType";
    readonly BuildBetaDetail: "buildBetaDetail";
    readonly BuildBundles: "buildBundles";
    readonly ComputedMinMacOsVersion: "computedMinMacOsVersion";
    readonly DiagnosticSignatures: "diagnosticSignatures";
    readonly ExpirationDate: "expirationDate";
    readonly Expired: "expired";
    readonly IconAssetToken: "iconAssetToken";
    readonly Icons: "icons";
    readonly IndividualTesters: "individualTesters";
    readonly LsMinimumSystemVersion: "lsMinimumSystemVersion";
    readonly MinOsVersion: "minOsVersion";
    readonly PerfPowerMetrics: "perfPowerMetrics";
    readonly PreReleaseVersion: "preReleaseVersion";
    readonly ProcessingState: "processingState";
    readonly UploadedDate: "uploadedDate";
    readonly UsesNonExemptEncryption: "usesNonExemptEncryption";
    readonly Version: "version";
};
export type CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum];
/**
 * @export
 */
export declare const CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum: {
    readonly Builds: "builds";
    readonly DestinationBranch: "destinationBranch";
    readonly Product: "product";
    readonly PullRequest: "pullRequest";
    readonly SourceBranchOrTag: "sourceBranchOrTag";
    readonly Workflow: "workflow";
};
export type CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum = (typeof CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum)[keyof typeof CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const CiWorkflowsGetInstanceFieldsCiWorkflowsEnum: {
    readonly Actions: "actions";
    readonly BranchStartCondition: "branchStartCondition";
    readonly BuildRuns: "buildRuns";
    readonly Clean: "clean";
    readonly ContainerFilePath: "containerFilePath";
    readonly Description: "description";
    readonly IsEnabled: "isEnabled";
    readonly IsLockedForEditing: "isLockedForEditing";
    readonly LastModifiedDate: "lastModifiedDate";
    readonly MacOsVersion: "macOsVersion";
    readonly ManualBranchStartCondition: "manualBranchStartCondition";
    readonly ManualPullRequestStartCondition: "manualPullRequestStartCondition";
    readonly ManualTagStartCondition: "manualTagStartCondition";
    readonly Name: "name";
    readonly Product: "product";
    readonly PullRequestStartCondition: "pullRequestStartCondition";
    readonly Repository: "repository";
    readonly ScheduledStartCondition: "scheduledStartCondition";
    readonly TagStartCondition: "tagStartCondition";
    readonly XcodeVersion: "xcodeVersion";
};
export type CiWorkflowsGetInstanceFieldsCiWorkflowsEnum = (typeof CiWorkflowsGetInstanceFieldsCiWorkflowsEnum)[keyof typeof CiWorkflowsGetInstanceFieldsCiWorkflowsEnum];
/**
 * @export
 */
export declare const CiWorkflowsGetInstanceIncludeEnum: {
    readonly MacOsVersion: "macOsVersion";
    readonly Product: "product";
    readonly Repository: "repository";
    readonly XcodeVersion: "xcodeVersion";
};
export type CiWorkflowsGetInstanceIncludeEnum = (typeof CiWorkflowsGetInstanceIncludeEnum)[keyof typeof CiWorkflowsGetInstanceIncludeEnum];
/**
 * @export
 */
export declare const CiWorkflowsGetInstanceFieldsCiBuildRunsEnum: {
    readonly Actions: "actions";
    readonly BuildRun: "buildRun";
    readonly Builds: "builds";
    readonly CancelReason: "cancelReason";
    readonly Clean: "clean";
    readonly CompletionStatus: "completionStatus";
    readonly CreatedDate: "createdDate";
    readonly DestinationBranch: "destinationBranch";
    readonly DestinationCommit: "destinationCommit";
    readonly ExecutionProgress: "executionProgress";
    readonly FinishedDate: "finishedDate";
    readonly IsPullRequestBuild: "isPullRequestBuild";
    readonly IssueCounts: "issueCounts";
    readonly Number: "number";
    readonly Product: "product";
    readonly PullRequest: "pullRequest";
    readonly SourceBranchOrTag: "sourceBranchOrTag";
    readonly SourceCommit: "sourceCommit";
    readonly StartReason: "startReason";
    readonly StartedDate: "startedDate";
    readonly Workflow: "workflow";
};
export type CiWorkflowsGetInstanceFieldsCiBuildRunsEnum = (typeof CiWorkflowsGetInstanceFieldsCiBuildRunsEnum)[keyof typeof CiWorkflowsGetInstanceFieldsCiBuildRunsEnum];
/**
 * @export
 */
export declare const CiWorkflowsGetInstanceFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type CiWorkflowsGetInstanceFieldsScmRepositoriesEnum = (typeof CiWorkflowsGetInstanceFieldsScmRepositoriesEnum)[keyof typeof CiWorkflowsGetInstanceFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum: {
    readonly CanonicalName: "canonicalName";
    readonly IsDeleted: "isDeleted";
    readonly Kind: "kind";
    readonly Name: "name";
    readonly Repository: "repository";
};
export type CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum = (typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum)[keyof typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export declare const CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum: {
    readonly Repositories: "repositories";
    readonly ScmProviderType: "scmProviderType";
    readonly Url: "url";
};
export type CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum = (typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum)[keyof typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum];
/**
 * @export
 */
export declare const CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum = (typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum)[keyof typeof CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const CiWorkflowsRepositoryGetToOneRelatedIncludeEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly ScmProvider: "scmProvider";
};
export type CiWorkflowsRepositoryGetToOneRelatedIncludeEnum = (typeof CiWorkflowsRepositoryGetToOneRelatedIncludeEnum)[keyof typeof CiWorkflowsRepositoryGetToOneRelatedIncludeEnum];
