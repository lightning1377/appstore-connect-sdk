"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiWorkflowsRepositoryGetToOneRelatedIncludeEnum = exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum = exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum = exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum = exports.CiWorkflowsGetInstanceFieldsScmRepositoriesEnum = exports.CiWorkflowsGetInstanceFieldsCiBuildRunsEnum = exports.CiWorkflowsGetInstanceIncludeEnum = exports.CiWorkflowsGetInstanceFieldsCiWorkflowsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = exports.CiWorkflowsBuildRunsGetToManyRelatedSortEnum = exports.CiWorkflowsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class CiWorkflowsApi extends runtime.BaseAPI {
    /**
     */
    ciWorkflowsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciWorkflowsBuildRunsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterBuilds) {
                queryParameters["filter[builds]"] = requestParameters.filterBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmGitReferences) {
                queryParameters["fields[scmGitReferences]"] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmPullRequests) {
                queryParameters["fields[scmPullRequests]"] = requestParameters.fieldsScmPullRequests.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiProducts) {
                queryParameters["fields[ciProducts]"] = requestParameters.fieldsCiProducts.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitBuilds !== undefined) {
                queryParameters["limit[builds]"] = requestParameters.limitBuilds;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows/{id}/buildRuns`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiBuildRunsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciWorkflowsBuildRunsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciWorkflowsBuildRunsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciWorkflowsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.ciWorkflowCreateRequest === null || requestParameters.ciWorkflowCreateRequest === undefined) {
                throw new runtime.RequiredError("ciWorkflowCreateRequest", "Required parameter requestParameters.ciWorkflowCreateRequest was null or undefined when calling ciWorkflowsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CiWorkflowCreateRequestToJSON)(requestParameters.ciWorkflowCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiWorkflowResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciWorkflowsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciWorkflowsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciWorkflowsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciWorkflowsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    ciWorkflowsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ciWorkflowsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    ciWorkflowsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciWorkflowsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCiWorkflows) {
                queryParameters["fields[ciWorkflows]"] = requestParameters.fieldsCiWorkflows.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCiBuildRuns) {
                queryParameters["fields[ciBuildRuns]"] = requestParameters.fieldsCiBuildRuns.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiWorkflowResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciWorkflowsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciWorkflowsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciWorkflowsRepositoryGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciWorkflowsRepositoryGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsScmGitReferences) {
                queryParameters["fields[scmGitReferences]"] = requestParameters.fieldsScmGitReferences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmProviders) {
                queryParameters["fields[scmProviders]"] = requestParameters.fieldsScmProviders.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsScmRepositories) {
                queryParameters["fields[scmRepositories]"] = requestParameters.fieldsScmRepositories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows/{id}/repository`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ScmRepositoryResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciWorkflowsRepositoryGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciWorkflowsRepositoryGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    ciWorkflowsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling ciWorkflowsUpdateInstance.");
            }
            if (requestParameters.ciWorkflowUpdateRequest === null || requestParameters.ciWorkflowUpdateRequest === undefined) {
                throw new runtime.RequiredError("ciWorkflowUpdateRequest", "Required parameter requestParameters.ciWorkflowUpdateRequest was null or undefined when calling ciWorkflowsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/ciWorkflows/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CiWorkflowUpdateRequestToJSON)(requestParameters.ciWorkflowUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CiWorkflowResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    ciWorkflowsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.ciWorkflowsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CiWorkflowsApi = CiWorkflowsApi;
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedSortEnum = {
    Number: "number",
    Number: "-number"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: "canonicalName",
    IsDeleted: "isDeleted",
    Kind: "kind",
    Name: "name",
    Repository: "repository"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsScmPullRequestsEnum = {
    DestinationBranchName: "destinationBranchName",
    DestinationRepositoryName: "destinationRepositoryName",
    DestinationRepositoryOwner: "destinationRepositoryOwner",
    IsClosed: "isClosed",
    IsCrossRepository: "isCrossRepository",
    Number: "number",
    Repository: "repository",
    SourceBranchName: "sourceBranchName",
    SourceRepositoryName: "sourceRepositoryName",
    SourceRepositoryOwner: "sourceRepositoryOwner",
    Title: "title",
    WebUrl: "webUrl"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsCiProductsEnum = {
    AdditionalRepositories: "additionalRepositories",
    App: "app",
    BuildRuns: "buildRuns",
    BundleId: "bundleId",
    CreatedDate: "createdDate",
    Name: "name",
    PrimaryRepositories: "primaryRepositories",
    ProductType: "productType",
    Workflows: "workflows"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.CiWorkflowsBuildRunsGetToManyRelatedIncludeEnum = {
    Builds: "builds",
    DestinationBranch: "destinationBranch",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiWorkflowsGetInstanceFieldsCiWorkflowsEnum = {
    Actions: "actions",
    BranchStartCondition: "branchStartCondition",
    BuildRuns: "buildRuns",
    Clean: "clean",
    ContainerFilePath: "containerFilePath",
    Description: "description",
    IsEnabled: "isEnabled",
    IsLockedForEditing: "isLockedForEditing",
    LastModifiedDate: "lastModifiedDate",
    MacOsVersion: "macOsVersion",
    ManualBranchStartCondition: "manualBranchStartCondition",
    ManualPullRequestStartCondition: "manualPullRequestStartCondition",
    ManualTagStartCondition: "manualTagStartCondition",
    Name: "name",
    Product: "product",
    PullRequestStartCondition: "pullRequestStartCondition",
    Repository: "repository",
    ScheduledStartCondition: "scheduledStartCondition",
    TagStartCondition: "tagStartCondition",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiWorkflowsGetInstanceIncludeEnum = {
    MacOsVersion: "macOsVersion",
    Product: "product",
    Repository: "repository",
    XcodeVersion: "xcodeVersion"
};
/**
 * @export
 */
exports.CiWorkflowsGetInstanceFieldsCiBuildRunsEnum = {
    Actions: "actions",
    BuildRun: "buildRun",
    Builds: "builds",
    CancelReason: "cancelReason",
    Clean: "clean",
    CompletionStatus: "completionStatus",
    CreatedDate: "createdDate",
    DestinationBranch: "destinationBranch",
    DestinationCommit: "destinationCommit",
    ExecutionProgress: "executionProgress",
    FinishedDate: "finishedDate",
    IsPullRequestBuild: "isPullRequestBuild",
    IssueCounts: "issueCounts",
    Number: "number",
    Product: "product",
    PullRequest: "pullRequest",
    SourceBranchOrTag: "sourceBranchOrTag",
    SourceCommit: "sourceCommit",
    StartReason: "startReason",
    StartedDate: "startedDate",
    Workflow: "workflow"
};
/**
 * @export
 */
exports.CiWorkflowsGetInstanceFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmGitReferencesEnum = {
    CanonicalName: "canonicalName",
    IsDeleted: "isDeleted",
    Kind: "kind",
    Name: "name",
    Repository: "repository"
};
/**
 * @export
 */
exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmProvidersEnum = {
    Repositories: "repositories",
    ScmProviderType: "scmProviderType",
    Url: "url"
};
/**
 * @export
 */
exports.CiWorkflowsRepositoryGetToOneRelatedFieldsScmRepositoriesEnum = {
    DefaultBranch: "defaultBranch",
    GitReferences: "gitReferences",
    HttpCloneUrl: "httpCloneUrl",
    LastAccessedDate: "lastAccessedDate",
    OwnerName: "ownerName",
    PullRequests: "pullRequests",
    RepositoryName: "repositoryName",
    ScmProvider: "scmProvider",
    SshCloneUrl: "sshCloneUrl"
};
/**
 * @export
 */
exports.CiWorkflowsRepositoryGetToOneRelatedIncludeEnum = {
    DefaultBranch: "defaultBranch",
    ScmProvider: "scmProvider"
};
