"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum = exports.GameCenterAchievementLocalizationsGetInstanceIncludeEnum = exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterAchievementLocalizationsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterAchievementLocalizationsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterAchievementLocalizationsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterAchievementLocalizationCreateRequest === null || requestParameters.gameCenterAchievementLocalizationCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAchievementLocalizationCreateRequest", "Required parameter requestParameters.gameCenterAchievementLocalizationCreateRequest was null or undefined when calling gameCenterAchievementLocalizationsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAchievementLocalizationCreateRequestToJSON)(requestParameters.gameCenterAchievementLocalizationCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementLocalizationsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterAchievementLocalizationsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementImages) {
                queryParameters["fields[gameCenterAchievementImages]"] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations/{id}/gameCenterAchievementImage`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementImageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementImages) {
                queryParameters["fields[gameCenterAchievementImages]"] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementLocalizationsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementLocalizationsUpdateInstance.");
            }
            if (requestParameters.gameCenterAchievementLocalizationUpdateRequest === null || requestParameters.gameCenterAchievementLocalizationUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAchievementLocalizationUpdateRequest", "Required parameter requestParameters.gameCenterAchievementLocalizationUpdateRequest was null or undefined when calling gameCenterAchievementLocalizationsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievementLocalizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAchievementLocalizationUpdateRequestToJSON)(requestParameters.gameCenterAchievementLocalizationUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementLocalizationResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementLocalizationsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementLocalizationsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterAchievementLocalizationsApi = GameCenterAchievementLocalizationsApi;
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementGetToOneRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    GameCenterAchievementLocalization: "gameCenterAchievementLocalization",
    ImageAsset: "imageAsset",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGameCenterAchievementImageGetToOneRelatedIncludeEnum = {
    GameCenterAchievementLocalization: "gameCenterAchievementLocalization"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGetInstanceIncludeEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    GameCenterAchievementLocalization: "gameCenterAchievementLocalization",
    ImageAsset: "imageAsset",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.GameCenterAchievementLocalizationsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
