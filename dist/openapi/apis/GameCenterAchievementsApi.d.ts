/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { GameCenterAchievementCreateRequest, GameCenterAchievementGroupAchievementLinkageRequest, GameCenterAchievementGroupAchievementLinkageResponse, GameCenterAchievementLocalizationsResponse, GameCenterAchievementReleasesResponse, GameCenterAchievementResponse, GameCenterAchievementUpdateRequest } from "../models";
export interface GameCenterAchievementsCreateInstanceRequest {
    gameCenterAchievementCreateRequest: GameCenterAchievementCreateRequest;
}
export interface GameCenterAchievementsDeleteInstanceRequest {
    id: string;
}
export interface GameCenterAchievementsGetInstanceRequest {
    id: string;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum>;
    include?: Array<GameCenterAchievementsGetInstanceIncludeEnum>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
}
export interface GameCenterAchievementsGroupAchievementGetToOneRelatedRequest {
    id: string;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterGroups?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum>;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum>;
}
export interface GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest {
    id: string;
}
export interface GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest {
    id: string;
    gameCenterAchievementGroupAchievementLinkageRequest: GameCenterAchievementGroupAchievementLinkageRequest;
}
export interface GameCenterAchievementsLocalizationsGetToManyRelatedRequest {
    id: string;
    fieldsGameCenterAchievementImages?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterAchievementsReleasesGetToManyRelatedRequest {
    id: string;
    filterLive?: Array<string>;
    filterGameCenterDetail?: Array<string>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterDetails?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    include?: Array<GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum>;
}
export interface GameCenterAchievementsUpdateInstanceRequest {
    id: string;
    gameCenterAchievementUpdateRequest: GameCenterAchievementUpdateRequest;
}
/**
 *
 */
export declare class GameCenterAchievementsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterAchievementsCreateInstanceRaw(requestParameters: GameCenterAchievementsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>>;
    /**
     */
    gameCenterAchievementsCreateInstance(requestParameters: GameCenterAchievementsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse>;
    /**
     */
    gameCenterAchievementsDeleteInstanceRaw(requestParameters: GameCenterAchievementsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterAchievementsDeleteInstance(requestParameters: GameCenterAchievementsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterAchievementsGetInstanceRaw(requestParameters: GameCenterAchievementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>>;
    /**
     */
    gameCenterAchievementsGetInstance(requestParameters: GameCenterAchievementsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse>;
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelatedRaw(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>>;
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelated(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse>;
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelationshipRaw(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementGroupAchievementLinkageResponse>>;
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelationship(requestParameters: GameCenterAchievementsGroupAchievementGetToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementGroupAchievementLinkageResponse>;
    /**
     */
    gameCenterAchievementsGroupAchievementUpdateToOneRelationshipRaw(requestParameters: GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterAchievementsGroupAchievementUpdateToOneRelationship(requestParameters: GameCenterAchievementsGroupAchievementUpdateToOneRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterAchievementsLocalizationsGetToManyRelatedRaw(requestParameters: GameCenterAchievementsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementLocalizationsResponse>>;
    /**
     */
    gameCenterAchievementsLocalizationsGetToManyRelated(requestParameters: GameCenterAchievementsLocalizationsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementLocalizationsResponse>;
    /**
     */
    gameCenterAchievementsReleasesGetToManyRelatedRaw(requestParameters: GameCenterAchievementsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementReleasesResponse>>;
    /**
     */
    gameCenterAchievementsReleasesGetToManyRelated(requestParameters: GameCenterAchievementsReleasesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementReleasesResponse>;
    /**
     */
    gameCenterAchievementsUpdateInstanceRaw(requestParameters: GameCenterAchievementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementResponse>>;
    /**
     */
    gameCenterAchievementsUpdateInstance(requestParameters: GameCenterAchievementsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementResponse>;
}
/**
 * @export
 */
export declare const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum = (typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGetInstanceIncludeEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Releases: "releases";
};
export type GameCenterAchievementsGetInstanceIncludeEnum = (typeof GameCenterAchievementsGetInstanceIncludeEnum)[keyof typeof GameCenterAchievementsGetInstanceIncludeEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly Live: "live";
};
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum = (typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum)[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum: {
    readonly AfterEarnedDescription: "afterEarnedDescription";
    readonly BeforeEarnedDescription: "beforeEarnedDescription";
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterAchievementImage: "gameCenterAchievementImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = (typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum)[keyof typeof GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly Live: "live";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum: {
    readonly AfterEarnedDescription: "afterEarnedDescription";
    readonly BeforeEarnedDescription: "beforeEarnedDescription";
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterAchievementImage: "gameCenterAchievementImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Releases: "releases";
};
export type GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum = (typeof GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum)[keyof typeof GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum: {
    readonly AssetDeliveryState: "assetDeliveryState";
    readonly FileName: "fileName";
    readonly FileSize: "fileSize";
    readonly GameCenterAchievementLocalization: "gameCenterAchievementLocalization";
    readonly ImageAsset: "imageAsset";
    readonly UploadOperations: "uploadOperations";
    readonly Uploaded: "uploaded";
};
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum = (typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum)[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum: {
    readonly AfterEarnedDescription: "afterEarnedDescription";
    readonly BeforeEarnedDescription: "beforeEarnedDescription";
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterAchievementImage: "gameCenterAchievementImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = (typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum)[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum = (typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterAchievementImage: "gameCenterAchievementImage";
};
export type GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum = (typeof GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum)[keyof typeof GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly Live: "live";
};
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = (typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum)[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = (typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
};
export type GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum = (typeof GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum)[keyof typeof GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum];
