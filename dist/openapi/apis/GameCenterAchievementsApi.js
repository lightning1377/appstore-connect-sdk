"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum = exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum = exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum = exports.GameCenterAchievementsGetInstanceIncludeEnum = exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum = exports.GameCenterAchievementsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterAchievementsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterAchievementsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterAchievementCreateRequest === null || requestParameters.gameCenterAchievementCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAchievementCreateRequest", "Required parameter requestParameters.gameCenterAchievementCreateRequest was null or undefined when calling gameCenterAchievementsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAchievementCreateRequestToJSON)(requestParameters.gameCenterAchievementCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterAchievementsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterAchievementsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterAchievementsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsGroupAchievementGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementGetToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}/relationships/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementGroupAchievementLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsGroupAchievementGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship.");
            }
            if (requestParameters.gameCenterAchievementGroupAchievementLinkageRequest === null || requestParameters.gameCenterAchievementGroupAchievementLinkageRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAchievementGroupAchievementLinkageRequest", "Required parameter requestParameters.gameCenterAchievementGroupAchievementLinkageRequest was null or undefined when calling gameCenterAchievementsGroupAchievementUpdateToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}/relationships/groupAchievement`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAchievementGroupAchievementLinkageRequestToJSON)(requestParameters.gameCenterAchievementGroupAchievementLinkageRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterAchievementsGroupAchievementUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterAchievementsGroupAchievementUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterAchievementsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAchievementImages) {
                queryParameters["fields[gameCenterAchievementImages]"] = requestParameters.fieldsGameCenterAchievementImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsReleasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsReleasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLive) {
                queryParameters["filter[live]"] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterDetail) {
                queryParameters["filter[gameCenterDetail]"] = requestParameters.filterGameCenterDetail.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}/releases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementReleasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsReleasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAchievementsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAchievementsUpdateInstance.");
            }
            if (requestParameters.gameCenterAchievementUpdateRequest === null || requestParameters.gameCenterAchievementUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAchievementUpdateRequest", "Required parameter requestParameters.gameCenterAchievementUpdateRequest was null or undefined when calling gameCenterAchievementsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAchievements/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAchievementUpdateRequestToJSON)(requestParameters.gameCenterAchievementUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAchievementsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAchievementsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterAchievementsApi = GameCenterAchievementsApi;
/**
 * @export
 */
exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterAchievementsGetInstanceIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterAchievementsGetInstanceFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterAchievementsGroupAchievementGetToOneRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementImagesEnum = {
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    GameCenterAchievementLocalization: "gameCenterAchievementLocalization",
    ImageAsset: "imageAsset",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterAchievementsLocalizationsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterAchievementsLocalizationsGetToManyRelatedIncludeEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage"
};
/**
 * @export
 */
exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterAchievementsReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterAchievementsReleasesGetToManyRelatedIncludeEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail"
};
