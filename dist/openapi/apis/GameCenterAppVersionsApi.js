"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum = exports.GameCenterAppVersionsGetInstanceIncludeEnum = exports.GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum = exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum = exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = exports.GameCenterAppVersionsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterAppVersionsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterAppVersionsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsAppStoreVersionGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsAgeRatingDeclarations) {
                queryParameters["fields[ageRatingDeclarations]"] = requestParameters.fieldsAgeRatingDeclarations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreReviewDetails) {
                queryParameters["fields[appStoreReviewDetails]"] = requestParameters.fieldsAppStoreReviewDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionLocalizations) {
                queryParameters["fields[appStoreVersionLocalizations]"] = requestParameters.fieldsAppStoreVersionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionExperiments) {
                queryParameters["fields[appStoreVersionExperiments]"] = requestParameters.fieldsAppStoreVersionExperiments.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionSubmissions) {
                queryParameters["fields[appStoreVersionSubmissions]"] = requestParameters.fieldsAppStoreVersionSubmissions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAlternativeDistributionPackages) {
                queryParameters["fields[alternativeDistributionPackages]"] = requestParameters.fieldsAlternativeDistributionPackages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsRoutingAppCoverages) {
                queryParameters["fields[routingAppCoverages]"] = requestParameters.fieldsRoutingAppCoverages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppClipDefaultExperiences) {
                queryParameters["fields[appClipDefaultExperiences]"] = requestParameters.fieldsAppClipDefaultExperiences.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersionPhasedReleases) {
                queryParameters["fields[appStoreVersionPhasedReleases]"] = requestParameters.fieldsAppStoreVersionPhasedReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBuilds) {
                queryParameters["fields[builds]"] = requestParameters.fieldsBuilds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAppStoreVersionLocalizations !== undefined) {
                queryParameters["limit[appStoreVersionLocalizations]"] = requestParameters.limitAppStoreVersionLocalizations;
            }
            if (requestParameters.limitAppStoreVersionExperiments !== undefined) {
                queryParameters["limit[appStoreVersionExperiments]"] = requestParameters.limitAppStoreVersionExperiments;
            }
            if (requestParameters.limitAppStoreVersionExperimentsV2 !== undefined) {
                queryParameters["limit[appStoreVersionExperimentsV2]"] = requestParameters.limitAppStoreVersionExperimentsV2;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}/appStoreVersion`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppStoreVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsAppStoreVersionGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsAppStoreVersionGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship.");
            }
            if (requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === null || requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAppVersionCompatibilityVersionsLinkagesRequest", "Required parameter requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAppVersionCompatibilityVersionsLinkagesRequestToJSON)(requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterAppVersionsCompatibilityVersionsCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship.");
            }
            if (requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === null || requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAppVersionCompatibilityVersionsLinkagesRequest", "Required parameter requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAppVersionCompatibilityVersionsLinkagesRequestToJSON)(requestParameters.gameCenterAppVersionCompatibilityVersionsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterAppVersionsCompatibilityVersionsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterEnabled) {
                queryParameters["filter[enabled]"] = requestParameters.filterEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitCompatibilityVersions !== undefined) {
                queryParameters["limit[compatibilityVersions]"] = requestParameters.limitCompatibilityVersions;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsCompatibilityVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}/relationships/compatibilityVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionCompatibilityVersionsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsCompatibilityVersionsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsCompatibilityVersionsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAppVersionsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterAppVersionCreateRequest === null || requestParameters.gameCenterAppVersionCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAppVersionCreateRequest", "Required parameter requestParameters.gameCenterAppVersionCreateRequest was null or undefined when calling gameCenterAppVersionsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAppVersionCreateRequestToJSON)(requestParameters.gameCenterAppVersionCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAppVersionsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitCompatibilityVersions !== undefined) {
                queryParameters["limit[compatibilityVersions]"] = requestParameters.limitCompatibilityVersions;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterAppVersionsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterAppVersionsUpdateInstance.");
            }
            if (requestParameters.gameCenterAppVersionUpdateRequest === null || requestParameters.gameCenterAppVersionUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterAppVersionUpdateRequest", "Required parameter requestParameters.gameCenterAppVersionUpdateRequest was null or undefined when calling gameCenterAppVersionsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterAppVersions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterAppVersionUpdateRequestToJSON)(requestParameters.gameCenterAppVersionUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterAppVersionsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterAppVersionsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterAppVersionsApi = GameCenterAppVersionsApi;
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAgeRatingDeclarationsEnum = {
    AgeRatingOverride: "ageRatingOverride",
    AlcoholTobaccoOrDrugUseOrReferences: "alcoholTobaccoOrDrugUseOrReferences",
    Contests: "contests",
    Gambling: "gambling",
    GamblingAndContests: "gamblingAndContests",
    GamblingSimulated: "gamblingSimulated",
    HorrorOrFearThemes: "horrorOrFearThemes",
    KidsAgeBand: "kidsAgeBand",
    MatureOrSuggestiveThemes: "matureOrSuggestiveThemes",
    MedicalOrTreatmentInformation: "medicalOrTreatmentInformation",
    ProfanityOrCrudeHumor: "profanityOrCrudeHumor",
    SeventeenPlus: "seventeenPlus",
    SexualContentGraphicAndNudity: "sexualContentGraphicAndNudity",
    SexualContentOrNudity: "sexualContentOrNudity",
    UnrestrictedWebAccess: "unrestrictedWebAccess",
    ViolenceCartoonOrFantasy: "violenceCartoonOrFantasy",
    ViolenceRealistic: "violenceRealistic",
    ViolenceRealisticProlongedGraphicOrSadistic: "violenceRealisticProlongedGraphicOrSadistic"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreReviewDetailsEnum = {
    AppStoreReviewAttachments: "appStoreReviewAttachments",
    AppStoreVersion: "appStoreVersion",
    ContactEmail: "contactEmail",
    ContactFirstName: "contactFirstName",
    ContactLastName: "contactLastName",
    ContactPhone: "contactPhone",
    DemoAccountName: "demoAccountName",
    DemoAccountPassword: "demoAccountPassword",
    DemoAccountRequired: "demoAccountRequired",
    Notes: "notes"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionLocalizationsEnum = {
    AppPreviewSets: "appPreviewSets",
    AppScreenshotSets: "appScreenshotSets",
    AppStoreVersion: "appStoreVersion",
    Description: "description",
    Keywords: "keywords",
    Locale: "locale",
    MarketingUrl: "marketingUrl",
    PromotionalText: "promotionalText",
    SupportUrl: "supportUrl",
    WhatsNew: "whatsNew"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionExperimentsEnum = {
    App: "app",
    AppStoreVersion: "appStoreVersion",
    AppStoreVersionExperimentTreatments: "appStoreVersionExperimentTreatments",
    ControlVersions: "controlVersions",
    EndDate: "endDate",
    LatestControlVersion: "latestControlVersion",
    Name: "name",
    Platform: "platform",
    ReviewRequired: "reviewRequired",
    StartDate: "startDate",
    Started: "started",
    State: "state",
    TrafficProportion: "trafficProportion"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionSubmissionsEnum = {
    AppStoreVersion: "appStoreVersion"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAlternativeDistributionPackagesEnum = {
    AppStoreVersion: "appStoreVersion",
    Versions: "versions"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsRoutingAppCoveragesEnum = {
    AppStoreVersion: "appStoreVersion",
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    SourceFileChecksum: "sourceFileChecksum",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppClipDefaultExperiencesEnum = {
    Action: "action",
    AppClip: "appClip",
    AppClipAppStoreReviewDetail: "appClipAppStoreReviewDetail",
    AppClipDefaultExperienceLocalizations: "appClipDefaultExperienceLocalizations",
    AppClipDefaultExperienceTemplate: "appClipDefaultExperienceTemplate",
    ReleaseWithAppStoreVersion: "releaseWithAppStoreVersion"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsAppStoreVersionPhasedReleasesEnum = {
    AppStoreVersion: "appStoreVersion",
    CurrentDayNumber: "currentDayNumber",
    PhasedReleaseState: "phasedReleaseState",
    StartDate: "startDate",
    TotalPauseDuration: "totalPauseDuration"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedFieldsBuildsEnum = {
    App: "app",
    AppEncryptionDeclaration: "appEncryptionDeclaration",
    AppStoreVersion: "appStoreVersion",
    BetaAppReviewSubmission: "betaAppReviewSubmission",
    BetaBuildLocalizations: "betaBuildLocalizations",
    BetaGroups: "betaGroups",
    BuildAudienceType: "buildAudienceType",
    BuildBetaDetail: "buildBetaDetail",
    BuildBundles: "buildBundles",
    ComputedMinMacOsVersion: "computedMinMacOsVersion",
    DiagnosticSignatures: "diagnosticSignatures",
    ExpirationDate: "expirationDate",
    Expired: "expired",
    IconAssetToken: "iconAssetToken",
    Icons: "icons",
    IndividualTesters: "individualTesters",
    LsMinimumSystemVersion: "lsMinimumSystemVersion",
    MinOsVersion: "minOsVersion",
    PerfPowerMetrics: "perfPowerMetrics",
    PreReleaseVersion: "preReleaseVersion",
    ProcessingState: "processingState",
    UploadedDate: "uploadedDate",
    UsesNonExemptEncryption: "usesNonExemptEncryption",
    Version: "version"
};
/**
 * @export
 */
exports.GameCenterAppVersionsAppStoreVersionGetToOneRelatedIncludeEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    Build: "build",
    RoutingAppCoverage: "routingAppCoverage"
};
/**
 * @export
 */
exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.GameCenterAppVersionsCompatibilityVersionsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions"
};
/**
 * @export
 */
exports.GameCenterAppVersionsGetInstanceFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.GameCenterAppVersionsGetInstanceIncludeEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions"
};
/**
 * @export
 */
exports.GameCenterAppVersionsGetInstanceFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
