"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum = exports.GameCenterDetailsGetInstanceIncludeEnum = exports.GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum = exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum = exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = exports.GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum = exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterDetailsApi = void 0;
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum = exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum = exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterDetailsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterDetailsAchievementReleasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsAchievementReleasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLive) {
                queryParameters["filter[live]"] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterAchievement) {
                queryParameters["filter[gameCenterAchievement]"] = requestParameters.filterGameCenterAchievement.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/achievementReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementReleasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsAchievementReleasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsAchievementReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterDetailCreateRequest === null || requestParameters.gameCenterDetailCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterDetailCreateRequest", "Required parameter requestParameters.gameCenterDetailCreateRequest was null or undefined when calling gameCenterDetailsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterDetailCreateRequestToJSON)(requestParameters.gameCenterDetailCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterArchived) {
                queryParameters["filter[archived]"] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailGameCenterAchievementsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterDetailGameCenterAchievementsLinkagesRequest", "Required parameter requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterDetailGameCenterAchievementsLinkagesRequestToJSON)(requestParameters.gameCenterDetailGameCenterAchievementsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAppVersionsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterAppVersionsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterEnabled) {
                queryParameters["filter[enabled]"] = requestParameters.filterEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsAppStoreVersions) {
                queryParameters["fields[appStoreVersions]"] = requestParameters.fieldsAppStoreVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitCompatibilityVersions !== undefined) {
                queryParameters["limit[compatibilityVersions]"] = requestParameters.limitCompatibilityVersions;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/gameCenterAppVersions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAppVersionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterAppVersionsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterAppVersionsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterGroupGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterGroupGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitGameCenterDetails !== undefined) {
                queryParameters["limit[gameCenterDetails]"] = requestParameters.limitGameCenterDetails;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/gameCenterGroup`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterGroupGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterGroupGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
                queryParameters["fields[gameCenterLeaderboardSetLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailGameCenterLeaderboardSetsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest", "Required parameter requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterDetailGameCenterLeaderboardSetsLinkagesRequestToJSON)(requestParameters.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterArchived) {
                queryParameters["filter[archived]"] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
                queryParameters["fields[gameCenterLeaderboardLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailGameCenterLeaderboardsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterDetailGameCenterLeaderboardsLinkagesRequest", "Required parameter requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterDetailGameCenterLeaderboardsLinkagesRequestToJSON)(requestParameters.gameCenterDetailGameCenterLeaderboardsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterDetailsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAchievementReleases !== undefined) {
                queryParameters["limit[achievementReleases]"] = requestParameters.limitAchievementReleases;
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.limitGameCenterAppVersions !== undefined) {
                queryParameters["limit[gameCenterAppVersions]"] = requestParameters.limitGameCenterAppVersions;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitLeaderboardReleases !== undefined) {
                queryParameters["limit[leaderboardReleases]"] = requestParameters.limitLeaderboardReleases;
            }
            if (requestParameters.limitLeaderboardSetReleases !== undefined) {
                queryParameters["limit[leaderboardSetReleases]"] = requestParameters.limitLeaderboardSetReleases;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsLeaderboardReleasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsLeaderboardReleasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLive) {
                queryParameters["filter[live]"] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterLeaderboard) {
                queryParameters["filter[gameCenterLeaderboard]"] = requestParameters.filterGameCenterLeaderboard.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/leaderboardReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardReleasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsLeaderboardReleasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsLeaderboardReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsLeaderboardSetReleasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLive) {
                queryParameters["filter[live]"] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterLeaderboardSet) {
                queryParameters["filter[gameCenterLeaderboardSet]"] = requestParameters.filterGameCenterLeaderboardSet.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/leaderboardSetReleases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetReleasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsLeaderboardSetReleasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsUpdateInstance.");
            }
            if (requestParameters.gameCenterDetailUpdateRequest === null || requestParameters.gameCenterDetailUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterDetailUpdateRequest", "Required parameter requestParameters.gameCenterDetailUpdateRequest was null or undefined when calling gameCenterDetailsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterDetailUpdateRequestToJSON)(requestParameters.gameCenterDetailUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterDetailsApi = GameCenterDetailsApi;
/**
 * @export
 */
exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsAchievementReleasesGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsAchievementReleasesGetToManyRelatedIncludeEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAchievementsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsAppStoreVersionsEnum = {
    AgeRatingDeclaration: "ageRatingDeclaration",
    AlternativeDistributionPackage: "alternativeDistributionPackage",
    App: "app",
    AppClipDefaultExperience: "appClipDefaultExperience",
    AppStoreReviewDetail: "appStoreReviewDetail",
    AppStoreState: "appStoreState",
    AppStoreVersionExperiments: "appStoreVersionExperiments",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersionLocalizations: "appStoreVersionLocalizations",
    AppStoreVersionPhasedRelease: "appStoreVersionPhasedRelease",
    AppStoreVersionSubmission: "appStoreVersionSubmission",
    AppVersionState: "appVersionState",
    Build: "build",
    Copyright: "copyright",
    CreatedDate: "createdDate",
    CustomerReviews: "customerReviews",
    Downloadable: "downloadable",
    EarliestReleaseDate: "earliestReleaseDate",
    Platform: "platform",
    ReleaseType: "releaseType",
    ReviewType: "reviewType",
    RoutingAppCoverage: "routingAppCoverage",
    VersionString: "versionString"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedIncludeEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterGroupGetToOneRelatedIncludeEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    FormatterOverride: "formatterOverride",
    FormatterSuffix: "formatterSuffix",
    FormatterSuffixSingular: "formatterSuffixSingular",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    GameCenterLeaderboardImage: "gameCenterLeaderboardImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceIncludeEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.GameCenterDetailsGetInstanceFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
