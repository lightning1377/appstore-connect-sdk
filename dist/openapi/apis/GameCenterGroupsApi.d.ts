/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { GameCenterAchievementsResponse, GameCenterDetailsResponse, GameCenterGroupCreateRequest, GameCenterGroupGameCenterAchievementsLinkagesRequest, GameCenterGroupGameCenterAchievementsLinkagesResponse, GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest, GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse, GameCenterGroupGameCenterLeaderboardsLinkagesRequest, GameCenterGroupGameCenterLeaderboardsLinkagesResponse, GameCenterGroupResponse, GameCenterGroupUpdateRequest, GameCenterGroupsResponse, GameCenterLeaderboardSetsResponse, GameCenterLeaderboardsResponse } from "../models";
export interface GameCenterGroupsCreateInstanceRequest {
    gameCenterGroupCreateRequest: GameCenterGroupCreateRequest;
}
export interface GameCenterGroupsDeleteInstanceRequest {
    id: string;
}
export interface GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest {
    id: string;
    filterArchived?: Array<string>;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterAchievementLocalizations?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    limit?: number;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterAchievementsLinkagesRequest: GameCenterGroupGameCenterAchievementsLinkagesRequest;
}
export interface GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest {
    id: string;
    filterGameCenterAppVersionsEnabled?: Array<string>;
    fieldsGameCenterAchievementReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterAppVersions?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum>;
    fieldsApps?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    limit?: number;
    limitGameCenterAppVersions?: number;
    limitGameCenterLeaderboards?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterAchievements?: number;
    limitAchievementReleases?: number;
    limitLeaderboardReleases?: number;
    limitLeaderboardSetReleases?: number;
    include?: Array<GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest {
    id: string;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboardSetLocalizations?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum>;
    fieldsGameCenterLeaderboardSetReleases?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    limit?: number;
    limitLocalizations?: number;
    limitGameCenterLeaderboards?: number;
    limitReleases?: number;
    include?: Array<GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest: GameCenterGroupGameCenterLeaderboardSetsLinkagesRequest;
}
export interface GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest {
    id: string;
    filterArchived?: Array<string>;
    filterReferenceName?: Array<string>;
    filterId?: Array<string>;
    fieldsGameCenterLeaderboardLocalizations?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterLeaderboardReleases?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum>;
    limit?: number;
    limitGameCenterLeaderboardSets?: number;
    limitLocalizations?: number;
    limitReleases?: number;
    include?: Array<GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum>;
}
export interface GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest {
    id: string;
    limit?: number;
}
export interface GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
    id: string;
    gameCenterGroupGameCenterLeaderboardsLinkagesRequest: GameCenterGroupGameCenterLeaderboardsLinkagesRequest;
}
export interface GameCenterGroupsGetCollectionRequest {
    filterGameCenterDetails?: Array<string>;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum>;
    limit?: number;
    include?: Array<GameCenterGroupsGetCollectionIncludeEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum>;
    limitGameCenterAchievements?: number;
    limitGameCenterDetails?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterLeaderboards?: number;
}
export interface GameCenterGroupsGetInstanceRequest {
    id: string;
    fieldsGameCenterGroups?: Array<GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum>;
    include?: Array<GameCenterGroupsGetInstanceIncludeEnum>;
    fieldsGameCenterLeaderboardSets?: Array<GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum>;
    fieldsGameCenterDetails?: Array<GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum>;
    fieldsGameCenterLeaderboards?: Array<GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum>;
    fieldsGameCenterAchievements?: Array<GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum>;
    limitGameCenterAchievements?: number;
    limitGameCenterDetails?: number;
    limitGameCenterLeaderboardSets?: number;
    limitGameCenterLeaderboards?: number;
}
export interface GameCenterGroupsUpdateInstanceRequest {
    id: string;
    gameCenterGroupUpdateRequest: GameCenterGroupUpdateRequest;
}
/**
 *
 */
export declare class GameCenterGroupsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterGroupsCreateInstanceRaw(requestParameters: GameCenterGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>>;
    /**
     */
    gameCenterGroupsCreateInstance(requestParameters: GameCenterGroupsCreateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse>;
    /**
     */
    gameCenterGroupsDeleteInstanceRaw(requestParameters: GameCenterGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterGroupsDeleteInstance(requestParameters: GameCenterGroupsDeleteInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterAchievementsResponse>>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterAchievementsResponse>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterAchievementsLinkagesResponse>>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterAchievementsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterAchievementsLinkagesResponse>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterDetailsResponse>>;
    /**
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterDetailsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterDetailsResponse>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardSetsResponse>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardSetsResponse>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterLeaderboardSetsLinkagesResponse>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterLeaderboardsResponse>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterLeaderboardsResponse>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupGameCenterLeaderboardsLinkagesResponse>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters: GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters: GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     */
    gameCenterGroupsGetCollectionRaw(requestParameters: GameCenterGroupsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupsResponse>>;
    /**
     */
    gameCenterGroupsGetCollection(requestParameters?: GameCenterGroupsGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupsResponse>;
    /**
     */
    gameCenterGroupsGetInstanceRaw(requestParameters: GameCenterGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>>;
    /**
     */
    gameCenterGroupsGetInstance(requestParameters: GameCenterGroupsGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse>;
    /**
     */
    gameCenterGroupsUpdateInstanceRaw(requestParameters: GameCenterGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GameCenterGroupResponse>>;
    /**
     */
    gameCenterGroupsUpdateInstance(requestParameters: GameCenterGroupsUpdateInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GameCenterGroupResponse>;
}
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum: {
    readonly AfterEarnedDescription: "afterEarnedDescription";
    readonly BeforeEarnedDescription: "beforeEarnedDescription";
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterAchievementImage: "gameCenterAchievementImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Releases: "releases";
};
export type GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum = (typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum)[keyof typeof GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum: {
    readonly GameCenterAchievement: "gameCenterAchievement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterLeaderboardSet: "gameCenterLeaderboardSet";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum: {
    readonly Archived: "archived";
    readonly DefaultFormatter: "defaultFormatter";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly RecurrenceDuration: "recurrenceDuration";
    readonly RecurrenceRule: "recurrenceRule";
    readonly RecurrenceStartDate: "recurrenceStartDate";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly ScoreRangeEnd: "scoreRangeEnd";
    readonly ScoreRangeStart: "scoreRangeStart";
    readonly ScoreSortType: "scoreSortType";
    readonly SubmissionType: "submissionType";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum: {
    readonly AppStoreVersion: "appStoreVersion";
    readonly CompatibilityVersions: "compatibilityVersions";
    readonly Enabled: "enabled";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum: {
    readonly AlternativeDistributionKey: "alternativeDistributionKey";
    readonly AnalyticsReportRequests: "analyticsReportRequests";
    readonly AppAvailability: "appAvailability";
    readonly AppClips: "appClips";
    readonly AppCustomProductPages: "appCustomProductPages";
    readonly AppEncryptionDeclarations: "appEncryptionDeclarations";
    readonly AppEvents: "appEvents";
    readonly AppInfos: "appInfos";
    readonly AppPricePoints: "appPricePoints";
    readonly AppPriceSchedule: "appPriceSchedule";
    readonly AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2";
    readonly AppStoreVersions: "appStoreVersions";
    readonly BetaAppLocalizations: "betaAppLocalizations";
    readonly BetaAppReviewDetail: "betaAppReviewDetail";
    readonly BetaGroups: "betaGroups";
    readonly BetaLicenseAgreement: "betaLicenseAgreement";
    readonly BetaTesters: "betaTesters";
    readonly Builds: "builds";
    readonly BundleId: "bundleId";
    readonly CiProduct: "ciProduct";
    readonly ContentRightsDeclaration: "contentRightsDeclaration";
    readonly CustomerReviews: "customerReviews";
    readonly EndUserLicenseAgreement: "endUserLicenseAgreement";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterEnabledVersions: "gameCenterEnabledVersions";
    readonly InAppPurchases: "inAppPurchases";
    readonly InAppPurchasesV2: "inAppPurchasesV2";
    readonly IsOrEverWasMadeForKids: "isOrEverWasMadeForKids";
    readonly MarketplaceSearchDetail: "marketplaceSearchDetail";
    readonly Name: "name";
    readonly PerfPowerMetrics: "perfPowerMetrics";
    readonly PreOrder: "preOrder";
    readonly PreReleaseVersions: "preReleaseVersions";
    readonly PrimaryLocale: "primaryLocale";
    readonly PromotedPurchases: "promotedPurchases";
    readonly ReviewSubmissions: "reviewSubmissions";
    readonly Sku: "sku";
    readonly SubscriptionGracePeriod: "subscriptionGracePeriod";
    readonly SubscriptionGroups: "subscriptionGroups";
    readonly SubscriptionStatusUrl: "subscriptionStatusUrl";
    readonly SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox";
    readonly SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion";
    readonly SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterLeaderboard: "gameCenterLeaderboard";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum = (typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum)[keyof typeof GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum: {
    readonly GameCenterLeaderboardSet: "gameCenterLeaderboardSet";
    readonly GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterLeaderboardSet: "gameCenterLeaderboardSet";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum: {
    readonly Archived: "archived";
    readonly DefaultFormatter: "defaultFormatter";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly RecurrenceDuration: "recurrenceDuration";
    readonly RecurrenceRule: "recurrenceRule";
    readonly RecurrenceStartDate: "recurrenceStartDate";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly ScoreRangeEnd: "scoreRangeEnd";
    readonly ScoreRangeStart: "scoreRangeStart";
    readonly ScoreSortType: "scoreSortType";
    readonly SubmissionType: "submissionType";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly Releases: "releases";
};
export type GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = (typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum: {
    readonly FormatterOverride: "formatterOverride";
    readonly FormatterSuffix: "formatterSuffix";
    readonly FormatterSuffixSingular: "formatterSuffixSingular";
    readonly GameCenterLeaderboard: "gameCenterLeaderboard";
    readonly GameCenterLeaderboardImage: "gameCenterLeaderboardImage";
    readonly Locale: "locale";
    readonly Name: "name";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum: {
    readonly Archived: "archived";
    readonly DefaultFormatter: "defaultFormatter";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly RecurrenceDuration: "recurrenceDuration";
    readonly RecurrenceRule: "recurrenceRule";
    readonly RecurrenceStartDate: "recurrenceStartDate";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly ScoreRangeEnd: "scoreRangeEnd";
    readonly ScoreRangeStart: "scoreRangeStart";
    readonly ScoreSortType: "scoreSortType";
    readonly SubmissionType: "submissionType";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterLeaderboard: "gameCenterLeaderboard";
    readonly Live: "live";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly Releases: "releases";
};
export type GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = (typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum)[keyof typeof GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionIncludeEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
};
export type GameCenterGroupsGetCollectionIncludeEnum = (typeof GameCenterGroupsGetCollectionIncludeEnum)[keyof typeof GameCenterGroupsGetCollectionIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum = (typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum)[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum: {
    readonly Archived: "archived";
    readonly DefaultFormatter: "defaultFormatter";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly RecurrenceDuration: "recurrenceDuration";
    readonly RecurrenceRule: "recurrenceRule";
    readonly RecurrenceStartDate: "recurrenceStartDate";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly ScoreRangeEnd: "scoreRangeEnd";
    readonly ScoreRangeStart: "scoreRangeStart";
    readonly ScoreSortType: "scoreSortType";
    readonly SubmissionType: "submissionType";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum = (typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum)[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum = (typeof GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly ReferenceName: "referenceName";
};
export type GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum = (typeof GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum)[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceIncludeEnum: {
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterDetails: "gameCenterDetails";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
};
export type GameCenterGroupsGetInstanceIncludeEnum = (typeof GameCenterGroupsGetInstanceIncludeEnum)[keyof typeof GameCenterGroupsGetInstanceIncludeEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum: {
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly GroupLeaderboardSet: "groupLeaderboardSet";
    readonly Localizations: "localizations";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum = (typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum)[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum: {
    readonly AchievementReleases: "achievementReleases";
    readonly App: "app";
    readonly ArcadeEnabled: "arcadeEnabled";
    readonly ChallengeEnabled: "challengeEnabled";
    readonly DefaultGroupLeaderboard: "defaultGroupLeaderboard";
    readonly DefaultLeaderboard: "defaultLeaderboard";
    readonly GameCenterAchievements: "gameCenterAchievements";
    readonly GameCenterAppVersions: "gameCenterAppVersions";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GameCenterLeaderboards: "gameCenterLeaderboards";
    readonly LeaderboardReleases: "leaderboardReleases";
    readonly LeaderboardSetReleases: "leaderboardSetReleases";
};
export type GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum = (typeof GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum)[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum: {
    readonly Archived: "archived";
    readonly DefaultFormatter: "defaultFormatter";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GameCenterLeaderboardSets: "gameCenterLeaderboardSets";
    readonly GroupLeaderboard: "groupLeaderboard";
    readonly Localizations: "localizations";
    readonly RecurrenceDuration: "recurrenceDuration";
    readonly RecurrenceRule: "recurrenceRule";
    readonly RecurrenceStartDate: "recurrenceStartDate";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly ScoreRangeEnd: "scoreRangeEnd";
    readonly ScoreRangeStart: "scoreRangeStart";
    readonly ScoreSortType: "scoreSortType";
    readonly SubmissionType: "submissionType";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum = (typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum)[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum];
/**
 * @export
 */
export declare const GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum: {
    readonly Archived: "archived";
    readonly GameCenterDetail: "gameCenterDetail";
    readonly GameCenterGroup: "gameCenterGroup";
    readonly GroupAchievement: "groupAchievement";
    readonly Localizations: "localizations";
    readonly Points: "points";
    readonly ReferenceName: "referenceName";
    readonly Releases: "releases";
    readonly Repeatable: "repeatable";
    readonly ShowBeforeEarned: "showBeforeEarned";
    readonly VendorIdentifier: "vendorIdentifier";
};
export type GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum = (typeof GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum)[keyof typeof GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum];
