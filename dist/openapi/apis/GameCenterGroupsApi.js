"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum = exports.GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum = exports.GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterGroupsGetInstanceIncludeEnum = exports.GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum = exports.GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum = exports.GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterGroupsGetCollectionIncludeEnum = exports.GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = exports.GameCenterGroupsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterGroupsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterGroupsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterGroupCreateRequest === null || requestParameters.gameCenterGroupCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterGroupCreateRequest", "Required parameter requestParameters.gameCenterGroupCreateRequest was null or undefined when calling gameCenterGroupsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterGroupCreateRequestToJSON)(requestParameters.gameCenterGroupCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterGroupsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterGroupsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterArchived) {
                queryParameters["filter[archived]"] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementLocalizations) {
                queryParameters["fields[gameCenterAchievementLocalizations]"] = requestParameters.fieldsGameCenterAchievementLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterAchievementsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterAchievementsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupGameCenterAchievementsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterAchievementsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterGroupGameCenterAchievementsLinkagesRequest", "Required parameter requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterAchievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterGroupGameCenterAchievementsLinkagesRequestToJSON)(requestParameters.gameCenterGroupGameCenterAchievementsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterGroupsGameCenterAchievementsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterDetailsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterGameCenterAppVersionsEnabled) {
                queryParameters["filter[gameCenterAppVersions.enabled]"] = requestParameters.filterGameCenterAppVersionsEnabled.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievementReleases) {
                queryParameters["fields[gameCenterAchievementReleases]"] = requestParameters.fieldsGameCenterAchievementReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAppVersions) {
                queryParameters["fields[gameCenterAppVersions]"] = requestParameters.fieldsGameCenterAppVersions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsApps) {
                queryParameters["fields[apps]"] = requestParameters.fieldsApps.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitGameCenterAppVersions !== undefined) {
                queryParameters["limit[gameCenterAppVersions]"] = requestParameters.limitGameCenterAppVersions;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.limitAchievementReleases !== undefined) {
                queryParameters["limit[achievementReleases]"] = requestParameters.limitAchievementReleases;
            }
            if (requestParameters.limitLeaderboardReleases !== undefined) {
                queryParameters["limit[leaderboardReleases]"] = requestParameters.limitLeaderboardReleases;
            }
            if (requestParameters.limitLeaderboardSetReleases !== undefined) {
                queryParameters["limit[leaderboardSetReleases]"] = requestParameters.limitLeaderboardSetReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/gameCenterDetails`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterDetailsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterDetailsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterDetailsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
                queryParameters["fields[gameCenterLeaderboardSetLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupGameCenterLeaderboardSetsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest", "Required parameter requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboardSets`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterGroupGameCenterLeaderboardSetsLinkagesRequestToJSON)(requestParameters.gameCenterGroupGameCenterLeaderboardSetsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterArchived) {
                queryParameters["filter[archived]"] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
                queryParameters["fields[gameCenterLeaderboardLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupGameCenterLeaderboardsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterGroupGameCenterLeaderboardsLinkagesRequest", "Required parameter requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterGroupGameCenterLeaderboardsLinkagesRequestToJSON)(requestParameters.gameCenterGroupGameCenterLeaderboardsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterGroupsGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterGameCenterDetails) {
                queryParameters["filter[gameCenterDetails]"] = requestParameters.filterGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.limitGameCenterDetails !== undefined) {
                queryParameters["limit[gameCenterDetails]"] = requestParameters.limitGameCenterDetails;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.gameCenterGroupsGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterAchievements) {
                queryParameters["fields[gameCenterAchievements]"] = requestParameters.fieldsGameCenterAchievements.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitGameCenterAchievements !== undefined) {
                queryParameters["limit[gameCenterAchievements]"] = requestParameters.limitGameCenterAchievements;
            }
            if (requestParameters.limitGameCenterDetails !== undefined) {
                queryParameters["limit[gameCenterDetails]"] = requestParameters.limitGameCenterDetails;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterGroupsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterGroupsUpdateInstance.");
            }
            if (requestParameters.gameCenterGroupUpdateRequest === null || requestParameters.gameCenterGroupUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterGroupUpdateRequest", "Required parameter requestParameters.gameCenterGroupUpdateRequest was null or undefined when calling gameCenterGroupsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterGroupUpdateRequestToJSON)(requestParameters.gameCenterGroupUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterGroupResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterGroupsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterGroupsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterGroupsApi = GameCenterGroupsApi;
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementLocalizationsEnum = {
    AfterEarnedDescription: "afterEarnedDescription",
    BeforeEarnedDescription: "beforeEarnedDescription",
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterAchievementImage: "gameCenterAchievementImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterAchievementsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementReleasesEnum = {
    GameCenterAchievement: "gameCenterAchievement",
    GameCenterDetail: "gameCenterDetail",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAppVersionsEnum = {
    AppStoreVersion: "appStoreVersion",
    CompatibilityVersions: "compatibilityVersions",
    Enabled: "enabled"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsAppsEnum = {
    AlternativeDistributionKey: "alternativeDistributionKey",
    AnalyticsReportRequests: "analyticsReportRequests",
    AppAvailability: "appAvailability",
    AppClips: "appClips",
    AppCustomProductPages: "appCustomProductPages",
    AppEncryptionDeclarations: "appEncryptionDeclarations",
    AppEvents: "appEvents",
    AppInfos: "appInfos",
    AppPricePoints: "appPricePoints",
    AppPriceSchedule: "appPriceSchedule",
    AppStoreVersionExperimentsV2: "appStoreVersionExperimentsV2",
    AppStoreVersions: "appStoreVersions",
    BetaAppLocalizations: "betaAppLocalizations",
    BetaAppReviewDetail: "betaAppReviewDetail",
    BetaGroups: "betaGroups",
    BetaLicenseAgreement: "betaLicenseAgreement",
    BetaTesters: "betaTesters",
    Builds: "builds",
    BundleId: "bundleId",
    CiProduct: "ciProduct",
    ContentRightsDeclaration: "contentRightsDeclaration",
    CustomerReviews: "customerReviews",
    EndUserLicenseAgreement: "endUserLicenseAgreement",
    GameCenterDetail: "gameCenterDetail",
    GameCenterEnabledVersions: "gameCenterEnabledVersions",
    InAppPurchases: "inAppPurchases",
    InAppPurchasesV2: "inAppPurchasesV2",
    IsOrEverWasMadeForKids: "isOrEverWasMadeForKids",
    MarketplaceSearchDetail: "marketplaceSearchDetail",
    Name: "name",
    PerfPowerMetrics: "perfPowerMetrics",
    PreOrder: "preOrder",
    PreReleaseVersions: "preReleaseVersions",
    PrimaryLocale: "primaryLocale",
    PromotedPurchases: "promotedPurchases",
    ReviewSubmissions: "reviewSubmissions",
    Sku: "sku",
    SubscriptionGracePeriod: "subscriptionGracePeriod",
    SubscriptionGroups: "subscriptionGroups",
    SubscriptionStatusUrl: "subscriptionStatusUrl",
    SubscriptionStatusUrlForSandbox: "subscriptionStatusUrlForSandbox",
    SubscriptionStatusUrlVersion: "subscriptionStatusUrlVersion",
    SubscriptionStatusUrlVersionForSandbox: "subscriptionStatusUrlVersionForSandbox"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterDetailsGetToManyRelatedIncludeEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    FormatterOverride: "formatterOverride",
    FormatterSuffix: "formatterSuffix",
    FormatterSuffixSingular: "formatterSuffixSingular",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    GameCenterLeaderboardImage: "gameCenterLeaderboardImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterGroupsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionIncludeEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGetCollectionFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceIncludeEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterGroupsGetInstanceFieldsGameCenterAchievementsEnum = {
    Archived: "archived",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GroupAchievement: "groupAchievement",
    Localizations: "localizations",
    Points: "points",
    ReferenceName: "referenceName",
    Releases: "releases",
    Repeatable: "repeatable",
    ShowBeforeEarned: "showBeforeEarned",
    VendorIdentifier: "vendorIdentifier"
};
