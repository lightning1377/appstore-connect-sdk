"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum = exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum = exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum = exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum = exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = exports.GameCenterLeaderboardSetsGetInstanceIncludeEnum = exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = exports.GameCenterLeaderboardSetsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class GameCenterLeaderboardSetsApi extends runtime.BaseAPI {
    /**
     */
    gameCenterLeaderboardSetsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.gameCenterLeaderboardSetCreateRequest === null || requestParameters.gameCenterLeaderboardSetCreateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetCreateRequest", "Required parameter requestParameters.gameCenterLeaderboardSetCreateRequest was null or undefined when calling gameCenterLeaderboardSetsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetCreateRequestToJSON)(requestParameters.gameCenterLeaderboardSetCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterLeaderboardSetsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship.");
            }
            if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest", "Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON)(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterLeaderboardSetsGameCenterLeaderboardsCreateToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship.");
            }
            if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest", "Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON)(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterLeaderboardSetsGameCenterLeaderboardsDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterArchived) {
                queryParameters["filter[archived]"] = requestParameters.filterArchived.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterReferenceName) {
                queryParameters["filter[referenceName]"] = requestParameters.filterReferenceName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardLocalizations) {
                queryParameters["fields[gameCenterLeaderboardLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardReleases) {
                queryParameters["fields[gameCenterLeaderboardReleases]"] = requestParameters.fieldsGameCenterLeaderboardReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitGameCenterLeaderboardSets !== undefined) {
                queryParameters["limit[gameCenterLeaderboardSets]"] = requestParameters.limitGameCenterLeaderboardSets;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            if (requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === null || requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest", "Required parameter requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest was null or undefined when calling gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/gameCenterLeaderboards`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequestToJSON)(requestParameters.gameCenterLeaderboardSetGameCenterLeaderboardsLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterLeaderboardSetsGameCenterLeaderboardsReplaceToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
                queryParameters["fields[gameCenterLeaderboardSetLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
                queryParameters["fields[gameCenterLeaderboardSetLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterGroups) {
                queryParameters["fields[gameCenterGroups]"] = requestParameters.fieldsGameCenterGroups.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboards) {
                queryParameters["fields[gameCenterLeaderboards]"] = requestParameters.fieldsGameCenterLeaderboards.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitLocalizations !== undefined) {
                queryParameters["limit[localizations]"] = requestParameters.limitLocalizations;
            }
            if (requestParameters.limitGameCenterLeaderboards !== undefined) {
                queryParameters["limit[gameCenterLeaderboards]"] = requestParameters.limitGameCenterLeaderboards;
            }
            if (requestParameters.limitReleases !== undefined) {
                queryParameters["limit[releases]"] = requestParameters.limitReleases;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetGroupLeaderboardSetLinkageResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship.");
            }
            if (requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === null || requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest", "Required parameter requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest was null or undefined when calling gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/relationships/groupLeaderboardSet`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetGroupLeaderboardSetLinkageRequestToJSON)(requestParameters.gameCenterLeaderboardSetGroupLeaderboardSetLinkageRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.gameCenterLeaderboardSetsGroupLeaderboardSetUpdateToOneRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    gameCenterLeaderboardSetsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsGameCenterLeaderboardSetLocalizations) {
                queryParameters["fields[gameCenterLeaderboardSetLocalizations]"] = requestParameters.fieldsGameCenterLeaderboardSetLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetImages) {
                queryParameters["fields[gameCenterLeaderboardSetImages]"] = requestParameters.fieldsGameCenterLeaderboardSetImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/localizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsReleasesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsReleasesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterLive) {
                queryParameters["filter[live]"] = requestParameters.filterLive.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterDetail) {
                queryParameters["filter[gameCenterDetail]"] = requestParameters.filterGameCenterDetail.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSetReleases) {
                queryParameters["fields[gameCenterLeaderboardSetReleases]"] = requestParameters.fieldsGameCenterLeaderboardSetReleases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterLeaderboardSets) {
                queryParameters["fields[gameCenterLeaderboardSets]"] = requestParameters.fieldsGameCenterLeaderboardSets.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsGameCenterDetails) {
                queryParameters["fields[gameCenterDetails]"] = requestParameters.fieldsGameCenterDetails.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}/releases`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetReleasesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsReleasesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsReleasesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterLeaderboardSetsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterLeaderboardSetsUpdateInstance.");
            }
            if (requestParameters.gameCenterLeaderboardSetUpdateRequest === null || requestParameters.gameCenterLeaderboardSetUpdateRequest === undefined) {
                throw new runtime.RequiredError("gameCenterLeaderboardSetUpdateRequest", "Required parameter requestParameters.gameCenterLeaderboardSetUpdateRequest was null or undefined when calling gameCenterLeaderboardSetsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterLeaderboardSets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GameCenterLeaderboardSetUpdateRequestToJSON)(requestParameters.gameCenterLeaderboardSetUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterLeaderboardSetResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterLeaderboardSetsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterLeaderboardSetsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.GameCenterLeaderboardSetsApi = GameCenterLeaderboardSetsApi;
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardLocalizationsEnum = {
    FormatterOverride: "formatterOverride",
    FormatterSuffix: "formatterSuffix",
    FormatterSuffixSingular: "formatterSuffixSingular",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    GameCenterLeaderboardImage: "gameCenterLeaderboardImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedFieldsGameCenterLeaderboardReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboard: "gameCenterLeaderboard",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGameCenterLeaderboardsGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGetInstanceIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGetInstanceFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterGroupsEnum = {
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterDetails: "gameCenterDetails",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    ReferenceName: "referenceName"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedFieldsGameCenterLeaderboardsEnum = {
    Archived: "archived",
    DefaultFormatter: "defaultFormatter",
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GroupLeaderboard: "groupLeaderboard",
    Localizations: "localizations",
    RecurrenceDuration: "recurrenceDuration",
    RecurrenceRule: "recurrenceRule",
    RecurrenceStartDate: "recurrenceStartDate",
    ReferenceName: "referenceName",
    Releases: "releases",
    ScoreRangeEnd: "scoreRangeEnd",
    ScoreRangeStart: "scoreRangeStart",
    ScoreSortType: "scoreSortType",
    SubmissionType: "submissionType",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsGroupLeaderboardSetGetToOneRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    Releases: "releases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetLocalizationsEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage",
    Locale: "locale",
    Name: "name"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedFieldsGameCenterLeaderboardSetImagesEnum = {
    AssetDeliveryState: "assetDeliveryState",
    FileName: "fileName",
    FileSize: "fileSize",
    GameCenterLeaderboardSetLocalization: "gameCenterLeaderboardSetLocalization",
    ImageAsset: "imageAsset",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsLocalizationsGetToManyRelatedIncludeEnum = {
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    GameCenterLeaderboardSetImage: "gameCenterLeaderboardSetImage"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetReleasesEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet",
    Live: "live"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterLeaderboardSetsEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    GroupLeaderboardSet: "groupLeaderboardSet",
    Localizations: "localizations",
    ReferenceName: "referenceName",
    Releases: "releases",
    VendorIdentifier: "vendorIdentifier"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedFieldsGameCenterDetailsEnum = {
    AchievementReleases: "achievementReleases",
    App: "app",
    ArcadeEnabled: "arcadeEnabled",
    ChallengeEnabled: "challengeEnabled",
    DefaultGroupLeaderboard: "defaultGroupLeaderboard",
    DefaultLeaderboard: "defaultLeaderboard",
    GameCenterAchievements: "gameCenterAchievements",
    GameCenterAppVersions: "gameCenterAppVersions",
    GameCenterGroup: "gameCenterGroup",
    GameCenterLeaderboardSets: "gameCenterLeaderboardSets",
    GameCenterLeaderboards: "gameCenterLeaderboards",
    LeaderboardReleases: "leaderboardReleases",
    LeaderboardSetReleases: "leaderboardSetReleases"
};
/**
 * @export
 */
exports.GameCenterLeaderboardSetsReleasesGetToManyRelatedIncludeEnum = {
    GameCenterDetail: "gameCenterDetail",
    GameCenterLeaderboardSet: "gameCenterLeaderboardSet"
};
