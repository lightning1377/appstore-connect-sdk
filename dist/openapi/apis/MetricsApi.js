"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum = exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum = exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum = exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum = exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum = exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum = exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum = exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum = exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum = exports.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum = exports.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum = exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum = exports.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum = exports.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum = exports.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = exports.BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = exports.BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = exports.BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = exports.AppsBetaTesterUsagesGetMetricsPeriodEnum = exports.AppsBetaTesterUsagesGetMetricsGroupByEnum = exports.MetricsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class MetricsApi extends runtime.BaseAPI {
    /**
     */
    appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling appsBetaTesterUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaTesters !== undefined) {
                queryParameters["filter[betaTesters]"] = requestParameters.filterBetaTesters;
            }
            if (requestParameters.period !== undefined) {
                queryParameters["period"] = requestParameters.period;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/apps/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppsBetaTesterUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    appsBetaTesterUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.appsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaGroupsBetaTesterUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterBetaTesters !== undefined) {
                queryParameters["filter[betaTesters]"] = requestParameters.filterBetaTesters;
            }
            if (requestParameters.period !== undefined) {
                queryParameters["period"] = requestParameters.period;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaGroups/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AppsBetaTesterUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaGroupsBetaTesterUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaGroupsBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.");
            }
            if (requestParameters.filterApps === null || requestParameters.filterApps === undefined) {
                throw new runtime.RequiredError("filterApps", "Required parameter requestParameters.filterApps was null or undefined when calling betaTestersBetaTesterUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.filterApps !== undefined) {
                queryParameters["filter[apps]"] = requestParameters.filterApps;
            }
            if (requestParameters.period !== undefined) {
                queryParameters["period"] = requestParameters.period;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/betaTesters/{id}/metrics/betaTesterUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaTesterUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    betaTestersBetaTesterUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.betaTestersBetaTesterUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling buildsBetaBuildUsagesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/builds/{id}/metrics/betaBuildUsages`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BetaBuildUsagesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    buildsBetaBuildUsagesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.buildsBetaBuildUsagesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsClassicMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsClassicMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsClassicMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingAppRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingQueueSizesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.filterGameCenterDetail !== undefined) {
                queryParameters["filter[gameCenterDetail]"] = requestParameters.filterGameCenterDetail;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingQueueRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingQueueSizesV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.filterGameCenterDetail !== undefined) {
                queryParameters["filter[gameCenterDetail]"] = requestParameters.filterGameCenterDetail;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingQueueRequestsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingSessionsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterResult !== undefined) {
                queryParameters["filter[result]"] = requestParameters.filterResult;
            }
            if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
                queryParameters["filter[gameCenterMatchmakingQueue]"] = requestParameters.filterGameCenterMatchmakingQueue;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingBooleanRuleResultsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
                queryParameters["filter[gameCenterMatchmakingQueue]"] = requestParameters.filterGameCenterMatchmakingQueue;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingNumberRuleResultsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics.");
            }
            if (requestParameters.granularity === null || requestParameters.granularity === undefined) {
                throw new runtime.RequiredError("granularity", "Required parameter requestParameters.granularity was null or undefined when calling gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.granularity !== undefined) {
                queryParameters["granularity"] = requestParameters.granularity;
            }
            if (requestParameters.groupBy) {
                queryParameters["groupBy"] = requestParameters.groupBy.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterGameCenterMatchmakingQueue !== undefined) {
                queryParameters["filter[gameCenterMatchmakingQueue]"] = requestParameters.filterGameCenterMatchmakingQueue;
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.GameCenterMatchmakingRuleErrorsV1MetricResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.gameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.MetricsApi = MetricsApi;
/**
 * @export
 */
exports.AppsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: "betaTesters"
};
/**
 * @export
 */
exports.AppsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: "P7D",
    P30D: "P30D",
    P90D: "P90D",
    P365D: "P365D"
};
/**
 * @export
 */
exports.BetaGroupsBetaTesterUsagesGetMetricsGroupByEnum = {
    BetaTesters: "betaTesters"
};
/**
 * @export
 */
exports.BetaGroupsBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: "P7D",
    P30D: "P30D",
    P90D: "P90D",
    P365D: "P365D"
};
/**
 * @export
 */
exports.BetaTestersBetaTesterUsagesGetMetricsPeriodEnum = {
    P7D: "P7D",
    P30D: "P30D",
    P90D: "P90D",
    P365D: "P365D"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterDetailsClassicMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsGroupByEnum = {
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsSortEnum = {
    AverageNumberOfRequests: "averageNumberOfRequests",
    AverageNumberOfRequests: "-averageNumberOfRequests",
    Count: "count",
    Count: "-count",
    P50NumberOfRequests: "p50NumberOfRequests",
    P50NumberOfRequests: "-p50NumberOfRequests",
    P95NumberOfRequests: "p95NumberOfRequests",
    P95NumberOfRequests: "-p95NumberOfRequests"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsGroupByEnum = {
    GameCenterDetail: "gameCenterDetail",
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsSortEnum = {
    AverageNumberOfRequests: "averageNumberOfRequests",
    AverageNumberOfRequests: "-averageNumberOfRequests",
    Count: "count",
    Count: "-count",
    P50NumberOfRequests: "p50NumberOfRequests",
    P50NumberOfRequests: "-p50NumberOfRequests",
    P95NumberOfRequests: "p95NumberOfRequests",
    P95NumberOfRequests: "-p95NumberOfRequests"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsGroupByEnum = {
    GameCenterDetail: "gameCenterDetail",
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsFilterResultEnum = {
    Matched: "MATCHED",
    Canceled: "CANCELED",
    Expired: "EXPIRED"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsSortEnum = {
    AverageSecondsInQueue: "averageSecondsInQueue",
    AverageSecondsInQueue: "-averageSecondsInQueue",
    Count: "count",
    Count: "-count",
    P50SecondsInQueue: "p50SecondsInQueue",
    P50SecondsInQueue: "-p50SecondsInQueue",
    P95SecondsInQueue: "p95SecondsInQueue",
    P95SecondsInQueue: "-p95SecondsInQueue"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsSortEnum = {
    AveragePlayerCount: "averagePlayerCount",
    AveragePlayerCount: "-averagePlayerCount",
    Count: "count",
    Count: "-count",
    P50PlayerCount: "p50PlayerCount",
    P50PlayerCount: "-p50PlayerCount",
    P95PlayerCount: "p95PlayerCount",
    P95PlayerCount: "-p95PlayerCount"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: "gameCenterMatchmakingQueue",
    Result: "result"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsSortEnum = {
    Count: "count",
    Count: "-count"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: "gameCenterMatchmakingQueue"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsSortEnum = {
    AverageResult: "averageResult",
    AverageResult: "-averageResult",
    Count: "count",
    Count: "-count",
    P50Result: "p50Result",
    P50Result: "-p50Result",
    P95Result: "p95Result",
    P95Result: "-p95Result"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGranularityEnum = {
    P1D: "P1D",
    Pt1H: "PT1H",
    Pt15M: "PT15M"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsGroupByEnum = {
    GameCenterMatchmakingQueue: "gameCenterMatchmakingQueue"
};
/**
 * @export
 */
exports.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsSortEnum = {
    Count: "count",
    Count: "-count"
};
