"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilesGetInstanceFieldsBundleIdsEnum = exports.ProfilesGetInstanceFieldsDevicesEnum = exports.ProfilesGetInstanceFieldsCertificatesEnum = exports.ProfilesGetInstanceIncludeEnum = exports.ProfilesGetInstanceFieldsProfilesEnum = exports.ProfilesGetCollectionFieldsBundleIdsEnum = exports.ProfilesGetCollectionFieldsDevicesEnum = exports.ProfilesGetCollectionFieldsCertificatesEnum = exports.ProfilesGetCollectionIncludeEnum = exports.ProfilesGetCollectionFieldsProfilesEnum = exports.ProfilesGetCollectionSortEnum = exports.ProfilesGetCollectionFilterProfileTypeEnum = exports.ProfilesGetCollectionFilterProfileStateEnum = exports.ProfilesDevicesGetToManyRelatedFieldsDevicesEnum = exports.ProfilesCertificatesGetToManyRelatedFieldsCertificatesEnum = exports.ProfilesBundleIdGetToOneRelatedFieldsBundleIdsEnum = exports.ProfilesApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ProfilesApi extends runtime.BaseAPI {
    /**
     */
    profilesBundleIdGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling profilesBundleIdGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsBundleIds) {
                queryParameters["fields[bundleIds]"] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles/{id}/bundleId`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.BundleIdWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesBundleIdGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.profilesBundleIdGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    profilesCertificatesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling profilesCertificatesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsCertificates) {
                queryParameters["fields[certificates]"] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles/{id}/certificates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificatesWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesCertificatesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.profilesCertificatesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    profilesCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.profileCreateRequest === null || requestParameters.profileCreateRequest === undefined) {
                throw new runtime.RequiredError("profileCreateRequest", "Required parameter requestParameters.profileCreateRequest was null or undefined when calling profilesCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ProfileCreateRequestToJSON)(requestParameters.profileCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.profilesCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    profilesDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling profilesDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    profilesDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.profilesDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    profilesDevicesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling profilesDevicesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsDevices) {
                queryParameters["fields[devices]"] = requestParameters.fieldsDevices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles/{id}/devices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DevicesWithoutIncludesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesDevicesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.profilesDevicesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    profilesGetCollectionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.filterName) {
                queryParameters["filter[name]"] = requestParameters.filterName.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterProfileState) {
                queryParameters["filter[profileState]"] = requestParameters.filterProfileState.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterProfileType) {
                queryParameters["filter[profileType]"] = requestParameters.filterProfileType.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterId) {
                queryParameters["filter[id]"] = requestParameters.filterId.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.sort) {
                queryParameters["sort"] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsProfiles) {
                queryParameters["fields[profiles]"] = requestParameters.fieldsProfiles.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCertificates) {
                queryParameters["fields[certificates]"] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsDevices) {
                queryParameters["fields[devices]"] = requestParameters.fieldsDevices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBundleIds) {
                queryParameters["fields[bundleIds]"] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitCertificates !== undefined) {
                queryParameters["limit[certificates]"] = requestParameters.limitCertificates;
            }
            if (requestParameters.limitDevices !== undefined) {
                queryParameters["limit[devices]"] = requestParameters.limitDevices;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles`,
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfilesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesGetCollection() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.profilesGetCollectionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    profilesGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling profilesGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsProfiles) {
                queryParameters["fields[profiles]"] = requestParameters.fieldsProfiles.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsCertificates) {
                queryParameters["fields[certificates]"] = requestParameters.fieldsCertificates.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsDevices) {
                queryParameters["fields[devices]"] = requestParameters.fieldsDevices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsBundleIds) {
                queryParameters["fields[bundleIds]"] = requestParameters.fieldsBundleIds.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitCertificates !== undefined) {
                queryParameters["limit[certificates]"] = requestParameters.limitCertificates;
            }
            if (requestParameters.limitDevices !== undefined) {
                queryParameters["limit[devices]"] = requestParameters.limitDevices;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/profiles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ProfileResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    profilesGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.profilesGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.ProfilesApi = ProfilesApi;
/**
 * @export
 */
exports.ProfilesBundleIdGetToOneRelatedFieldsBundleIdsEnum = {
    App: "app",
    BundleIdCapabilities: "bundleIdCapabilities",
    Identifier: "identifier",
    Name: "name",
    Platform: "platform",
    Profiles: "profiles",
    SeedId: "seedId"
};
/**
 * @export
 */
exports.ProfilesCertificatesGetToManyRelatedFieldsCertificatesEnum = {
    CertificateContent: "certificateContent",
    CertificateType: "certificateType",
    CsrContent: "csrContent",
    DisplayName: "displayName",
    ExpirationDate: "expirationDate",
    Name: "name",
    Platform: "platform",
    SerialNumber: "serialNumber"
};
/**
 * @export
 */
exports.ProfilesDevicesGetToManyRelatedFieldsDevicesEnum = {
    AddedDate: "addedDate",
    DeviceClass: "deviceClass",
    Model: "model",
    Name: "name",
    Platform: "platform",
    Status: "status",
    Udid: "udid"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFilterProfileStateEnum = {
    Active: "ACTIVE",
    Invalid: "INVALID"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFilterProfileTypeEnum = {
    IosAppDevelopment: "IOS_APP_DEVELOPMENT",
    IosAppStore: "IOS_APP_STORE",
    IosAppAdhoc: "IOS_APP_ADHOC",
    IosAppInhouse: "IOS_APP_INHOUSE",
    MacAppDevelopment: "MAC_APP_DEVELOPMENT",
    MacAppStore: "MAC_APP_STORE",
    MacAppDirect: "MAC_APP_DIRECT",
    TvosAppDevelopment: "TVOS_APP_DEVELOPMENT",
    TvosAppStore: "TVOS_APP_STORE",
    TvosAppAdhoc: "TVOS_APP_ADHOC",
    TvosAppInhouse: "TVOS_APP_INHOUSE",
    MacCatalystAppDevelopment: "MAC_CATALYST_APP_DEVELOPMENT",
    MacCatalystAppStore: "MAC_CATALYST_APP_STORE",
    MacCatalystAppDirect: "MAC_CATALYST_APP_DIRECT"
};
/**
 * @export
 */
exports.ProfilesGetCollectionSortEnum = {
    Id: "id",
    Id: "-id",
    Name: "name",
    Name: "-name",
    ProfileState: "profileState",
    ProfileState: "-profileState",
    ProfileType: "profileType",
    ProfileType: "-profileType"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFieldsProfilesEnum = {
    BundleId: "bundleId",
    Certificates: "certificates",
    CreatedDate: "createdDate",
    Devices: "devices",
    ExpirationDate: "expirationDate",
    Name: "name",
    Platform: "platform",
    ProfileContent: "profileContent",
    ProfileState: "profileState",
    ProfileType: "profileType",
    Uuid: "uuid"
};
/**
 * @export
 */
exports.ProfilesGetCollectionIncludeEnum = {
    BundleId: "bundleId",
    Certificates: "certificates",
    Devices: "devices"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFieldsCertificatesEnum = {
    CertificateContent: "certificateContent",
    CertificateType: "certificateType",
    CsrContent: "csrContent",
    DisplayName: "displayName",
    ExpirationDate: "expirationDate",
    Name: "name",
    Platform: "platform",
    SerialNumber: "serialNumber"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFieldsDevicesEnum = {
    AddedDate: "addedDate",
    DeviceClass: "deviceClass",
    Model: "model",
    Name: "name",
    Platform: "platform",
    Status: "status",
    Udid: "udid"
};
/**
 * @export
 */
exports.ProfilesGetCollectionFieldsBundleIdsEnum = {
    App: "app",
    BundleIdCapabilities: "bundleIdCapabilities",
    Identifier: "identifier",
    Name: "name",
    Platform: "platform",
    Profiles: "profiles",
    SeedId: "seedId"
};
/**
 * @export
 */
exports.ProfilesGetInstanceFieldsProfilesEnum = {
    BundleId: "bundleId",
    Certificates: "certificates",
    CreatedDate: "createdDate",
    Devices: "devices",
    ExpirationDate: "expirationDate",
    Name: "name",
    Platform: "platform",
    ProfileContent: "profileContent",
    ProfileState: "profileState",
    ProfileType: "profileType",
    Uuid: "uuid"
};
/**
 * @export
 */
exports.ProfilesGetInstanceIncludeEnum = {
    BundleId: "bundleId",
    Certificates: "certificates",
    Devices: "devices"
};
/**
 * @export
 */
exports.ProfilesGetInstanceFieldsCertificatesEnum = {
    CertificateContent: "certificateContent",
    CertificateType: "certificateType",
    CsrContent: "csrContent",
    DisplayName: "displayName",
    ExpirationDate: "expirationDate",
    Name: "name",
    Platform: "platform",
    SerialNumber: "serialNumber"
};
/**
 * @export
 */
exports.ProfilesGetInstanceFieldsDevicesEnum = {
    AddedDate: "addedDate",
    DeviceClass: "deviceClass",
    Model: "model",
    Name: "name",
    Platform: "platform",
    Status: "status",
    Udid: "udid"
};
/**
 * @export
 */
exports.ProfilesGetInstanceFieldsBundleIdsEnum = {
    App: "app",
    BundleIdCapabilities: "bundleIdCapabilities",
    Identifier: "identifier",
    Name: "name",
    Platform: "platform",
    Profiles: "profiles",
    SeedId: "seedId"
};
