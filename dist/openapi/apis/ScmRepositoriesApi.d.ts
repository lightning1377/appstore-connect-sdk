/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from "../runtime";
import type { ScmGitReferencesResponse, ScmPullRequestsResponse, ScmRepositoriesResponse, ScmRepositoryResponse } from "../models";
export interface ScmRepositoriesGetCollectionRequest {
    filterId?: Array<string>;
    fieldsScmRepositories?: Array<ScmRepositoriesGetCollectionFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<ScmRepositoriesGetCollectionIncludeEnum>;
    fieldsScmGitReferences?: Array<ScmRepositoriesGetCollectionFieldsScmGitReferencesEnum>;
    fieldsScmPullRequests?: Array<ScmRepositoriesGetCollectionFieldsScmPullRequestsEnum>;
}
export interface ScmRepositoriesGetInstanceRequest {
    id: string;
    fieldsScmRepositories?: Array<ScmRepositoriesGetInstanceFieldsScmRepositoriesEnum>;
    include?: Array<ScmRepositoriesGetInstanceIncludeEnum>;
    fieldsScmGitReferences?: Array<ScmRepositoriesGetInstanceFieldsScmGitReferencesEnum>;
    fieldsScmPullRequests?: Array<ScmRepositoriesGetInstanceFieldsScmPullRequestsEnum>;
}
export interface ScmRepositoriesGitReferencesGetToManyRelatedRequest {
    id: string;
    fieldsScmGitReferences?: Array<ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmGitReferencesEnum>;
    fieldsScmRepositories?: Array<ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<ScmRepositoriesGitReferencesGetToManyRelatedIncludeEnum>;
}
export interface ScmRepositoriesPullRequestsGetToManyRelatedRequest {
    id: string;
    fieldsScmPullRequests?: Array<ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmPullRequestsEnum>;
    fieldsScmRepositories?: Array<ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmRepositoriesEnum>;
    limit?: number;
    include?: Array<ScmRepositoriesPullRequestsGetToManyRelatedIncludeEnum>;
}
/**
 *
 */
export declare class ScmRepositoriesApi extends runtime.BaseAPI {
    /**
     */
    scmRepositoriesGetCollectionRaw(requestParameters: ScmRepositoriesGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoriesResponse>>;
    /**
     */
    scmRepositoriesGetCollection(requestParameters?: ScmRepositoriesGetCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoriesResponse>;
    /**
     */
    scmRepositoriesGetInstanceRaw(requestParameters: ScmRepositoriesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmRepositoryResponse>>;
    /**
     */
    scmRepositoriesGetInstance(requestParameters: ScmRepositoriesGetInstanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmRepositoryResponse>;
    /**
     */
    scmRepositoriesGitReferencesGetToManyRelatedRaw(requestParameters: ScmRepositoriesGitReferencesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmGitReferencesResponse>>;
    /**
     */
    scmRepositoriesGitReferencesGetToManyRelated(requestParameters: ScmRepositoriesGitReferencesGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmGitReferencesResponse>;
    /**
     */
    scmRepositoriesPullRequestsGetToManyRelatedRaw(requestParameters: ScmRepositoriesPullRequestsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScmPullRequestsResponse>>;
    /**
     */
    scmRepositoriesPullRequestsGetToManyRelated(requestParameters: ScmRepositoriesPullRequestsGetToManyRelatedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScmPullRequestsResponse>;
}
/**
 * @export
 */
export declare const ScmRepositoriesGetCollectionFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type ScmRepositoriesGetCollectionFieldsScmRepositoriesEnum = (typeof ScmRepositoriesGetCollectionFieldsScmRepositoriesEnum)[keyof typeof ScmRepositoriesGetCollectionFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetCollectionIncludeEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly ScmProvider: "scmProvider";
};
export type ScmRepositoriesGetCollectionIncludeEnum = (typeof ScmRepositoriesGetCollectionIncludeEnum)[keyof typeof ScmRepositoriesGetCollectionIncludeEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetCollectionFieldsScmGitReferencesEnum: {
    readonly CanonicalName: "canonicalName";
    readonly IsDeleted: "isDeleted";
    readonly Kind: "kind";
    readonly Name: "name";
    readonly Repository: "repository";
};
export type ScmRepositoriesGetCollectionFieldsScmGitReferencesEnum = (typeof ScmRepositoriesGetCollectionFieldsScmGitReferencesEnum)[keyof typeof ScmRepositoriesGetCollectionFieldsScmGitReferencesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetCollectionFieldsScmPullRequestsEnum: {
    readonly DestinationBranchName: "destinationBranchName";
    readonly DestinationRepositoryName: "destinationRepositoryName";
    readonly DestinationRepositoryOwner: "destinationRepositoryOwner";
    readonly IsClosed: "isClosed";
    readonly IsCrossRepository: "isCrossRepository";
    readonly Number: "number";
    readonly Repository: "repository";
    readonly SourceBranchName: "sourceBranchName";
    readonly SourceRepositoryName: "sourceRepositoryName";
    readonly SourceRepositoryOwner: "sourceRepositoryOwner";
    readonly Title: "title";
    readonly WebUrl: "webUrl";
};
export type ScmRepositoriesGetCollectionFieldsScmPullRequestsEnum = (typeof ScmRepositoriesGetCollectionFieldsScmPullRequestsEnum)[keyof typeof ScmRepositoriesGetCollectionFieldsScmPullRequestsEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetInstanceFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type ScmRepositoriesGetInstanceFieldsScmRepositoriesEnum = (typeof ScmRepositoriesGetInstanceFieldsScmRepositoriesEnum)[keyof typeof ScmRepositoriesGetInstanceFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetInstanceIncludeEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly ScmProvider: "scmProvider";
};
export type ScmRepositoriesGetInstanceIncludeEnum = (typeof ScmRepositoriesGetInstanceIncludeEnum)[keyof typeof ScmRepositoriesGetInstanceIncludeEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetInstanceFieldsScmGitReferencesEnum: {
    readonly CanonicalName: "canonicalName";
    readonly IsDeleted: "isDeleted";
    readonly Kind: "kind";
    readonly Name: "name";
    readonly Repository: "repository";
};
export type ScmRepositoriesGetInstanceFieldsScmGitReferencesEnum = (typeof ScmRepositoriesGetInstanceFieldsScmGitReferencesEnum)[keyof typeof ScmRepositoriesGetInstanceFieldsScmGitReferencesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGetInstanceFieldsScmPullRequestsEnum: {
    readonly DestinationBranchName: "destinationBranchName";
    readonly DestinationRepositoryName: "destinationRepositoryName";
    readonly DestinationRepositoryOwner: "destinationRepositoryOwner";
    readonly IsClosed: "isClosed";
    readonly IsCrossRepository: "isCrossRepository";
    readonly Number: "number";
    readonly Repository: "repository";
    readonly SourceBranchName: "sourceBranchName";
    readonly SourceRepositoryName: "sourceRepositoryName";
    readonly SourceRepositoryOwner: "sourceRepositoryOwner";
    readonly Title: "title";
    readonly WebUrl: "webUrl";
};
export type ScmRepositoriesGetInstanceFieldsScmPullRequestsEnum = (typeof ScmRepositoriesGetInstanceFieldsScmPullRequestsEnum)[keyof typeof ScmRepositoriesGetInstanceFieldsScmPullRequestsEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmGitReferencesEnum: {
    readonly CanonicalName: "canonicalName";
    readonly IsDeleted: "isDeleted";
    readonly Kind: "kind";
    readonly Name: "name";
    readonly Repository: "repository";
};
export type ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmGitReferencesEnum = (typeof ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmGitReferencesEnum)[keyof typeof ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmGitReferencesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmRepositoriesEnum = (typeof ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmRepositoriesEnum)[keyof typeof ScmRepositoriesGitReferencesGetToManyRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesGitReferencesGetToManyRelatedIncludeEnum: {
    readonly Repository: "repository";
};
export type ScmRepositoriesGitReferencesGetToManyRelatedIncludeEnum = (typeof ScmRepositoriesGitReferencesGetToManyRelatedIncludeEnum)[keyof typeof ScmRepositoriesGitReferencesGetToManyRelatedIncludeEnum];
/**
 * @export
 */
export declare const ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmPullRequestsEnum: {
    readonly DestinationBranchName: "destinationBranchName";
    readonly DestinationRepositoryName: "destinationRepositoryName";
    readonly DestinationRepositoryOwner: "destinationRepositoryOwner";
    readonly IsClosed: "isClosed";
    readonly IsCrossRepository: "isCrossRepository";
    readonly Number: "number";
    readonly Repository: "repository";
    readonly SourceBranchName: "sourceBranchName";
    readonly SourceRepositoryName: "sourceRepositoryName";
    readonly SourceRepositoryOwner: "sourceRepositoryOwner";
    readonly Title: "title";
    readonly WebUrl: "webUrl";
};
export type ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmPullRequestsEnum = (typeof ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmPullRequestsEnum)[keyof typeof ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmPullRequestsEnum];
/**
 * @export
 */
export declare const ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmRepositoriesEnum: {
    readonly DefaultBranch: "defaultBranch";
    readonly GitReferences: "gitReferences";
    readonly HttpCloneUrl: "httpCloneUrl";
    readonly LastAccessedDate: "lastAccessedDate";
    readonly OwnerName: "ownerName";
    readonly PullRequests: "pullRequests";
    readonly RepositoryName: "repositoryName";
    readonly ScmProvider: "scmProvider";
    readonly SshCloneUrl: "sshCloneUrl";
};
export type ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmRepositoriesEnum = (typeof ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmRepositoriesEnum)[keyof typeof ScmRepositoriesPullRequestsGetToManyRelatedFieldsScmRepositoriesEnum];
/**
 * @export
 */
export declare const ScmRepositoriesPullRequestsGetToManyRelatedIncludeEnum: {
    readonly Repository: "repository";
};
export type ScmRepositoriesPullRequestsGetToManyRelatedIncludeEnum = (typeof ScmRepositoriesPullRequestsGetToManyRelatedIncludeEnum)[keyof typeof ScmRepositoriesPullRequestsGetToManyRelatedIncludeEnum];
