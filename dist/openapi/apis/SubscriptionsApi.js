"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum = exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum = exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum = exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum = exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionsEnum = exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum = exports.SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum = exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum = exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum = exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = exports.SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum = exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchaseImagesEnum = exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum = exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum = exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum = exports.SubscriptionsPricesGetToManyRelatedIncludeEnum = exports.SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum = exports.SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum = exports.SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum = exports.SubscriptionsPricePointsGetToManyRelatedIncludeEnum = exports.SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum = exports.SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum = exports.SubscriptionsOfferCodesGetToManyRelatedIncludeEnum = exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum = exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum = exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum = exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum = exports.SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum = exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum = exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum = exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionPricesEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionPricePointsEnum = exports.SubscriptionsGetInstanceFieldsPromotedPurchasesEnum = exports.SubscriptionsGetInstanceIncludeEnum = exports.SubscriptionsGetInstanceFieldsSubscriptionsEnum = exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum = exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum = exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = exports.SubscriptionsApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class SubscriptionsApi extends runtime.BaseAPI {
    /**
     */
    subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsAppStoreReviewScreenshotGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
                queryParameters["fields[subscriptionAppStoreReviewScreenshots]"] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/appStoreReviewScreenshot`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionAppStoreReviewScreenshotResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsAppStoreReviewScreenshotGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsAppStoreReviewScreenshotGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsCreateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.subscriptionCreateRequest === null || requestParameters.subscriptionCreateRequest === undefined) {
                throw new runtime.RequiredError("subscriptionCreateRequest", "Required parameter requestParameters.subscriptionCreateRequest was null or undefined when calling subscriptionsCreateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.SubscriptionCreateRequestToJSON)(requestParameters.subscriptionCreateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsCreateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsCreateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsDeleteInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsDeleteInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    subscriptionsDeleteInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.subscriptionsDeleteInstanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    subscriptionsGetInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsGetInstance.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPricePoints) {
                queryParameters["fields[subscriptionPricePoints]"] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPromotionalOffers) {
                queryParameters["fields[subscriptionPromotionalOffers]"] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionOfferCodes) {
                queryParameters["fields[subscriptionOfferCodes]"] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionAppStoreReviewScreenshots) {
                queryParameters["fields[subscriptionAppStoreReviewScreenshots]"] = requestParameters.fieldsSubscriptionAppStoreReviewScreenshots.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionAvailabilities) {
                queryParameters["fields[subscriptionAvailabilities]"] = requestParameters.fieldsSubscriptionAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPrices) {
                queryParameters["fields[subscriptionPrices]"] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
                queryParameters["fields[subscriptionIntroductoryOffers]"] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionLocalizations) {
                queryParameters["fields[subscriptionLocalizations]"] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitIntroductoryOffers !== undefined) {
                queryParameters["limit[introductoryOffers]"] = requestParameters.limitIntroductoryOffers;
            }
            if (requestParameters.limitOfferCodes !== undefined) {
                queryParameters["limit[offerCodes]"] = requestParameters.limitOfferCodes;
            }
            if (requestParameters.limitPrices !== undefined) {
                queryParameters["limit[prices]"] = requestParameters.limitPrices;
            }
            if (requestParameters.limitPromotionalOffers !== undefined) {
                queryParameters["limit[promotionalOffers]"] = requestParameters.limitPromotionalOffers;
            }
            if (requestParameters.limitSubscriptionLocalizations !== undefined) {
                queryParameters["limit[subscriptionLocalizations]"] = requestParameters.limitSubscriptionLocalizations;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsGetInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsGetInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.");
            }
            if (requestParameters.subscriptionIntroductoryOffersLinkagesRequest === null || requestParameters.subscriptionIntroductoryOffersLinkagesRequest === undefined) {
                throw new runtime.RequiredError("subscriptionIntroductoryOffersLinkagesRequest", "Required parameter requestParameters.subscriptionIntroductoryOffersLinkagesRequest was null or undefined when calling subscriptionsIntroductoryOffersDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.SubscriptionIntroductoryOffersLinkagesRequestToJSON)(requestParameters.subscriptionIntroductoryOffersLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.subscriptionsIntroductoryOffersDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPricePoints) {
                queryParameters["fields[subscriptionPricePoints]"] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionIntroductoryOffers) {
                queryParameters["fields[subscriptionIntroductoryOffers]"] = requestParameters.fieldsSubscriptionIntroductoryOffers.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionIntroductoryOffersResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsIntroductoryOffersGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsIntroductoryOffersGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/relationships/introductoryOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionIntroductoryOffersLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsIntroductoryOffersGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsIntroductoryOffersGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsOfferCodesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionOfferCodeCustomCodes) {
                queryParameters["fields[subscriptionOfferCodeCustomCodes]"] = requestParameters.fieldsSubscriptionOfferCodeCustomCodes.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionOfferCodes) {
                queryParameters["fields[subscriptionOfferCodes]"] = requestParameters.fieldsSubscriptionOfferCodes.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes) {
                queryParameters["fields[subscriptionOfferCodeOneTimeUseCodes]"] = requestParameters.fieldsSubscriptionOfferCodeOneTimeUseCodes.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionOfferCodePrices) {
                queryParameters["fields[subscriptionOfferCodePrices]"] = requestParameters.fieldsSubscriptionOfferCodePrices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitOneTimeUseCodes !== undefined) {
                queryParameters["limit[oneTimeUseCodes]"] = requestParameters.limitOneTimeUseCodes;
            }
            if (requestParameters.limitCustomCodes !== undefined) {
                queryParameters["limit[customCodes]"] = requestParameters.limitCustomCodes;
            }
            if (requestParameters.limitPrices !== undefined) {
                queryParameters["limit[prices]"] = requestParameters.limitPrices;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/offerCodes`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionOfferCodesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsOfferCodesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsOfferCodesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsPricePointsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPricePointsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPricePoints) {
                queryParameters["fields[subscriptionPricePoints]"] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/pricePoints`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionPricePointsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsPricePointsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsPricePointsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.");
            }
            if (requestParameters.subscriptionPricesLinkagesRequest === null || requestParameters.subscriptionPricesLinkagesRequest === undefined) {
                throw new runtime.RequiredError("subscriptionPricesLinkagesRequest", "Required parameter requestParameters.subscriptionPricesLinkagesRequest was null or undefined when calling subscriptionsPricesDeleteToManyRelationship.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "DELETE",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.SubscriptionPricesLinkagesRequestToJSON)(requestParameters.subscriptionPricesLinkagesRequest)
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     */
    subscriptionsPricesDeleteToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.subscriptionsPricesDeleteToManyRelationshipRaw(requestParameters, initOverrides);
        });
    }
    /**
     */
    subscriptionsPricesGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterSubscriptionPricePoint) {
                queryParameters["filter[subscriptionPricePoint]"] = requestParameters.filterSubscriptionPricePoint.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPricePoints) {
                queryParameters["fields[subscriptionPricePoints]"] = requestParameters.fieldsSubscriptionPricePoints.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPrices) {
                queryParameters["fields[subscriptionPrices]"] = requestParameters.fieldsSubscriptionPrices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionPricesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsPricesGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsPricesGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsPricesGetToManyRelationshipRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPricesGetToManyRelationship.");
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/relationships/prices`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionPricesLinkagesResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsPricesGetToManyRelationship(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsPricesGetToManyRelationshipRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotedPurchaseGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsPromotedPurchases) {
                queryParameters["fields[promotedPurchases]"] = requestParameters.fieldsPromotedPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsInAppPurchases) {
                queryParameters["fields[inAppPurchases]"] = requestParameters.fieldsInAppPurchases.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsPromotedPurchaseImages) {
                queryParameters["fields[promotedPurchaseImages]"] = requestParameters.fieldsPromotedPurchaseImages.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitPromotionImages !== undefined) {
                queryParameters["limit[promotionImages]"] = requestParameters.limitPromotionImages;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/promotedPurchase`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PromotedPurchaseResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsPromotedPurchaseGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsPromotedPurchaseGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsPromotionalOffersGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.filterTerritory) {
                queryParameters["filter[territory]"] = requestParameters.filterTerritory.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPromotionalOffers) {
                queryParameters["fields[subscriptionPromotionalOffers]"] = requestParameters.fieldsSubscriptionPromotionalOffers.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionPromotionalOfferPrices) {
                queryParameters["fields[subscriptionPromotionalOfferPrices]"] = requestParameters.fieldsSubscriptionPromotionalOfferPrices.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.limitPrices !== undefined) {
                queryParameters["limit[prices]"] = requestParameters.limitPrices;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/promotionalOffers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionPromotionalOffersResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsPromotionalOffersGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsPromotionalOffersGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsSubscriptionAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsSubscriptionAvailabilityGetToOneRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsSubscriptionAvailabilities) {
                queryParameters["fields[subscriptionAvailabilities]"] = requestParameters.fieldsSubscriptionAvailabilities.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsTerritories) {
                queryParameters["fields[territories]"] = requestParameters.fieldsTerritories.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limitAvailableTerritories !== undefined) {
                queryParameters["limit[availableTerritories]"] = requestParameters.limitAvailableTerritories;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/subscriptionAvailability`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionAvailabilityResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsSubscriptionAvailabilityGetToOneRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsSubscriptionAvailabilityGetToOneRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsSubscriptionLocalizationsGetToManyRelated.");
            }
            const queryParameters = {};
            if (requestParameters.fieldsSubscriptions) {
                queryParameters["fields[subscriptions]"] = requestParameters.fieldsSubscriptions.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.fieldsSubscriptionLocalizations) {
                queryParameters["fields[subscriptionLocalizations]"] = requestParameters.fieldsSubscriptionLocalizations.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            if (requestParameters.limit !== undefined) {
                queryParameters["limit"] = requestParameters.limit;
            }
            if (requestParameters.include) {
                queryParameters["include"] = requestParameters.include.join(runtime.COLLECTION_FORMATS["csv"]);
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}/subscriptionLocalizations`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "GET",
                headers: headerParameters,
                query: queryParameters
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionLocalizationsResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsSubscriptionLocalizationsGetToManyRelated(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsSubscriptionLocalizationsGetToManyRelatedRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     */
    subscriptionsUpdateInstanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError("id", "Required parameter requestParameters.id was null or undefined when calling subscriptionsUpdateInstance.");
            }
            if (requestParameters.subscriptionUpdateRequest === null || requestParameters.subscriptionUpdateRequest === undefined) {
                throw new runtime.RequiredError("subscriptionUpdateRequest", "Required parameter requestParameters.subscriptionUpdateRequest was null or undefined when calling subscriptionsUpdateInstance.");
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters["Content-Type"] = "application/json";
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("itc-bearer-token", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: "PATCH",
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.SubscriptionUpdateRequestToJSON)(requestParameters.subscriptionUpdateRequest)
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionResponseFromJSON)(jsonValue));
        });
    }
    /**
     */
    subscriptionsUpdateInstance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.subscriptionsUpdateInstanceRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.SubscriptionsApi = SubscriptionsApi;
/**
 * @export
 */
exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionAppStoreReviewScreenshotsEnum = {
    AssetDeliveryState: "assetDeliveryState",
    AssetToken: "assetToken",
    AssetType: "assetType",
    FileName: "fileName",
    FileSize: "fileSize",
    ImageAsset: "imageAsset",
    SourceFileChecksum: "sourceFileChecksum",
    Subscription: "subscription",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsAppStoreReviewScreenshotGetToOneRelatedIncludeEnum = {
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceIncludeEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Group: "group",
    IntroductoryOffers: "introductoryOffers",
    OfferCodes: "offerCodes",
    Prices: "prices",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    ProceedsYear2: "proceedsYear2",
    Subscription: "subscription",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionPromotionalOffersEnum = {
    Duration: "duration",
    Name: "name",
    NumberOfPeriods: "numberOfPeriods",
    OfferCode: "offerCode",
    OfferMode: "offerMode",
    Prices: "prices",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionOfferCodesEnum = {
    Active: "active",
    CustomCodes: "customCodes",
    CustomerEligibilities: "customerEligibilities",
    Duration: "duration",
    Name: "name",
    NumberOfPeriods: "numberOfPeriods",
    OfferEligibility: "offerEligibility",
    OfferMode: "offerMode",
    OneTimeUseCodes: "oneTimeUseCodes",
    Prices: "prices",
    Subscription: "subscription",
    TotalNumberOfCodes: "totalNumberOfCodes"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionAppStoreReviewScreenshotsEnum = {
    AssetDeliveryState: "assetDeliveryState",
    AssetToken: "assetToken",
    AssetType: "assetType",
    FileName: "fileName",
    FileSize: "fileSize",
    ImageAsset: "imageAsset",
    SourceFileChecksum: "sourceFileChecksum",
    Subscription: "subscription",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionAvailabilitiesEnum = {
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionPricesEnum = {
    PreserveCurrentPrice: "preserveCurrentPrice",
    Preserved: "preserved",
    StartDate: "startDate",
    Subscription: "subscription",
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionIntroductoryOffersEnum = {
    Duration: "duration",
    EndDate: "endDate",
    NumberOfPeriods: "numberOfPeriods",
    OfferMode: "offerMode",
    StartDate: "startDate",
    Subscription: "subscription",
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsGetInstanceFieldsSubscriptionLocalizationsEnum = {
    Description: "description",
    Locale: "locale",
    Name: "name",
    State: "state",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    ProceedsYear2: "proceedsYear2",
    Subscription: "subscription",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsSubscriptionIntroductoryOffersEnum = {
    Duration: "duration",
    EndDate: "endDate",
    NumberOfPeriods: "numberOfPeriods",
    OfferMode: "offerMode",
    StartDate: "startDate",
    Subscription: "subscription",
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsIntroductoryOffersGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.SubscriptionsIntroductoryOffersGetToManyRelatedIncludeEnum = {
    Subscription: "subscription",
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeCustomCodesEnum = {
    Active: "active",
    CreatedDate: "createdDate",
    CustomCode: "customCode",
    ExpirationDate: "expirationDate",
    NumberOfCodes: "numberOfCodes",
    OfferCode: "offerCode"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodesEnum = {
    Active: "active",
    CustomCodes: "customCodes",
    CustomerEligibilities: "customerEligibilities",
    Duration: "duration",
    Name: "name",
    NumberOfPeriods: "numberOfPeriods",
    OfferEligibility: "offerEligibility",
    OfferMode: "offerMode",
    OneTimeUseCodes: "oneTimeUseCodes",
    Prices: "prices",
    Subscription: "subscription",
    TotalNumberOfCodes: "totalNumberOfCodes"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodeOneTimeUseCodesEnum = {
    Active: "active",
    CreatedDate: "createdDate",
    ExpirationDate: "expirationDate",
    NumberOfCodes: "numberOfCodes",
    OfferCode: "offerCode",
    Values: "values"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedFieldsSubscriptionOfferCodePricesEnum = {
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsOfferCodesGetToManyRelatedIncludeEnum = {
    CustomCodes: "customCodes",
    OneTimeUseCodes: "oneTimeUseCodes",
    Prices: "prices",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsPricePointsGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    ProceedsYear2: "proceedsYear2",
    Subscription: "subscription",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPricePointsGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.SubscriptionsPricePointsGetToManyRelatedIncludeEnum = {
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricePointsEnum = {
    CustomerPrice: "customerPrice",
    Equalizations: "equalizations",
    Proceeds: "proceeds",
    ProceedsYear2: "proceedsYear2",
    Subscription: "subscription",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPricesGetToManyRelatedFieldsSubscriptionPricesEnum = {
    PreserveCurrentPrice: "preserveCurrentPrice",
    Preserved: "preserved",
    StartDate: "startDate",
    Subscription: "subscription",
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPricesGetToManyRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.SubscriptionsPricesGetToManyRelatedIncludeEnum = {
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchasesEnum = {
    App: "app",
    Enabled: "enabled",
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    State: "state",
    Subscription: "subscription",
    VisibleForAllUsers: "visibleForAllUsers"
};
/**
 * @export
 */
exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsInAppPurchasesEnum = {
    App: "app",
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    Content: "content",
    ContentHosting: "contentHosting",
    FamilySharable: "familySharable",
    IapPriceSchedule: "iapPriceSchedule",
    InAppPurchaseAvailability: "inAppPurchaseAvailability",
    InAppPurchaseLocalizations: "inAppPurchaseLocalizations",
    InAppPurchaseType: "inAppPurchaseType",
    Name: "name",
    PricePoints: "pricePoints",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    ReviewNote: "reviewNote",
    State: "state"
};
/**
 * @export
 */
exports.SubscriptionsPromotedPurchaseGetToOneRelatedFieldsPromotedPurchaseImagesEnum = {
    AssetToken: "assetToken",
    AssetType: "assetType",
    FileName: "fileName",
    FileSize: "fileSize",
    ImageAsset: "imageAsset",
    PromotedPurchase: "promotedPurchase",
    SourceFileChecksum: "sourceFileChecksum",
    State: "state",
    UploadOperations: "uploadOperations",
    Uploaded: "uploaded"
};
/**
 * @export
 */
exports.SubscriptionsPromotedPurchaseGetToOneRelatedIncludeEnum = {
    InAppPurchaseV2: "inAppPurchaseV2",
    PromotionImages: "promotionImages",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOffersEnum = {
    Duration: "duration",
    Name: "name",
    NumberOfPeriods: "numberOfPeriods",
    OfferCode: "offerCode",
    OfferMode: "offerMode",
    Prices: "prices",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsPromotionalOffersGetToManyRelatedFieldsSubscriptionPromotionalOfferPricesEnum = {
    SubscriptionPricePoint: "subscriptionPricePoint",
    Territory: "territory"
};
/**
 * @export
 */
exports.SubscriptionsPromotionalOffersGetToManyRelatedIncludeEnum = {
    Prices: "prices",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionAvailabilitiesEnum = {
    AvailableInNewTerritories: "availableInNewTerritories",
    AvailableTerritories: "availableTerritories",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedFieldsTerritoriesEnum = {
    Currency: "currency"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionAvailabilityGetToOneRelatedIncludeEnum = {
    AvailableTerritories: "availableTerritories",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionsEnum = {
    AppStoreReviewScreenshot: "appStoreReviewScreenshot",
    FamilySharable: "familySharable",
    Group: "group",
    GroupLevel: "groupLevel",
    IntroductoryOffers: "introductoryOffers",
    Name: "name",
    OfferCodes: "offerCodes",
    PricePoints: "pricePoints",
    Prices: "prices",
    ProductId: "productId",
    PromotedPurchase: "promotedPurchase",
    PromotionalOffers: "promotionalOffers",
    ReviewNote: "reviewNote",
    State: "state",
    SubscriptionAvailability: "subscriptionAvailability",
    SubscriptionLocalizations: "subscriptionLocalizations",
    SubscriptionPeriod: "subscriptionPeriod"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedFieldsSubscriptionLocalizationsEnum = {
    Description: "description",
    Locale: "locale",
    Name: "name",
    State: "state",
    Subscription: "subscription"
};
/**
 * @export
 */
exports.SubscriptionsSubscriptionLocalizationsGetToManyRelatedIncludeEnum = {
    Subscription: "subscription"
};
