"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfBetaBuildLocalizationCreateRequestDataAttributes = instanceOfBetaBuildLocalizationCreateRequestDataAttributes;
exports.BetaBuildLocalizationCreateRequestDataAttributesFromJSON = BetaBuildLocalizationCreateRequestDataAttributesFromJSON;
exports.BetaBuildLocalizationCreateRequestDataAttributesFromJSONTyped = BetaBuildLocalizationCreateRequestDataAttributesFromJSONTyped;
exports.BetaBuildLocalizationCreateRequestDataAttributesToJSON = BetaBuildLocalizationCreateRequestDataAttributesToJSON;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the BetaBuildLocalizationCreateRequestDataAttributes interface.
 */
function instanceOfBetaBuildLocalizationCreateRequestDataAttributes(value) {
    let isInstance = true;
    isInstance = isInstance && "locale" in value;
    return isInstance;
}
function BetaBuildLocalizationCreateRequestDataAttributesFromJSON(json) {
    return BetaBuildLocalizationCreateRequestDataAttributesFromJSONTyped(json, false);
}
function BetaBuildLocalizationCreateRequestDataAttributesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        whatsNew: !(0, runtime_1.exists)(json, "whatsNew") ? undefined : json["whatsNew"],
        locale: json["locale"]
    };
}
function BetaBuildLocalizationCreateRequestDataAttributesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        whatsNew: value.whatsNew,
        locale: value.locale
    };
}
