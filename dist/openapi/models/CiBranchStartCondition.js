"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCiBranchStartCondition = instanceOfCiBranchStartCondition;
exports.CiBranchStartConditionFromJSON = CiBranchStartConditionFromJSON;
exports.CiBranchStartConditionFromJSONTyped = CiBranchStartConditionFromJSONTyped;
exports.CiBranchStartConditionToJSON = CiBranchStartConditionToJSON;
const runtime_1 = require("../runtime");
const CiBranchPatterns_1 = require("./CiBranchPatterns");
const CiFilesAndFoldersRule_1 = require("./CiFilesAndFoldersRule");
/**
 * Check if a given object implements the CiBranchStartCondition interface.
 */
function instanceOfCiBranchStartCondition(value) {
    let isInstance = true;
    return isInstance;
}
function CiBranchStartConditionFromJSON(json) {
    return CiBranchStartConditionFromJSONTyped(json, false);
}
function CiBranchStartConditionFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        source: !(0, runtime_1.exists)(json, "source") ? undefined : (0, CiBranchPatterns_1.CiBranchPatternsFromJSON)(json["source"]),
        filesAndFoldersRule: !(0, runtime_1.exists)(json, "filesAndFoldersRule") ? undefined : (0, CiFilesAndFoldersRule_1.CiFilesAndFoldersRuleFromJSON)(json["filesAndFoldersRule"]),
        autoCancel: !(0, runtime_1.exists)(json, "autoCancel") ? undefined : json["autoCancel"]
    };
}
function CiBranchStartConditionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        source: (0, CiBranchPatterns_1.CiBranchPatternsToJSON)(value.source),
        filesAndFoldersRule: (0, CiFilesAndFoldersRule_1.CiFilesAndFoldersRuleToJSON)(value.filesAndFoldersRule),
        autoCancel: value.autoCancel
    };
}
