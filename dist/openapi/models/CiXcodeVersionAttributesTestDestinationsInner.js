"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCiXcodeVersionAttributesTestDestinationsInner = instanceOfCiXcodeVersionAttributesTestDestinationsInner;
exports.CiXcodeVersionAttributesTestDestinationsInnerFromJSON = CiXcodeVersionAttributesTestDestinationsInnerFromJSON;
exports.CiXcodeVersionAttributesTestDestinationsInnerFromJSONTyped = CiXcodeVersionAttributesTestDestinationsInnerFromJSONTyped;
exports.CiXcodeVersionAttributesTestDestinationsInnerToJSON = CiXcodeVersionAttributesTestDestinationsInnerToJSON;
const runtime_1 = require("../runtime");
const CiTestDestinationKind_1 = require("./CiTestDestinationKind");
const CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner_1 = require("./CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner");
/**
 * Check if a given object implements the CiXcodeVersionAttributesTestDestinationsInner interface.
 */
function instanceOfCiXcodeVersionAttributesTestDestinationsInner(value) {
    let isInstance = true;
    return isInstance;
}
function CiXcodeVersionAttributesTestDestinationsInnerFromJSON(json) {
    return CiXcodeVersionAttributesTestDestinationsInnerFromJSONTyped(json, false);
}
function CiXcodeVersionAttributesTestDestinationsInnerFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        deviceTypeName: !(0, runtime_1.exists)(json, "deviceTypeName") ? undefined : json["deviceTypeName"],
        deviceTypeIdentifier: !(0, runtime_1.exists)(json, "deviceTypeIdentifier") ? undefined : json["deviceTypeIdentifier"],
        availableRuntimes: !(0, runtime_1.exists)(json, "availableRuntimes") ? undefined : json["availableRuntimes"].map(CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner_1.CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInnerFromJSON),
        kind: !(0, runtime_1.exists)(json, "kind") ? undefined : (0, CiTestDestinationKind_1.CiTestDestinationKindFromJSON)(json["kind"])
    };
}
function CiXcodeVersionAttributesTestDestinationsInnerToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        deviceTypeName: value.deviceTypeName,
        deviceTypeIdentifier: value.deviceTypeIdentifier,
        availableRuntimes: value.availableRuntimes === undefined ? undefined : value.availableRuntimes.map(CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInner_1.CiXcodeVersionAttributesTestDestinationsInnerAvailableRuntimesInnerToJSON),
        kind: (0, CiTestDestinationKind_1.CiTestDestinationKindToJSON)(value.kind)
    };
}
