"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfDiagnosticInsight = instanceOfDiagnosticInsight;
exports.DiagnosticInsightFromJSON = DiagnosticInsightFromJSON;
exports.DiagnosticInsightFromJSONTyped = DiagnosticInsightFromJSONTyped;
exports.DiagnosticInsightToJSON = DiagnosticInsightToJSON;
const runtime_1 = require("../runtime");
const DiagnosticInsightDirection_1 = require("./DiagnosticInsightDirection");
const DiagnosticInsightReferenceVersionsInner_1 = require("./DiagnosticInsightReferenceVersionsInner");
const DiagnosticInsightType_1 = require("./DiagnosticInsightType");
/**
 * Check if a given object implements the DiagnosticInsight interface.
 */
function instanceOfDiagnosticInsight(value) {
    let isInstance = true;
    return isInstance;
}
function DiagnosticInsightFromJSON(json) {
    return DiagnosticInsightFromJSONTyped(json, false);
}
function DiagnosticInsightFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        insightType: !(0, runtime_1.exists)(json, "insightType") ? undefined : (0, DiagnosticInsightType_1.DiagnosticInsightTypeFromJSON)(json["insightType"]),
        direction: !(0, runtime_1.exists)(json, "direction") ? undefined : (0, DiagnosticInsightDirection_1.DiagnosticInsightDirectionFromJSON)(json["direction"]),
        referenceVersions: !(0, runtime_1.exists)(json, "referenceVersions") ? undefined : json["referenceVersions"].map(DiagnosticInsightReferenceVersionsInner_1.DiagnosticInsightReferenceVersionsInnerFromJSON)
    };
}
function DiagnosticInsightToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        insightType: (0, DiagnosticInsightType_1.DiagnosticInsightTypeToJSON)(value.insightType),
        direction: (0, DiagnosticInsightDirection_1.DiagnosticInsightDirectionToJSON)(value.direction),
        referenceVersions: value.referenceVersions === undefined ? undefined : value.referenceVersions.map(DiagnosticInsightReferenceVersionsInner_1.DiagnosticInsightReferenceVersionsInnerToJSON)
    };
}
