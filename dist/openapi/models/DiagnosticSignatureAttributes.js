"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticSignatureAttributesDiagnosticTypeEnum = void 0;
exports.instanceOfDiagnosticSignatureAttributes = instanceOfDiagnosticSignatureAttributes;
exports.DiagnosticSignatureAttributesFromJSON = DiagnosticSignatureAttributesFromJSON;
exports.DiagnosticSignatureAttributesFromJSONTyped = DiagnosticSignatureAttributesFromJSONTyped;
exports.DiagnosticSignatureAttributesToJSON = DiagnosticSignatureAttributesToJSON;
const runtime_1 = require("../runtime");
const DiagnosticInsight_1 = require("./DiagnosticInsight");
/**
 * @export
 */
exports.DiagnosticSignatureAttributesDiagnosticTypeEnum = {
    DiskWrites: "DISK_WRITES",
    Hangs: "HANGS",
    Launches: "LAUNCHES"
};
/**
 * Check if a given object implements the DiagnosticSignatureAttributes interface.
 */
function instanceOfDiagnosticSignatureAttributes(value) {
    let isInstance = true;
    return isInstance;
}
function DiagnosticSignatureAttributesFromJSON(json) {
    return DiagnosticSignatureAttributesFromJSONTyped(json, false);
}
function DiagnosticSignatureAttributesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        diagnosticType: !(0, runtime_1.exists)(json, "diagnosticType") ? undefined : json["diagnosticType"],
        signature: !(0, runtime_1.exists)(json, "signature") ? undefined : json["signature"],
        weight: !(0, runtime_1.exists)(json, "weight") ? undefined : json["weight"],
        insight: !(0, runtime_1.exists)(json, "insight") ? undefined : (0, DiagnosticInsight_1.DiagnosticInsightFromJSON)(json["insight"])
    };
}
function DiagnosticSignatureAttributesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        diagnosticType: value.diagnosticType,
        signature: value.signature,
        weight: value.weight,
        insight: (0, DiagnosticInsight_1.DiagnosticInsightToJSON)(value.insight)
    };
}
