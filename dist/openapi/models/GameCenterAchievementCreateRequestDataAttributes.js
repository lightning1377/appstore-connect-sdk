"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfGameCenterAchievementCreateRequestDataAttributes = instanceOfGameCenterAchievementCreateRequestDataAttributes;
exports.GameCenterAchievementCreateRequestDataAttributesFromJSON = GameCenterAchievementCreateRequestDataAttributesFromJSON;
exports.GameCenterAchievementCreateRequestDataAttributesFromJSONTyped = GameCenterAchievementCreateRequestDataAttributesFromJSONTyped;
exports.GameCenterAchievementCreateRequestDataAttributesToJSON = GameCenterAchievementCreateRequestDataAttributesToJSON;
/**
 * Check if a given object implements the GameCenterAchievementCreateRequestDataAttributes interface.
 */
function instanceOfGameCenterAchievementCreateRequestDataAttributes(value) {
    let isInstance = true;
    isInstance = isInstance && "referenceName" in value;
    isInstance = isInstance && "vendorIdentifier" in value;
    isInstance = isInstance && "points" in value;
    isInstance = isInstance && "showBeforeEarned" in value;
    isInstance = isInstance && "repeatable" in value;
    return isInstance;
}
function GameCenterAchievementCreateRequestDataAttributesFromJSON(json) {
    return GameCenterAchievementCreateRequestDataAttributesFromJSONTyped(json, false);
}
function GameCenterAchievementCreateRequestDataAttributesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        referenceName: json["referenceName"],
        vendorIdentifier: json["vendorIdentifier"],
        points: json["points"],
        showBeforeEarned: json["showBeforeEarned"],
        repeatable: json["repeatable"]
    };
}
function GameCenterAchievementCreateRequestDataAttributesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        referenceName: value.referenceName,
        vendorIdentifier: value.vendorIdentifier,
        points: value.points,
        showBeforeEarned: value.showBeforeEarned,
        repeatable: value.repeatable
    };
}
