"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterLeaderboardUpdateRequestDataAttributesScoreSortTypeEnum = exports.GameCenterLeaderboardUpdateRequestDataAttributesSubmissionTypeEnum = void 0;
exports.instanceOfGameCenterLeaderboardUpdateRequestDataAttributes = instanceOfGameCenterLeaderboardUpdateRequestDataAttributes;
exports.GameCenterLeaderboardUpdateRequestDataAttributesFromJSON = GameCenterLeaderboardUpdateRequestDataAttributesFromJSON;
exports.GameCenterLeaderboardUpdateRequestDataAttributesFromJSONTyped = GameCenterLeaderboardUpdateRequestDataAttributesFromJSONTyped;
exports.GameCenterLeaderboardUpdateRequestDataAttributesToJSON = GameCenterLeaderboardUpdateRequestDataAttributesToJSON;
const runtime_1 = require("../runtime");
const Decimal_1 = require("./Decimal");
const GameCenterLeaderboardFormatter_1 = require("./GameCenterLeaderboardFormatter");
/**
 * @export
 */
exports.GameCenterLeaderboardUpdateRequestDataAttributesSubmissionTypeEnum = {
    BestScore: "BEST_SCORE",
    MostRecentScore: "MOST_RECENT_SCORE"
};
/**
 * @export
 */
exports.GameCenterLeaderboardUpdateRequestDataAttributesScoreSortTypeEnum = {
    Asc: "ASC",
    Desc: "DESC"
};
/**
 * Check if a given object implements the GameCenterLeaderboardUpdateRequestDataAttributes interface.
 */
function instanceOfGameCenterLeaderboardUpdateRequestDataAttributes(value) {
    let isInstance = true;
    return isInstance;
}
function GameCenterLeaderboardUpdateRequestDataAttributesFromJSON(json) {
    return GameCenterLeaderboardUpdateRequestDataAttributesFromJSONTyped(json, false);
}
function GameCenterLeaderboardUpdateRequestDataAttributesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        defaultFormatter: !(0, runtime_1.exists)(json, "defaultFormatter") ? undefined : (0, GameCenterLeaderboardFormatter_1.GameCenterLeaderboardFormatterFromJSON)(json["defaultFormatter"]),
        referenceName: !(0, runtime_1.exists)(json, "referenceName") ? undefined : json["referenceName"],
        submissionType: !(0, runtime_1.exists)(json, "submissionType") ? undefined : json["submissionType"],
        scoreSortType: !(0, runtime_1.exists)(json, "scoreSortType") ? undefined : json["scoreSortType"],
        scoreRangeStart: !(0, runtime_1.exists)(json, "scoreRangeStart") ? undefined : (0, Decimal_1.DecimalFromJSON)(json["scoreRangeStart"]),
        scoreRangeEnd: !(0, runtime_1.exists)(json, "scoreRangeEnd") ? undefined : (0, Decimal_1.DecimalFromJSON)(json["scoreRangeEnd"]),
        recurrenceStartDate: !(0, runtime_1.exists)(json, "recurrenceStartDate") ? undefined : new Date(json["recurrenceStartDate"]),
        recurrenceDuration: !(0, runtime_1.exists)(json, "recurrenceDuration") ? undefined : json["recurrenceDuration"],
        recurrenceRule: !(0, runtime_1.exists)(json, "recurrenceRule") ? undefined : json["recurrenceRule"],
        archived: !(0, runtime_1.exists)(json, "archived") ? undefined : json["archived"]
    };
}
function GameCenterLeaderboardUpdateRequestDataAttributesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        defaultFormatter: (0, GameCenterLeaderboardFormatter_1.GameCenterLeaderboardFormatterToJSON)(value.defaultFormatter),
        referenceName: value.referenceName,
        submissionType: value.submissionType,
        scoreSortType: value.scoreSortType,
        scoreRangeStart: (0, Decimal_1.DecimalToJSON)(value.scoreRangeStart),
        scoreRangeEnd: (0, Decimal_1.DecimalToJSON)(value.scoreRangeEnd),
        recurrenceStartDate: value.recurrenceStartDate === undefined ? undefined : value.recurrenceStartDate.toISOString(),
        recurrenceDuration: value.recurrenceDuration,
        recurrenceRule: value.recurrenceRule,
        archived: value.archived
    };
}
