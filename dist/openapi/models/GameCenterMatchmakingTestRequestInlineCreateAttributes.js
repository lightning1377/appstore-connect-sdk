"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameCenterMatchmakingTestRequestInlineCreateAttributesLocaleEnum = void 0;
exports.instanceOfGameCenterMatchmakingTestRequestInlineCreateAttributes = instanceOfGameCenterMatchmakingTestRequestInlineCreateAttributes;
exports.GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSON = GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSON;
exports.GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSONTyped = GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSONTyped;
exports.GameCenterMatchmakingTestRequestInlineCreateAttributesToJSON = GameCenterMatchmakingTestRequestInlineCreateAttributesToJSON;
const runtime_1 = require("../runtime");
const Location_1 = require("./Location");
const Platform_1 = require("./Platform");
/**
 * @export
 */
exports.GameCenterMatchmakingTestRequestInlineCreateAttributesLocaleEnum = {
    ArSa: "AR-SA",
    CaEs: "CA-ES",
    CsCz: "CS-CZ",
    DaDk: "DA-DK",
    DeDe: "DE-DE",
    ElGr: "EL-GR",
    EnAu: "EN-AU",
    EnGb: "EN-GB",
    EnUs: "EN-US",
    EnKy: "EN-KY",
    EsEs: "ES-ES",
    EsMx: "ES-MX",
    FiFi: "FI-FI",
    FrCa: "FR-CA",
    FrFr: "FR-FR",
    HiIn: "HI-IN",
    HrHr: "HR-HR",
    HuHu: "HU-HU",
    IdId: "ID-ID",
    ItIt: "IT-IT",
    IwIl: "IW-IL",
    JaJp: "JA-JP",
    KoKr: "KO-KR",
    MsMy: "MS-MY",
    NlNl: "NL-NL",
    NoNo: "NO-NO",
    PlPl: "PL-PL",
    PtBr: "PT-BR",
    PtPt: "PT-PT",
    RoRo: "RO-RO",
    RuRu: "RU-RU",
    SkSk: "SK-SK",
    SvSe: "SV-SE",
    ThTh: "TH-TH",
    TrTr: "TR-TR",
    UkUa: "UK-UA",
    ZhCn: "ZH-CN",
    ZhTw: "ZH-TW",
    ZhHk: "ZH-HK"
};
/**
 * Check if a given object implements the GameCenterMatchmakingTestRequestInlineCreateAttributes interface.
 */
function instanceOfGameCenterMatchmakingTestRequestInlineCreateAttributes(value) {
    let isInstance = true;
    isInstance = isInstance && "requestName" in value;
    isInstance = isInstance && "secondsInQueue" in value;
    isInstance = isInstance && "bundleId" in value;
    isInstance = isInstance && "platform" in value;
    isInstance = isInstance && "appVersion" in value;
    return isInstance;
}
function GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSON(json) {
    return GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSONTyped(json, false);
}
function GameCenterMatchmakingTestRequestInlineCreateAttributesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        requestName: json["requestName"],
        secondsInQueue: json["secondsInQueue"],
        locale: !(0, runtime_1.exists)(json, "locale") ? undefined : json["locale"],
        location: !(0, runtime_1.exists)(json, "location") ? undefined : (0, Location_1.LocationFromJSON)(json["location"]),
        minPlayers: !(0, runtime_1.exists)(json, "minPlayers") ? undefined : json["minPlayers"],
        maxPlayers: !(0, runtime_1.exists)(json, "maxPlayers") ? undefined : json["maxPlayers"],
        playerCount: !(0, runtime_1.exists)(json, "playerCount") ? undefined : json["playerCount"],
        bundleId: json["bundleId"],
        platform: (0, Platform_1.PlatformFromJSON)(json["platform"]),
        appVersion: json["appVersion"]
    };
}
function GameCenterMatchmakingTestRequestInlineCreateAttributesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        requestName: value.requestName,
        secondsInQueue: value.secondsInQueue,
        locale: value.locale,
        location: (0, Location_1.LocationToJSON)(value.location),
        minPlayers: value.minPlayers,
        maxPlayers: value.maxPlayers,
        playerCount: value.playerCount,
        bundleId: value.bundleId,
        platform: (0, Platform_1.PlatformToJSON)(value.platform),
        appVersion: value.appVersion
    };
}
