"use strict";
/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * App Store Connect API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.5
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScmProviderTypeKindEnum = void 0;
exports.instanceOfScmProviderType = instanceOfScmProviderType;
exports.ScmProviderTypeFromJSON = ScmProviderTypeFromJSON;
exports.ScmProviderTypeFromJSONTyped = ScmProviderTypeFromJSONTyped;
exports.ScmProviderTypeToJSON = ScmProviderTypeToJSON;
const runtime_1 = require("../runtime");
/**
 * @export
 */
exports.ScmProviderTypeKindEnum = {
    BitbucketCloud: "BITBUCKET_CLOUD",
    BitbucketServer: "BITBUCKET_SERVER",
    GithubCloud: "GITHUB_CLOUD",
    GithubEnterprise: "GITHUB_ENTERPRISE",
    GitlabCloud: "GITLAB_CLOUD",
    GitlabSelfManaged: "GITLAB_SELF_MANAGED"
};
/**
 * Check if a given object implements the ScmProviderType interface.
 */
function instanceOfScmProviderType(value) {
    let isInstance = true;
    return isInstance;
}
function ScmProviderTypeFromJSON(json) {
    return ScmProviderTypeFromJSONTyped(json, false);
}
function ScmProviderTypeFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        kind: !(0, runtime_1.exists)(json, "kind") ? undefined : json["kind"],
        displayName: !(0, runtime_1.exists)(json, "displayName") ? undefined : json["displayName"],
        isOnPremise: !(0, runtime_1.exists)(json, "isOnPremise") ? undefined : json["isOnPremise"]
    };
}
function ScmProviderTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        kind: value.kind,
        displayName: value.displayName,
        isOnPremise: value.isOnPremise
    };
}
